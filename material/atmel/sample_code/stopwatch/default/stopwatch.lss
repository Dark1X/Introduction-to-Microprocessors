
stopwatch.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000002  00800100  0000021c  000002b0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000021c  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800102  00800102  000002b2  2**0
                  ALLOC
  3 .stab         00000378  00000000  00000000  000002b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000071  00000000  00000000  0000062c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000020  00000000  00000000  0000069d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000009d  00000000  00000000  000006bd  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00000245  00000000  00000000  0000075a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 0000011e  00000000  00000000  0000099f  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000289  00000000  00000000  00000abd  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000070  00000000  00000000  00000d48  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000014c  00000000  00000000  00000db8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00000013  00000000  00000000  00000f04  2**0
                  CONTENTS, READONLY, DEBUGGING
Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 d6 00 	jmp	0x1ac	; 0x1ac <__vector_11>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d0 e1       	ldi	r29, 0x10	; 16
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ec e1       	ldi	r30, 0x1C	; 28
  84:	f2 e0       	ldi	r31, 0x02	; 2
  86:	02 c0       	rjmp	.+4      	; 0x8c <.do_copy_data_start>

00000088 <.do_copy_data_loop>:
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0

0000008c <.do_copy_data_start>:
  8c:	a2 30       	cpi	r26, 0x02	; 2
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <.do_copy_data_loop>

00000092 <__do_clear_bss>:
  92:	11 e0       	ldi	r17, 0x01	; 1
  94:	a2 e0       	ldi	r26, 0x02	; 2
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a8 30       	cpi	r26, 0x08	; 8
  9e:	b1 07       	cpc	r27, r17
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 c5 00 	call	0x18a	; 0x18a <main>
  a6:	0c 94 0d 01 	jmp	0x21a	; 0x21a <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <init_io>:
	}            
}

void init_io()
{
  ae:	9f ef       	ldi	r25, 0xFF	; 255
  b0:	91 b9       	out	0x01, r25	; 1
	DDRA = 0XFF;
	PORTA = 0X00;		// set pullups 
  b2:	12 b8       	out	0x02, r1	; 2
	DDRB = 0XFF;
  b4:	94 b9       	out	0x04, r25	; 4
	PORTB = 0X00;
  b6:	15 b8       	out	0x05, r1	; 5
	DDRC = 0X00;
  b8:	17 b8       	out	0x07, r1	; 7
	PORTC = 0X3F;	// set pullups and tristate P6, P7
  ba:	8f e3       	ldi	r24, 0x3F	; 63
  bc:	88 b9       	out	0x08, r24	; 8
	DDRD = 0XFF;
  be:	9a b9       	out	0x0a, r25	; 10
	PORTD = 0X00;
  c0:	1b b8       	out	0x0b, r1	; 11
  c2:	08 95       	ret

000000c4 <init_rtc>:
}

void init_rtc()
{
  c4:	f8 94       	cli
	cli();           
    ASSR |= (1<<AS2);           //set Timer/Counter0 to be asynchronous, driving a crystal
  c6:	e6 eb       	ldi	r30, 0xB6	; 182
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	80 83       	st	Z, r24
	TCNT2 = 0x00;
  d0:	10 92 b2 00 	sts	0x00B2, r1
	TCCR2A = 0;
  d4:	10 92 b0 00 	sts	0x00B0, r1
    TCCR2B = _BV(CS20);   //prescale the timer to be clock source
  d8:	81 e0       	ldi	r24, 0x01	; 1
  da:	80 93 b1 00 	sts	0x00B1, r24
//    while(ASSR&0x07);           //Wait until TC0 is updated
    TIMSK2 = _BV(TOIE2);        //set 8-bit Timer/Counter0 Overflow Interrupt Enable                             
  de:	80 93 70 00 	sts	0x0070, r24
    TIFR2=0;			//clear any pending timer interrupts
  e2:	17 ba       	out	0x17, r1	; 23
	sei();                     //enable interrpts                              
  e4:	78 94       	sei
  e6:	08 95       	ret

000000e8 <display>:
}

void display()
{
  e8:	81 e0       	ldi	r24, 0x01	; 1
  ea:	80 93 07 01 	sts	0x0107, r24
	test = TRUE;
	while (test)
  ee:	80 91 07 01 	lds	r24, 0x0107
  f2:	88 23       	and	r24, r24
  f4:	59 f0       	breq	.+22     	; 0x10c <display+0x24>
  f6:	93 e0       	ldi	r25, 0x03	; 3
	{
		PORTD = t.second;
  f8:	80 91 05 01 	lds	r24, 0x0105
  fc:	8b b9       	out	0x0b, r24	; 11
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
  fe:	89 2f       	mov	r24, r25
 100:	8a 95       	dec	r24
 102:	f1 f7       	brne	.-4      	; 0x100 <display+0x18>
 104:	80 91 07 01 	lds	r24, 0x0107
 108:	88 23       	and	r24, r24
 10a:	b1 f7       	brne	.-20     	; 0xf8 <display+0x10>
 10c:	08 95       	ret

0000010e <keyscan>:
		_delay_us(10);
/*
		PORTC = 0B00000010;
		PORTD = t.minute;
		_delay_us(10);
*/
	}
}

void keyscan()
{
 10e:	86 b1       	in	r24, 0x06	; 6
 110:	80 6c       	ori	r24, 0xC0	; 192
 112:	80 95       	com	r24
	char check;
	check = ~(PINC | KEYMASK);
	PORTA = check;
 114:	82 b9       	out	0x02, r24	; 2
	PORTB = key_up;
 116:	90 91 01 01 	lds	r25, 0x0101
 11a:	95 b9       	out	0x05, r25	; 5

	if (check)
 11c:	88 23       	and	r24, r24
 11e:	19 f0       	breq	.+6      	; 0x126 <keyscan+0x18>
	{
		if (key_up)
 120:	99 23       	and	r25, r25
 122:	09 f5       	brne	.+66     	; 0x166 <keyscan+0x58>
 124:	08 95       	ret
		{
			if (key_up++ > 3) key_up = 0;
		}
	}
	else
	{
		if (!key_up) key_up = 3;
 126:	99 23       	and	r25, r25
 128:	d1 f0       	breq	.+52     	; 0x15e <keyscan+0x50>
		if (key_up-- <1) key_up = 1;
 12a:	91 50       	subi	r25, 0x01	; 1
 12c:	90 93 01 01 	sts	0x0101, r25
 130:	9f 5f       	subi	r25, 0xFF	; 255
 132:	19 16       	cp	r1, r25
 134:	34 f5       	brge	.+76     	; 0x182 <keyscan+0x74>
	}
	if (key_up == 3)
 136:	80 91 01 01 	lds	r24, 0x0101
 13a:	83 30       	cpi	r24, 0x03	; 3
 13c:	99 f7       	brne	.-26     	; 0x124 <keyscan+0x16>
	{
		if (timer_on) timer_save = TCNT2;
 13e:	90 91 02 01 	lds	r25, 0x0102
 142:	99 23       	and	r25, r25
 144:	c9 f0       	breq	.+50     	; 0x178 <keyscan+0x6a>
 146:	80 91 b2 00 	lds	r24, 0x00B2
 14a:	80 93 03 01 	sts	0x0103, r24
		else TCNT2 = timer_save;
		timer_on = !timer_on;
 14e:	10 92 02 01 	sts	0x0102, r1
 152:	99 23       	and	r25, r25
 154:	39 f7       	brne	.-50     	; 0x124 <keyscan+0x16>
 156:	81 e0       	ldi	r24, 0x01	; 1
 158:	80 93 02 01 	sts	0x0102, r24
 15c:	08 95       	ret
 15e:	82 e0       	ldi	r24, 0x02	; 2
 160:	80 93 01 01 	sts	0x0101, r24
 164:	08 95       	ret
 166:	9f 5f       	subi	r25, 0xFF	; 255
 168:	90 93 01 01 	sts	0x0101, r25
 16c:	91 50       	subi	r25, 0x01	; 1
 16e:	94 30       	cpi	r25, 0x04	; 4
 170:	14 f3       	brlt	.-60     	; 0x136 <keyscan+0x28>
 172:	10 92 01 01 	sts	0x0101, r1
 176:	08 95       	ret
 178:	80 91 03 01 	lds	r24, 0x0103
 17c:	80 93 b2 00 	sts	0x00B2, r24
 180:	e6 cf       	rjmp	.-52     	; 0x14e <keyscan+0x40>
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	80 93 01 01 	sts	0x0101, r24
 188:	08 95       	ret

0000018a <main>:
 18a:	0e 94 57 00 	call	0xae	; 0xae <init_io>
 18e:	80 91 64 00 	lds	r24, 0x0064
 192:	80 71       	andi	r24, 0x10	; 16
 194:	80 93 64 00 	sts	0x0064, r24
 198:	0e 94 62 00 	call	0xc4	; 0xc4 <init_rtc>
 19c:	83 b7       	in	r24, 0x33	; 51
 19e:	81 7f       	andi	r24, 0xF1	; 241
 1a0:	83 bf       	out	0x33, r24	; 51
 1a2:	0e 94 87 00 	call	0x10e	; 0x10e <keyscan>
 1a6:	0e 94 74 00 	call	0xe8	; 0xe8 <display>
 1aa:	fb cf       	rjmp	.-10     	; 0x1a2 <main+0x18>

000001ac <__vector_11>:
	}
}

ISR(TIMER2_OVF_vect)
{
 1ac:	1f 92       	push	r1
 1ae:	0f 92       	push	r0
 1b0:	0f b6       	in	r0, 0x3f	; 63
 1b2:	0f 92       	push	r0
 1b4:	11 24       	eor	r1, r1
 1b6:	8f 93       	push	r24
 1b8:	9f 93       	push	r25
	test = FALSE;
 1ba:	10 92 07 01 	sts	0x0107, r1
	if (timer_on)
 1be:	80 91 02 01 	lds	r24, 0x0102
 1c2:	88 23       	and	r24, r24
 1c4:	19 f1       	breq	.+70     	; 0x20c <__vector_11+0x60>
	{
		if (++t.tick==128)
 1c6:	80 91 04 01 	lds	r24, 0x0104
 1ca:	8f 5f       	subi	r24, 0xFF	; 255
 1cc:	80 93 04 01 	sts	0x0104, r24
 1d0:	80 91 04 01 	lds	r24, 0x0104
 1d4:	80 38       	cpi	r24, 0x80	; 128
 1d6:	d1 f4       	brne	.+52     	; 0x20c <__vector_11+0x60>
		{
			t.tick=0;
 1d8:	10 92 04 01 	sts	0x0104, r1
			if (++t.second==60)
 1dc:	80 91 05 01 	lds	r24, 0x0105
 1e0:	8f 5f       	subi	r24, 0xFF	; 255
 1e2:	80 93 05 01 	sts	0x0105, r24
 1e6:	80 91 05 01 	lds	r24, 0x0105
 1ea:	8c 33       	cpi	r24, 0x3C	; 60
 1ec:	79 f4       	brne	.+30     	; 0x20c <__vector_11+0x60>
			{
				t.second=0;
 1ee:	10 92 05 01 	sts	0x0105, r1
				if (++t.minute==maxmin) 
 1f2:	80 91 06 01 	lds	r24, 0x0106
 1f6:	8f 5f       	subi	r24, 0xFF	; 255
 1f8:	80 93 06 01 	sts	0x0106, r24
 1fc:	90 91 06 01 	lds	r25, 0x0106
 200:	80 91 00 01 	lds	r24, 0x0100
 204:	98 17       	cp	r25, r24
 206:	11 f4       	brne	.+4      	; 0x20c <__vector_11+0x60>
				{
					t.minute=0;
 208:	10 92 06 01 	sts	0x0106, r1
 20c:	9f 91       	pop	r25
 20e:	8f 91       	pop	r24
 210:	0f 90       	pop	r0
 212:	0f be       	out	0x3f, r0	; 63
 214:	0f 90       	pop	r0
 216:	1f 90       	pop	r1
 218:	18 95       	reti

0000021a <_exit>:
 21a:	ff cf       	rjmp	.-2      	; 0x21a <_exit>
