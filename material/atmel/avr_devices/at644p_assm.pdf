%!PS-Adobe-3.1
%ADO_DSC_Encoding: MacOS Roman
%%Title: atmega644p_sum.pdf
%%Creator: Adobe Acrobat 8.0
%%For: paul
%%CreationDate: 03/03/2010, 01:54:28 PM
%%BoundingBox: 0 0 792 612
%%HiResBoundingBox: 0 0 792 612
%%CropBox: 0 0 792 612
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%PageOrder: Ascend
%%TargetDevice: (HP LaserJet P3005) (3010.107) 0
%%Pages: (atend)
%%DocumentProcessColors: (atend)
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 0 1 -1 0
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline pop
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
%ADOBeginClientInjection: DocumentSetup Start "No Re-Distill"
%% Removing the following eleven lines is illegal, subject to the Digital Copyright Act of 1998.
mark currentfile eexec
54dc5232e897cbaaa7584b7da7c23a6c59e7451851159cdbf40334cc2600
30036a856fabb196b3ddab71514d79106c969797b119ae4379c5ac9b7318
33471fc81a8e4b87bac59f7003cddaebea2a741c4e80818b4b136660994b
18a85d6b60e3c6b57cc0815fe834bc82704ac2caf0b6e228ce1b2218c8c7
67e87aef6db14cd38dda844c855b4e9c46d510cab8fdaa521d67cbb83ee1
af966cc79653b9aca2a5f91f908bbd3f06ecc0c940097ec77e210e6184dc
2f5777aacfc6907d43f1edb490a2a89c9af5b90ff126c0c3c5da9ae99f59
d47040be1c0336205bf3c6169b1b01cd78f922ec384cd0fcab955c0c20de
000000000000000000000000000000000000000000000000000000000000
cleartomark
%ADOEndClientInjection: DocumentSetup Start "No Re-Distill"
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
false Adobe_AGM_Core/begin_feature gx false {
%%BeginFeature: *CustomPageSize True
792.000000 612.000000 0.000000 0.000000 1 

  pop pop pop
  <</DeferredMediaSelection true /PageSize [ 7 -2 roll ] /ImagingBBox null >>
  setpagedevice

%%EndFeature
} Adobe_AGM_Core/end_feature gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (20100303172055) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (RGB Display Profile) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright 2010 Adobe Systems Incorporated) put
dup /ProfileID <61AC4B3DEF2DFD9584BA22298ECDC6A3> put
dup /DecodeABC [
{{0 0.00012 0.00024 0.00037 0.00049 0.00061 0.00073 0.00085 0.00098 0.0011
0.00122 0.00134 0.00146 0.00159 0.00171 0.00195 0.00225 0.00257 0.00291 0.00328
0.00367 0.00409 0.00453 0.00499 0.00548 0.006 0.00654 0.00711 0.0077 0.00832
0.00896 0.00963 0.01033 0.01105 0.0118 0.01258 0.01338 0.01421 0.01507 0.01595
0.01687 0.01781 0.01878 0.01977 0.0208 0.02185 0.02294 0.02405 0.02519 0.02635
0.02755 0.02878 0.03003 0.03132 0.03263 0.03398 0.03535 0.03675 0.03819 0.03965
0.04114 0.04267 0.04422 0.0458 0.04742 0.04906 0.05074 0.05244 0.05418 0.05595
0.05775 0.05958 0.06144 0.06333 0.06525 0.06721 0.06919 0.07121 0.07326 0.07534
0.07746 0.0796 0.08178 0.08399 0.08623 0.0885 0.09081 0.09315 0.09552 0.09792
0.10036 0.10283 0.10533 0.10786 0.11043 0.11303 0.11566 0.11833 0.12103 0.12376
0.12653 0.12933 0.13216 0.13503 0.13793 0.14086 0.14383 0.14683 0.14986 0.15293
0.15604 0.15917 0.16234 0.16555 0.16879 0.17206 0.17537 0.17871 0.18209 0.1855
0.18894 0.19242 0.19594 0.19949 0.20307 0.20669 0.21034 0.21403 0.21776 0.22151
0.22531 0.22914 0.233 0.2369 0.24084 0.24481 0.24881 0.25285 0.25693 0.26104
0.26519 0.26937 0.27359 0.27785 0.28214 0.28647 0.29083 0.29523 0.29966 0.30413
0.30864 0.31318 0.31776 0.32238 0.32703 0.33172 0.33644 0.34121 0.346 0.35084
0.35571 0.36062 0.36556 0.37054 0.37556 0.38062 0.38571 0.39083 0.396 0.4012
0.40644 0.41172 0.41703 0.42238 0.42777 0.4332 0.43866 0.44416 0.4497 0.45527
0.46088 0.46653 0.47222 0.47795 0.48371 0.48951 0.49535 0.50122 0.50714 0.51309
0.51908 0.5251 0.53117 0.53727 0.54341 0.54959 0.55581 0.56207 0.56836 0.57469
0.58106 0.58747 0.59392 0.6004 0.60693 0.61349 0.62009 0.62673 0.63341 0.64012
0.64688 0.65367 0.6605 0.66737 0.67428 0.68123 0.68822 0.69525 0.70231 0.70942
0.71656 0.72374 0.73097 0.73823 0.74553 0.75287 0.76024 0.76766 0.77512 0.78261
0.79015 0.79772 0.80534 0.81299 0.82069 0.82842 0.83619 0.844 0.85186 0.85975
0.86768 0.87565 0.88366 0.89171 0.8998 0.90793 0.9161 0.92431 0.93256 0.94085
0.94918 0.95755 0.96596 0.97441 0.9829 0.99143 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180479722 0.1112611582 0.006958114
0.1925505501 0.3584496834 0.0485465782
0.0715102744 0.030296788 0.3569466697
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8248901367] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
grestore
Adobe_AGM_Core/pt gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} 5602 (% &end XMP packet& %) ReadBypdfmark_5_string
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c321 44.404137, Thu Sep 17 2009 18:24:09">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdfx="http://ns.adobe.com/pdfx/1.3/"
    xmlns:xapMM="http://ns.adobe.com/xap/1.0/mm/"
   xap:CreatorTool="FrameMaker 8.0"
   xap:ModifyDate="2009-08-04T12:21:45+02:00"
   xap:CreateDate="1997-05-02T14:43:34Z"
   xap:MetadataDate="2009-08-04T12:21:45+02:00"
   pdf:Copyright="Atmel Corporation"
   pdf:Producer="Acrobat Distiller 8.1.0 (Windows)"
   pdf:Keywords="AVR FLASH MCU EEPROM SRAM picoPower"
   dc:format="application/pdf"
   pdfx:Copyright="Atmel Corporation"
   xapMM:DocumentID="uuid:22454b32-f0cc-4c2c-9cca-21551893d56a"
   xapMM:InstanceID="uuid:8246bc13-5f95-4261-850e-5017cea840ef">
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">ATmega164P/324P/644P</rdf:li>
    </rdf:Alt>
   </dc:title>
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Atmel Corporation</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">AVR Flash Microcontrollers</rdf:li>
    </rdf:Alt>
   </dc:description>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[{Catalog} {Doc_Metadata} /Metadata pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 13 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (13)]
[/TrimBox [0 0 792 612]]
[/BleedBox [0 0 792 612]]
[/ArtBox [0 0 612 612 ]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -612 translate
pgsv
[0 -1 1 0 0 612 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
[1 0 0 1 0 0 ]ct
false sop
/1 
[/DeviceGray] /CSA add_res
0 gry
%ADOBeginSubsetFont: ADVAAA+Helvetica-Bold Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /ADVAAA+Helvetica-Bold def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (Helvetica-Bold) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 51 /three put
def
/UniqueID 28357 def
/FontBBox {-170 -228 1003 962} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 718 737 532 546 698 710] def
/OtherBlues [271 283 401 409 -217 -208] def
/BlueScale 0.0437917 def
/StdHW [118] def
/StdVW [140] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/one <1C60D8A8C9B7EF327C10274A23FFA602162C4CA1571585B0C1E77513AA
5B7F97CD86DBDAB28AAC85EF0A29A3E89D41CB761E2BBEAEE690> |-
/three <1C60D8A8C9B7EF32A450E6CDCB2DBC464D59B250EEFF297922703F7A
1C62B0E2DD902F8B4278E9F98AECCD8BD128B20B17BEC7D8A3A1A65162C82E5A
8CE9866F72C565110868FD65D8C18A62564EFD1C8C46DBAB20D378988B1BB258
9905F17AF538B8272CCD92616DC49A1F2B14BC69E7CB92C844D3EDDCF325C584
8F599A6885AB739A36AA85201B953F058DEC541E4C0988CE6835E70930BE13F0
11B2CE417AF4A7D17EA8254FD592245E27F05D85E45036335FE7B7BC51E5AB59
02EE0E8226F2F0> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LBAXSV+Helvetica-Bold /ADVAAA+Helvetica-Bold findfont ct_VMDictPut
/LBAXSV+Helvetica-Bold*1 
[49{/.notdef}rp /one /.notdef /three 204{/.notdef}rp]
LBAXSV+Helvetica-Bold nf
LBAXSV+Helvetica-Bold*1 [9.96 0 0 -9.96 0 0 ]msf
564.9 747.54 mo
(13)
[5.57959 0 ]xsh
261.72 761.28 mo
329.16 761.28 li
329.16 727.68 li
261.72 727.68 li
cp
1 gry
f
266.16 758.04 mo
324.72 758.04 li
324.72 730.92 li
266.16 730.92 li
cp
f
gsave
266.164 758.008 mo
324.732 758.008 li
324.732 730.927 li
266.164 730.927 li
cp
clp
gsave
266.16 730.92 mo
324.72 730.92 li
324.72 758.04 li
266.16 758.04 li
cp
eclp
274.685 737.181 mo
266.395 752.342 li
272.951 752.342 li
272.951 750.669 li
271.722 750.669 li
274.464 745.69 li
274.464 752.342 li
278.719 752.342 li
278.719 737.181 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.03529 0.35686 0.65099 colr
f
0.274 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
274.685 737.181 mo
266.395 752.342 li
272.951 752.342 li
272.951 750.669 li
271.722 750.669 li
274.464 745.69 li
274.464 752.342 li
278.719 752.342 li
278.719 737.181 li
cp
@
318.214 737.181 mo
313.833 737.181 li
313.833 752.373 li
320.42 752.373 li
322.658 748.243 li
318.214 748.243 li
f
318.214 737.181 mo
313.833 737.181 li
313.833 752.373 li
320.42 752.373 li
322.658 748.243 li
318.214 748.243 li
cp
@
266.301 753.696 mo
266.301 757.447 li
317.584 757.447 li
319.663 753.696 li
f
266.301 753.696 mo
266.301 757.447 li
317.584 757.447 li
319.663 753.696 li
cp
@
280.328 752.372 mo
280.328 735.698 li
275.411 735.698 li
278.184 731.064 li
322.722 731.064 li
322.722 735.698 li
284.614 735.698 li
284.614 752.372 li
f
280.328 752.372 mo
280.328 735.698 li
275.411 735.698 li
278.184 731.064 li
322.722 731.064 li
322.722 735.698 li
284.614 735.698 li
284.614 752.372 li
cp
@
286 752.372 mo
286 737.18 li
298.387 737.18 li
300.154 737.116 301.603 738.219 301.509 740.237 cv
301.509 752.373 li
297.379 752.373 li
297.379 740.142 li
297.316 738.819 296.055 738.819 295.804 738.819 cv
295.804 752.373 li
291.706 752.373 li
291.706 738.819 li
290.193 738.819 li
290.193 752.373 li
286 752.373 li
f
286 752.372 mo
286 737.18 li
298.387 737.18 li
300.154 737.116 301.603 738.219 301.509 740.237 cv
301.509 752.373 li
297.379 752.373 li
297.379 740.142 li
297.316 738.819 296.055 738.819 295.804 738.819 cv
295.804 752.373 li
291.706 752.373 li
291.706 738.819 li
290.193 738.819 li
290.193 752.373 li
286 752.373 li
cp
@
312.383 737.181 mo
303.054 737.181 li
303.054 752.405 li
312.383 752.405 li
312.383 748.148 li
306.079 748.148 li
306.079 746.824 li
312.383 746.824 li
312.383 742.728 li
306.079 742.728 li
306.079 741.372 li
312.383 741.372 li
f
312.383 737.181 mo
303.054 737.181 li
303.054 752.405 li
312.383 752.405 li
312.383 748.148 li
306.079 748.148 li
306.079 746.824 li
312.383 746.824 li
312.383 742.728 li
306.079 742.728 li
306.079 741.372 li
312.383 741.372 li
cp
@
0.493 lw
322.343 753.474 mo
323.509 753.474 324.487 754.453 324.487 755.619 cv
324.487 756.784 323.509 757.763 322.343 757.763 cv
321.178 757.763 320.2 756.784 320.2 755.619 cv
320.2 754.452 321.178 753.474 322.343 753.474 cv
cp
@
321.834 754.752 mo
322.576 754.752 li
322.722 754.752 322.971 754.78 322.971 755.119 cv
322.971 755.444 322.741 755.5 322.523 755.5 cv
321.835 755.5 li
321.835 754.752 li
cp
321.834 755.755 mo
322.554 755.755 li
322.91 755.755 322.947 755.966 322.947 756.146 cv
322.947 756.229 322.956 756.564 322.999 756.698 cv
323.364 756.698 li
323.364 756.65 li
323.272 756.597 323.257 756.551 323.253 756.429 cv
323.234 756.031 li
323.222 755.724 323.096 755.67 322.971 755.617 cv
323.112 755.534 323.278 755.416 323.278 755.091 cv
323.278 754.624 322.916 754.498 322.554 754.498 cv
321.537 754.498 li
321.537 756.698 li
321.834 756.698 li
321.834 755.755 li
f
grestore
grestore
0 gry
%ADOBeginSubsetFont: BLQAAA+Helvetica Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /BLQAAA+Helvetica def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (Helvetica) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 77 /M put
dup 82 /R put
dup 83 /S put
dup 86 /V put
dup 177 /endash put
def
/UniqueID 43142 def
/FontBBox {-166 -225 1000 931} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 718 737 523 538 688 703] def
/OtherBlues [270 281 -220 -207] def
/BlueScale 0.0437917 def
/StdHW [76] def
/StdVW [88] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/slash <1C60D8A8C9B854D08E823E34E98D69F07852149357481CB22577590C
C2367BB833216B> |-
/zero <1C60D8A8C9B7EF32A47D2AA10CC01BD74F486262CA3CBA2A0BB3D25A3
A094F02BD79F42A0A236349C843943C6914F47589F3954D0C018D1FE33AE62F4
AD6F7BB100F692008FA5232B949E365DCD3CA3A3EC8285D42D2BEFA> |-
/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE0295
8A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-
/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23
A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F
7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA
2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1C
B4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDD
AD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8
950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27
315B3507F9DAF305> |-
/nine <1C60D8A8C9B7EF32A4731A9DB70B9490730918F3CC8A6CEFA5DBCDDDD
5B8FF631E5F2E3BEA7592C5DB8D17DFB2B2E4B0DA0B1CDB7CBCE67C1382E1BCA
B1CA0DC367CB2D59D0DA1A7C85131B5D767099977B59D2EE9CD09CE6C2F22826
E56502A470206F3EAA46E7E3E86C6D4D4258A80AAFAE933FB6A3325CB283E> |-
/A <1C60D8A8C9B64EDFA3F30AE40D82621F0FCB1DE3B8FE08B0132A2CCBB252
5814D0E06433BF12343DC9A9AB3FF78B46F8CC42B8A00C8B5EA738952A496397
7B57B3D18EEA0F5BB95C06FA8CB59D2805C2A2BCC67181B967> |-
/M <1C60D8A8C9B6B41CEC8259157919DBFFC0387AB03B82A38E0BA7FD31C0C9
A9756DFD39FD4BD480155A68D2E08D21C20BC3CEA4B95133EF2A2BF8F5EEFAD3
CF67237CDD989A41F7033AA8F7C11EFEE59FE8A38BB05EE69AE4B6EB65A6C23E
8D337DDC21023E73B350C7A7BCDD414F20B8F03B485777C7ADB7DA43B9> |-
/R <1C60D8A8C9B6079F1E4D8C18B43D708E4867E1D5DF87FFDFDA59C87E0DAA
C2980D72F189A927C7607FB955553C4E4B82FD6E924592BF3E5BCF70BD67C10F
BFCC049000E196CAB909156B2D7E5AD89BC25B1EEB84D6826D9E71A848125076
4CA7F6941E7E5A3FA03A6C1E3D8CFFF2F1E46B6C85653A4E4F151EE538164F20
ED0EF4C4DDC2D3E61A88EDB425566879BAB1370C523490E7EC92ECF6338DD3> |-
/S <1C60D8A8C9B64EDF7B9A268599F9CD8C4143A0E6DDDCF2A0054E6BC2F76C
64CEFA918C4E8C0A17BF13FEEAAFA3992570A221EB29D874F6372AE0D5147B81
D12AD995155CFC83207D350E887D4FEBD8084F48B3CC6796B4C5DD7C46D97C8A
BA91E1F709B61796E472D133E1651C4F266523B863949A58DEF11F7CBF27A2FD
BD87B6510960625D3CE0D8C2C732863F2494E0D388028B3EF679DC21468C0061
1AD0512E72DA1636CB7A> |-
/V <1C60D8A8C9B64EDF884A7D8E901D2F4533C16A14B652E2E01CB0C4A82BD4
AE8D918B8A9135C63318FE8084BF228A8B1FD8F9> |-
/endash <1C60D8A8C9B7EF322B918448B7160BDD44CB8458F60F408D1D231B5
250E757> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LBAXSW+Helvetica /BLQAAA+Helvetica findfont ct_VMDictPut
/LBAXSW+Helvetica*1 
[47{/.notdef}rp /slash /zero /one 6{/.notdef}rp /eight /nine 7{/.notdef}rp 
/A 11{/.notdef}rp /M 4{/.notdef}rp /R /S 2{/.notdef}rp /V 
90{/.notdef}rp /endash 78{/.notdef}rp]
LBAXSW+Helvetica nf
LBAXSW+Helvetica*1 [6.96 0 0 -6.96 0 0 ]msf
36 760.08 mo
(8011MS\261AVR\26108/09)
[3.90038 3.83983 3.90038 3.90038 5.82825 4.673 3.83983 4.673 4.673 5.05575 3.90038 3.83984 
3.90038 1.92027 3.90038 0 ]xsh
%ADOBeginSubsetFont: ADVAAA+Helvetica-Bold AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LBAXSV+Helvetica-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B854D08E823E34E98D69E05EECC9E8705DB5F86B9930EA
7128BCC1A633977959> |-
/two <1C60D8A8C9B7EF325767EC41CBF510D1E0C71F1F1C039215CC32A5B90F
CF87168E35C28244745FCF47A9B7CE070B35171DB218CE7C8F2D9F0726293D9E
65C3C45297780FC122CECE1C36987116C8DB6BB559F3E2FA77AEB29702EDED93
3AF70BCDE4B644F7> |-
/four <1C60D8A8C9B7EF327C1027456714FC3BC7619810153E0E0BB1AFC3AE3
16C3E66D77684AF5C288D5749B76CF93B3D20F71F5A0E3789D4E186D0FDA28BA
D7075305BC124C6C5C0D7ED2C416E872E8670A5833B01> |-
/six <1C60D8A8C9B7EF32A450E6CDC47A46EBA62A986D8A4018CF2DEBD16CC9
7505CFB6B209B0A9FF5A258AA31DE23E1D88F734A7E48F8AF853626B7C39561C
3E52AD885CB4E560B9BBA8F7A2564D7FCB11AE5F639E6EEBCA772B6104B975CD
45A7CF9E774D11F805448B94627A866672C545B7299AC606F61FB363E9109DE6
AFC55F57428B80767B420D035D25C121384CAD9F93E64F83326C7580B961> |-
/A <1C60D8A8C9B6079F3517E07AE194467F2600CBBF80CDACFF67CA946405EC
4118A902AA9E3AD1C2ACBC1C96ADCDF278A5B068D6AD3EC85B0F1FA9ADA650BA
DCDD259A1E80F048D046> |-
/P <1C60D8A8C9B64EDFA3F30AE4FF71B5F4ACB06C7830091ED76355AF57E563
BACE6B9F18382092F649F10A78153D9E643FCA4FB2F0EA425397CD32EF53DFCA
2A21E66880A9FE4531E700C6054694F979479334C9EA> |-
/T <1C60D8A8C9B7D8BE41A64DAA76A975BC551F108B068D01BDBBAC2AD27262
B59952A766BB13F857E80A9C1CAD3ED3A7ACB4> |-
/a <1C60D8A8C9B7EF325730A2907F61B00205C0A296C9DF32E9DC65B526E2F4
C8ADC580B897B7206A5DA59C9696BB00EA7F1A0A06C73023E46EC804A076F02D
F4BDC69A6135461545FA8A14BD27F8CF4F25F4943E37F1D1C65276DECB4E9D6A
C0EC48F60EFDBE12AA6587FCF164CC3DB45D2B5A65777B03419394CDDD24FF22
F21243F8E28ED1FF2DD09C8E2A84D298381AAD9550B39360621CE1C759F80798
D4E2E93482B63D0349BE8E88D5485F93034964B138E766D0A08074C8EC8EE58B
FBF92479BF1434BFA703> |-
/e <1C60D8A8C9B7EF32A1CB45752FF6523DA5288185EF43DD045146AAD81675
EF96A1DDE9797BFF08369703AB5B932EB4FC76842B8FAFEA26499EB28D9010BF
45781D64B0753AFDAAF76627560E41BCFD847C893FE9E9680771D287E1806D72
84DB4BF9596E39109D2864B1FF> |-
/g <1C60D8A8C9B7D8BE1A3055587B34EC2A3DF2B79203F4050AA0B5738ED638
04380D2E13E060816E3421AEA1DC12A32CB72F12790D0531C0BCCFA2CD650E69
BF11A8A0B494E5997E2753F4DC7CC615950DE260CBFC81E5B438A30B9D1AD997
BAB5450F1B8057E9A08FDF0718C939D7BA23C215F3022BCED0B9A537C28F8186
7362D2D294B15570F2321017B898104E0838A83FEEF95313323561CAAA94467F
81A81D82605DBD0767EF388643166EBADEB4C9811852DF8D45F955B91E9BA5C8
9189E75A5728690EB0914B68BFB3277365BBB1F1EFD1E389E99F88EB021EE238
5C968A7A43FF69> |-
/m <1C60D8A8C9B59F85DBED304F205490E957BA80A7CE923989279D287A3DB9
7E93876C271A2C24EB89F39ADD151395A0382BD3CF306DD3500A44E02FD331FF
5F6833EC31518A35916D67D8BC58A88311498E0D46D0A13D75376763AA882382
C8F3547A34FF4AF65F97E4FFE5FF22577B793A63A62C968C68E5E59ED9FA05A5
2E2BF36653087848C6B445B278603F0C520FEA9021ED3917FC5606815DEFC9D7
9B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LBAXSV+Helvetica-Bold /Encoding get
dup 47 /slash put
dup 50 /two put
dup 52 /four put
dup 54 /six put
dup 65 /A put
dup 80 /P put
dup 84 /T put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 109 /m put
pop
%ADOEndSubsetFont
/LBAXSV+Helvetica-Bold*1 
[47{/.notdef}rp /slash /.notdef /one /two /three /four /.notdef 
/six 10{/.notdef}rp /A 14{/.notdef}rp /P 3{/.notdef}rp /T 12{/.notdef}rp 
/a 3{/.notdef}rp /e /.notdef /g 5{/.notdef}rp /m 146{/.notdef}rp]
LBAXSV+Helvetica-Bold nf
LBAXSV+Helvetica-Bold*1 [18 0 0 -18 0 0 ]msf
370.14 40.02 mo
(ATmega164P/324P/644P)
[12.9906 10.9925 15.9967 10.0026 10.9925 10.0026 10.0026 10.0026 10.0026 12.0008 4.9986 10.0026 
10.0026 10.0026 12.0007 4.9986 10.0026 10.0026 10.0026 0 ]xsh
0 39.24 mo
365.16 39.24 li
365.16 32.22 li
0 32.22 li
cp
f
0 63 mo
36 63 li
36 18 li
0 18 li
cp
1 gry
f
32.52 747.12 mo
36 747.12 li
36 740.1 li
32.52 740.1 li
cp
0 gry
f
36 747.12 mo
255.48 747.12 li
255.48 740.1 li
36 740.1 li
cp
f
%ADOBeginSubsetFont: ADVAAA+Helvetica-Bold AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LBAXSV+Helvetica-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D00D> |-
/numbersign <1C60D8A8C9B7EF322B4EAC20C0679A92F6AAD0CF50452F4B7A8
C2F5B6CEAD8CCC81EE9E42811C0EB8AC7410D1978E4D4D19F8B77ABF1999D600
CA3FAA512FBBD58F02B46E3765A6D8077F3A215020B13FC3A95AD98B283328FC
B7D65D6DE734F0AACFD392A223B16E759499D33F7B2BD4ED0F77C5D9A0C43> |-
/period <1C60D8A8C9B854D088EA5B7F88398BFE9CE5898B78ABC4C3BA5AE06
1694A9B42623D> |-
/five <1C60D8A8C9B7EF32A450E6CDCB13ACB635CC16ADD7CCAD6BEE541CB5D
1185200EC960A8AB3C993D405195DB79B04F43327837A1B529001C138A764F7A
24304287CE3BEC77DC6D8B12B5A671568AE2F5F84B155A674342640B38C48DD8
E48C0D56BED0611990A342E99DF070CDD3B740424> |-
/B <1C60D8A8C9B6079F1E21021F82EA7F7A31435010A538C84C74ECF8098981
C0B5BF242A1DCA5CE3A2C97884DFC17F62714226B8342BBE43B1C236B848F6DA
D8B1A83CCB9003DDE095565F71FD049FED4F0C3080B8E5C7842037D9D5FCDCE1
CEB524F2D72D976D20D844EF47A59FF26031A1B35E61B7F6B156DFE4EFA66434
D1CB027B2B1EC1B0ECCD5498BFBD8B8FB5C28BBFE92B087EB986C22713E9AD10
23259C9139FD2B0B84CFDF6AFC069A5B8368E961D17C824BB033F4C7E40B0598
13AA674E> |-
/C <1C60D8A8C9B6079FED37BD4297810A8F45ACF55D8D12634D77C5813B2BA5
52EE475FAE4879F3DD2AB20BD9945A4E8BDD86137D53ADEDD687C2FA6D371D3F
79E1AF8B21C167D0A1C13C40E843C9F29F0084A04288AE92384343780B0ACE2E
7B05F0> |-
/D <1C60D8A8C9B6079F1E21021F8DFEBC43D42A708489C7DE9C2A547484CC61
F625BCD0D05D23D83FD37C63566CFD3D632B2C7362B4C8B59094EFB4C9BBBA56
55012F391A5A4A127152E7BA46B3A700> |-
/E <1C60D8A8C9B64EDF8848CCF73D4277D726AD6058F694165E2A2CB1C1EB10
79905F8B7B0B8837025D68732518E0A712113FF7D9EF6C899EC76F60CCBE646A
C6BD5DEB> |-
/F <1C60D8A8C9B7D8BE41A64DA54F1041CAFA8003E90FAAD3AFEFB2B35892D7
DA35D646001C2EC6AAF61323D272A19EDE14BD4750A7EF9E29ADC8A12D> |-
/G <1C60D8A8C9B6FF867A376B705FE74516DAC940956C4E272A7679CD623DC2
3FE8FABD945A843B055DF3DFAE3F5DCF4089771776AFBBBB07265126AF8D3EEE
FE391F689478C6F71240E8B5BE6AC269C5EF9D22208CF9DEFD23555DEAC0A0F0
377B08C14247C658755D191CAC21D0F7D999C76C8189B44D7E8FF0AF89B5BA60
AAFA68A234F25AB5F8A6E693AE39A1E0C34D1CE68815283DAFAD95798EA8B000
374B6EEC5F757958327082E4BBCB8DC8836F6D5710D21D02B4DDF00058723B8D
8126> |-
/H <1C60D8A8C9B6079F3517E07A1F0288A4608B0FA43183D7E68F18811F040B
242CC091E998D56DEFD35230A19B3B4AA8E2E25E5D16AAB6CECF41E8CED7A64D
8333C080E6B110> |-
/I <1C60D8A8C9B854D0A3953AFD56E13A2711DDCC5AD89F7135E194E27E004E
E8C929C12A> |-
/L <1C60D8A8C9B7D8BE6A287B22DA0B19F05B2FBD0CC9EABFA4F6FF71D08C02
F57C33E4CDE5822439A881D2> |-
/M <1C60D8A8C9B6B41CC7E939797865C145E43F931AC19F6BE6ACDDB6D19D73
31986EFAFD75D7A5B653EC4D98CAC1D9AFD60DC2F6E9931AC429FBBFFBFFA286
881E85D8E30A3A7E6E7E02F751FC06A2336E2D4606> |-
/N <1C60D8A8C9B6079F3517E07490032202E3565C1E79DF5E2CEC4A45528FC5
016B29120A3E353AAA58C8CAA884C65BAC48C2BF75C8B630A8C2AE2DF60F19E9
5CA77542> |-
/O <1C60D8A8C9B6FF867A376B705097D3DF2A09DD418C426287289928C624EE
A3A0AA5CD32985B403C4A705D174ACDF14F2551DA95FBC1C89EE4C51CB768A6A
99DDBABA0DAB09FDABEBAD1A9440E373139F78CFB64D66E43E3F4BCCEFFF> |-
/R <1C60D8A8C9B6079F1E488480F8E68E5DD28C4CA6F2FDB05A637E428CDEE4
C22721187778E5F2B25D958D16227514110DCE6B3233C5414B45808A9D8EF6F1
51BE915BBC23B9359B9BB6EC849CBE6D12FD40BC3365C05316335547AD48C457
A49D34DA9AE5416AC2C9569D67C306A93222297043166740A51DD29D1B1114DF
68EBDE0DB312AC26E786906787> |-
/S <1C60D8A8C9B64EDF7BB34086DE0E69D005A26DA4BA735FB798EA75D21BB5
5F6C759A94D7062788EE1818A2CA42627F3ECF77AE8E6E0C7E51D6A454D23A0A
9A7EEB64A70BEE97F45AA8B3E2371AC3DB82FF7E46221DB88F49D982D34C205E
2D12707FFEB990F6572BC32BF83CE5AE033213D02C9D3ABBBF509C642807ACD2
B8C0DCA6FB993EA33F866CDBD15C99D9850FE920C5F6B7C2EE42FD386D3385DA
4F71F4FA7DB0C17082384CFE> |-
/U <1C60D8A8C9B6079FED37B83A011931DC1977ACBC6966068B30CD81707B5A
34BF29FDCFE6B65E47EEB3833460F45B48B8D8A1A7500F8D135FF567512179ED
4B4926218477C5EA2656C91723844B6007> |-
/c <1C60D8A8C9B7EF32A1CB4643D9F758FE77E8D463BA3587C906C92C06DFB4
B5EA9664C3EB7AE74722EC172B56EF65CCA8FFF074C589B30756144CBE6731AA
5E6474FEDDE0262E202640C515DE0444A603F708E3C5E4E728C6CCB962ACA3> |-
/d <1C60D8A8C9B7D8BE9CC6FAB2DB847ABE04CAE7CAF18F66C0BBD51FE97C0A
303DD1757BD410028AB0A6B0D151DE51370F41EC0906FF9823A3B56FC4C5E195
9632791667AD20258ABD3FB2D692031CD3246B770B141196D1A3ED87FE61BBC8
BDE49762DDA99E5D99A7EC80CC7FBA3D3E9DB276FA89E5D888EF39CD6CF2A662
7805B514869C63EC1CDDCAA18718AE178F21AA780004BFE8D9C5F318> |-
/i <1C60D8A8C9B854D0A3953AFCCEC8366C1D9CC8ABF9AEF18FDFFCAC314569
F9907FC5583E9D03A4D019A6CF0F25B41305D6CDC0057657713A374168748F41
BCB7F4> |-
/k <1C60D8A8C9B7EF327C10274AF641B7D9FAD1311D427D569E62770192BFCE
8E44E713A3CDFC9CD55623D68170D37566F7D462DAED9EF152EBEA7B4D8AD73E
7ACD5713661BF766D5> |-
/l <1C60D8A8C9B854D0A3953AFD56E13A3C2277C895ED2230AD4B57AED4E6F2
F61F2CD118> |-
/n <1C60D8A8C9B7D8BE41A64DAAD50EBDD41CADFC55395F79E79D65C1305616
5B4B592635D62DE2A0394E5032302F5CFACECE059BF877A8313C2AACD1E23323
A6DC0569FC07221BACC79EF8100AE4A1FB5DDB16A4DD38E8CC77C17FB1D2CB66
0A3721D14AE87BD921727B4AFA4B53E9E311A5F7> |-
/o <1C60D8A8C9B7D8BE9CC6F749512707A5CB05AB5243B0645F9444C502F419
3FB356ABA45B4FA26E907D725C29EBD51C6E82BD7C0D8F7061BDD006EA19F724
8676AEE29D27B87199433A93CBAD6CD52EE44525E04315718039BB53845EEB> |-
/p <1C60D8A8C9B7D8BE1A134861007F288709A026F4EAD441D0DB9001EABE2D
B92C5255FB184DB483EADFB48D2A88F026A2DD6EDE516F48FD443804CF9B7403
384A077AD30002C76ABA036DBBD46EFDA92B4EE0B7CC2E41CE6F03D681AB67A6
943524EEC72E907786EFDF10215A97E25147712684BE980577BC11BFE0413A23
5E7ADDC08DE261A758229961668104357A71DDB42A5F330CD2DF0F> |-
/r <1C60D8A8C9B7361F55E947F94FA9A74271AD89AF0ACFDBA20EED9EF285A4
8659332E27E557A0A575DD525BBCE890D404508496BF16A92B81F66619D70402
C8D72AF76C7243E9544720CB7C4B40CD5D238237C30B32E563> |-
/s <1C60D8A8C9B7EF32A1C9A55715442669FEA39943230735B36BA1D69124A6
B1AA7B79900DEB09302A96DDB334556A0C50310E49F72ABD34086BE04C9F56C3
A992C64040DA71C798B57BE72592455CA5C09B1689291508F5F788120F16B56A
A673A954D30C862A8D3BDCCAC3E1B28A4D5BBF2647EF1C70B8C4A494C4A0815D
49B6D568AAAE5D2FC4870B0E463670A054A66F5523F4E6C46A91A707298504F2
A7DB1BB4A1307894F83CF1C23A4F4F83AFEB35A393B96E645A64F45A90DAAC3F
2773B226C66AF70EF1130DD00708D0F1863C10C54696AFBC5F1AA9DDDB0FFFFD
051BFA610B7D9BABF9E13927228A1E8EB0F493EFD1F3E1F1CFDE604027DC154B
24C98FDDD15B7B0C37> |-
/t <1C60D8A8C9B81F2C48F08776F2C719518D47AF26D067673C2134BFE8FF0B
E648A55033C05D6EF107FB63837C497CF67E5F2E872B1CB4B010376FE93C318F
F3946E3F8206701C10348C551353812E54> |-
/u <1C60D8A8C9B7D8BE9CC6F74951CF10478FEE82D05CD2F0140C93129E4E44
116C0A59A0D442838CCF37825901D3791684205419771B8111B2E43595C1D708
24A8D86A743C567A4A18B85F8C7448B3433592463B8D0984CEEA979FDC9EE3E8
87> |-
/y <1C60D8A8C9B7EF3227B64BB65630347D8B6F269B778E5768799CAD177A1D
D86278A84113A5016589CCDA6A9A8AD412E70E95AF79D4944E1B465020D3B96E
320C09AE38F2E6BDDBB177084F437920FCE1CE3A4736> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LBAXSV+Helvetica-Bold /Encoding get
dup 32 /space put
dup 35 /numbersign put
dup 46 /period put
dup 53 /five put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 85 /U put
dup 99 /c put
dup 100 /d put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
pop
%ADOEndSubsetFont
/LBAXSV+Helvetica-Bold*1 
[32{/.notdef}rp /space 2{/.notdef}rp /numbersign 10{/.notdef}rp /period /slash /.notdef 
/one /two /three /four /five /six 10{/.notdef}rp /A 
/B /C /D /E /F /G /H /I 
2{/.notdef}rp /L /M /N /O /P /.notdef /R 
/S /T /U 11{/.notdef}rp /a /.notdef /c /d 
/e /.notdef /g /.notdef /i /.notdef /k /l 
/m /n /o /p /.notdef /r /s /t 
/u 3{/.notdef}rp /y 134{/.notdef}rp]
LBAXSV+Helvetica-Bold nf
LBAXSV+Helvetica-Bold*1 [13.98 0 0 -13.98 0 0 ]msf
36 85.3199 mo
(5.Instruction Set Summary)
[7.78546 17.3995 3.89902 8.55426 7.78545 4.66782 5.4509 8.55425 7.78545 4.66782 3.89902 8.55425 
8.55424 3.87106 9.33734 7.78546 4.66782 3.87108 9.33734 8.55426 12.4409 12.4409 7.78546 5.57953 
0 ]xsh
LBAXSV+Helvetica-Bold*1 [7.98 0 0 -7.98 0 0 ]msf
45.06 109.32 mo
(MnemonicsOperandsDescriptionOperationFlags#Clocks)
[6.64728 4.87572 4.43688 7.13977 4.87572 4.9196 2.21844 4.43687 24.9598 6.17972 4.9196 4.44008 
3.10428 4.43687 4.87572 4.91962 85.7403 5.75996 4.43689 4.43687 4.43687 3.10428 2.21844 4.91963 
2.65726 2.21844 4.91962 123.9 6.20844 4.91962 4.43686 3.10428 4.43689 2.65729 2.21844 4.8757 
70.1402 4.85977 2.21844 4.38022 4.8757 27.78 4.43689 5.76154 2.21844 4.91962 4.2597 4.44006 
0 ]xsh
LBAXSV+Helvetica-Bold*1 [6 0 0 -6 0 0 ]msf
41.4 121.5 mo
(ARITHMETIC AND LOGIC INSTRUCTIONS)
[4.3284 4.3284 1.6644 3.66235 4.3284 5.03996 3.96004 3.66235 1.6644 4.3284 1.68001 4.3284 
4.3284 4.3284 1.67999 3.66236 4.6644 4.6644 1.6644 4.32841 1.68 1.62 4.38 3.96004 
3.65997 4.3284 4.37999 4.32838 3.66235 1.6644 4.62 4.38 0 ]xsh
%ADOBeginSubsetFont: BLQAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LBAXSW+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D00D> |-
/quoteright <1C60D8A8C9B88C087D1CE8DD6E336DD32C86BE337D6787AB95F
5A288A68C677A0B1C43CF98D14A21475A0C> |-
/parenleft <1C60D8A8C9B81F2C36CCD20CF8942181AC7F4474F2382F7D30DE
700E9D560AD8BD19EE22EACC9412684566AC63B0B33E5FC85E602E759FFC49BF
47306AE7BD9165A4E1D3> |-
/parenright <1C60D8A8C9B81F2C36CCD20CF894218194033859F410DA60583
B3351294315C6F5C4ACE205E4813D6F508658462783E35F08D53213E9F0ED798
4671681D402251A6FDC72> |-
/plus <1C60D8A8C9B7F374DE58F5ABE0E6A1C8086FFC4A7060090561B9BE7FE
714A2C2FBF06697E6E664F3AD2D192AE97A81E741581A97B9E2E2> |-
/comma <1C60D8A8C9B854D088E8E1B4A929C4983E8B0FE499C85D44EE9545D9
C727E0361A8C250C8B12674AC7> |-
/hyphen <1C60D8A8C9B81F2C3AC7E044D0946E6D2305FBC1A5806554FDBB52A
75CA669> |-
/period <1C60D8A8C9B854D088E8E1B4A929D159FDB35EBB0A92B2CB5440> |-
/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A7
7988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE
33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C3
12D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1
E4FEB02B613916D7> |-
/three <1C60D8A8C9B7EF32A47D2AAF8B27A6BD3F3BCF7FF319E4220BC810B4
CADF2216B3056307D1DA8A73EC78180A0FB2BB871CD9EF56ACC1CD52B6B9416F
F0F6CC105DB9F235573EA49040A80A9111450BB0A3B96123E69E500815CFC7CF
564552067BED0784FB65E0D025591F822D7ED553FA9ACD59EB8A476CA7B6AD8E
268F493C2C91D99FF49648FFC2772170FE015289F1DCCFD377216FF1F5ADD3B4
D09EAA924593AF3FAC43C888F801B765C80AD39E3E3AC8> |-
/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD
48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B261170
2A5DA745406DEB5C33C> |-
/five <1C60D8A8C9B7EF32A470AE090A724FDDF392384CD70DD7F54DF5EDB5B
94F0458AC2358C0871CBF484570776DAA62CEADBBEA6E1E17511B86A0FD4826D
CDEA47E875128F93BF9268E1B1AFC37E94AD9FA810C0CD0434C2996F516FB90C
520A123E1892F92666B> |-
/colon <1C60D8A8C9B854D088E8E1AEAD30C92AB0D98EADF1DE7A77B7CB74CD
7251B14F346AB2E7541FDEE4> |-
/less <1C60D8A8C9B7F374E8C6D7E261BDEBF02E53D7A232627B4C4F688DC8D
832B7AAEE7AED4CC6184781DE89E327E381> |-
/equal <1C60D8A8C9B7F37489A423B7922B77D906A279AB6FAD9AB21E66A20D
4B6DFF96A7A07589D23B89624F9C4EC97F6FAE> |-
/B <1C60D8A8C9B64EDF8861093A50D70CE704C3B99B255E57C25F5628D6A25D
CF329FDC490B240CA8E3263684788E9E559211DF7A652BCEA6E7473D11540293
3A862D3C0BED9681856F5ACE8B339645A6A4CED62CD1A26855F2D51956984EE1
3F47812E810D9E8C98922B6C1937C1681825270D4D77D4BBDEECB712B7702AEE
C61BE96AFEBE20DFCCFCC19F8646EA0A427DFBAA43CEB1ACB616853A6CD4C3E4
CEE20B743FFD4303148B5B4D479ED1038084D37CCEE34880877DCE43721DF888> |-
/C <1C60D8A8C9B6079FED21EC1DA43783C3C67A5FBA5FB885DEE16CDCDCAF1B
7E5C168D0377F501B09EEE06FA7720C35D9E5B5FBCE148C17092F43DAB7E2D94
E9FE9DCFFADEA91F9C52F49E3053420DCED72662293A521E028C39AF83F75FC5
4A> |-
/D <1C60D8A8C9B6079F1E08EB12991814F2BEFDD99E857D46CC83B089892D70
768EDFB737CEBE140DF668BA679C989F178F8C7B580D23B4B614D8D70F34E9A4
87B4AA37370316974673AB> |-
/E <1C60D8A8C9B64EDF885E9C70E86F4D6078E7D1BF0D69911FD55CAA5C46B6
C6C433175B8381217040BB42F142B1A0E1EA4F6BED24146D2DB65AFCA0> |-
/F <1C60D8A8C9B7D8BE41A64DA557BA3801C50A6D0B90DD03689D1958230FDD
078C54AD8D0DA7DD6F0C9EC4C6354485AE4B93FC66781C> |-
/G <1C60D8A8C9B6FF867A1E519166AD852ED2D238FC9FE1FC084F04D9E36004
B397AC0709489868433030C233EA40313B6770F2FBA6AC8B2414BB25BA59D5FD
807989151AA9C629866E3CE226ACBED3C073788232A7114C892B58478EAB25FD
2B5FAFB5A7A36C98166D31139DBFC4CCF79EAA40F2F350B8A457081F9727553F
EA93CA1BFD488C9BDF0A93497544EFC1E92BB497D5AD> |-
/H <1C60D8A8C9B6079F3517E07A2A32EE8D09F795FB6E9F11AE46C75AA31D50
B194B413469264EA3867DFEC1283FAD051B3C6B29B8DCA4E1CF3E914FCD7B445> |-
/I <1C60D8A8C9B854D0A3953AFD56E13A0A68A3547B5275504502229C694F14
98D4> |-
/J <1C60D8A8C9B7A73D365A7906CB17A1CF980A8A86BA58E86DDB37907A2C1F
C33CC7791A34EF51E4037755F037141ECD4AB979BEF37C1BD53571DD37087E42
56F1> |-
/K <1C60D8A8C9B64EDFA3F30AEA5DF4FD401A7F234D8B48713128AD4E4576F5
1EA758FCC04623E76F0392C65BD3153165595668DEA1A39FCBD3CCA6EA172D73
74581D5F> |-
/L <1C60D8A8C9B7EF3257710D8E45FDED8109BBDA794C5EEC6C4DCFCB68A628
CD21FC17F8D9EBEE> |-
/N <1C60D8A8C9B6079F1E210C2F9D6786425CC99EBE4B6CD195D3C159170B14
2780B60B004B88EC635D5140089E50EAFFA241767EA05CB13B768D326E39D0A6
3970CC75B69D7BE71D789A78E82369A15910> |-
/O <1C60D8A8C9B6FF867A21BA19EF0C570BB6C4AEDB905D3E548C322F786DA7
0CDAEFE3DEF4849E1D1588C3A22DCFB11573EC9A318A3B019A45D0FC4FCEE76B
AD39BBA1E526700FB4A11015D71862856C2D89337A110F371091E0B563CCFD9E
35D4> |-
/P <1C60D8A8C9B64EDFA3F30AE4AB14FCCB57D446AF805F45D1BE197D47C6C2
0943FECBF4EB404456C629F1F5342EEA681381C7461EF00E178F4482E2C7F7B3
9C94B8CCFF41619BA5DC67957F7F81> |-
/Q <1C60D8A8C9B6FF867A21BA19EF0C570BB6C4AEDB905D3F2E866CC9FA3DA4
DB89001662F38F30D2728652C8D9051E873F01CEDD591FAA86E8C1453DEE96F5
3B577E5FE82E4040A1EC5612925AD2ED28EE5688259CE391C8DBDFBB13899901
DA44441379ED058835C290B2F76FB9E066CE7DD0195123BF3B64F660719E609E
D50A6A832670AE106AE26BCAB9CA2F09AEAFFCD19F08E6066987FFD9E9B7165D
B32A2631FD5F71F415FAB717C14FD4> |-
/T <1C60D8A8C9B7D8BE41A64DAB684ED090D9F4D4439340AD4301BD70587A67
BA95C799E46FC7C8D88E9FFD990A> |-
/U <1C60D8A8C9B6079FED21EC1DD9E4F86C05723BD153DC25ACCB72ED4F0814
E32635C8A90E12D3CBE19E234F6769255763D8A7BAF6A13DF1E384206C4BD9C4
AAD02D927F96B3EB70> |-
/W <1C60D8A8C9B5D6EF151AEEAE3875D8E2A5C951C25CCAE17076987B69AE17
3FEA1B3C427ACE911C16E8FEA8B284EF3D308129F86EF60E943E71DF041FBC7D
AC2168561652391785B0FFA7DC94A36F5D794FD1C69C6FAE6A3307BC346A> |-
/Z <1C60D8A8C9B7D8BE6A3E2AEEF2640CE8DB5262F2C5EDEFC618050D7ABB3F
3E1430E049671B0B41552431356C5F84A5F24330D364E5> |-
/a <1C60D8A8C9B7EF32A0B922DB529D70E6EA400CC7CAD541AB907F903F935F
123595D5AAC76B7423BF56DAA953AABB30D3C158CBC49165B8067C6456A899E4
3A57DF6E4E8AB8002AB2FFE795F17DA3C0165F34038912EBD94962135F448EB9
A90E2C7E6E7F31818C09B9ED66D47DE4FCBEA13796BDA6590474BAAB3926D1FD
12190612E017AA015628D2E79EA8BD9BA8890ADD2020DB8778488A172689E9B4
E5800C4FC32EAC7FC1BF3EF2690C8233D8F11C29611AE962> |-
/b <1C60D8A8C9B7EF327C10274A017D50D0B79D520E8A6202A86E3798B68C88
3F2A00A228A8D3BD4B72A579020E8C18FEDCA09FC0E3429D99B1C24ADCD0AC4E
EFC3A966737F961C9202D8EDD44B44A693FE51414C15324869700E53C7B38758
7F8318D8232F82D503103EE5B820B0DF0BE22D1B4656A098694F40E8D44D99C4
61B751FBE10F9873814343E4DE07A8CCC094D2DC9819E5D7C44D788CB7F4378E
064E14049D09F8686693B208AE85DDCE327373F5E246A50D857DC427EA> |-
/c <1C60D8A8C9B7A73D329D14FC5ED04B22BEF11360501EE1499496C476E815
0EC3BDD954DBEADE8E9C14890D9CD9DB76F31AE11D3417AD4A86CFF13437B5FD
BD7396F24B7F94C12C61C297C734538546A29AF94483114D66> |-
/d <1C60D8A8C9B7EF32A0BAF021E6128CBCD055133316849E00736C24057076
3FFBEAA146CA9297CF7D3847B7CF1BE84FB2A37E5E555C53A806DE551FF53E55
D61D00981406A03EADD7AE8D33EF7217E17615CDCA7C18A3E3E1E13B179B4308
BD250D1E864A8A86D9BF7E50C7EC9522C99BD55A4F1A52E8A636FC1CA9AC7BFB
9D973089D39AA376C816268115093BC648CEB265DF83> |-
/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C202
1D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495AC
A0439C9D3724916322C63953AF89B727882819DFC99951D61BFC3A47117C933D
D3648A021C5AF4E9570A53> |-
/f <1C60D8A8C9B854D0A3953AFC308C88F2CB7B77611DE17001C91B65CE86C8
891C39A4DBCDDE1373931B89EF13785E617F99570B386BE99D1A576D0D1701D2
F253DF8B3192240780F3E221EB68A6> |-
/g <1C60D8A8C9B7EF3227AC78F20225D02AD1F5838626D1D2CB26D9A686345F
DBA7E6AD7CBBFB0968E5439577010C655F74DB6EC4A53F96DD554986565E4345
C3B0DB42345596269AD0BEDF0DE0FF0CEC2214730A572502B5B1C377714234C3
B835458280E4747C6986CC44F3A27E4CCC92606F912C02778569997A6186F8A1
606F089477CA3B9FEB77CDBA1E20BDD3E0AF3FDCB15E3FF07A1424B7C6719CE0
9398ACEECAAF6B2812773D6272899C> |-
/h <1C60D8A8C9B7EF327C10274A017D50D0B79D52072757441F46A9E3044975
4F52968402CD3736F71D6E09A15E2046342DF42A864D37373E0A213DE941C6F0
11296A017FBEA0AE0137A10664047E> |-
/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D7
2A7354004DF70944005F20755FAB3631> |-
/k <1C60D8A8C9B7A73DEE9439F98A6760116E53D02CD3639A4E206C0D442471
19E04D95FA72AF4CC3263E0911BCDDE695C914CD0C4AFF3DC9857E6995DD10EA
D2EA0AD1> |-
/l <1C60D8A8C9B88C082599D5E898B54D665A852C4BD97DFF418DFF9C25960C
0EAF> |-
/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103B4C2937F43F706F
E45E46BB4B168951587EB26A51BD9E5D6D15548973928DA7BD71E5C6A2EC7542
58679A8719AC099ECB167292DC3AC16D6A6399789AE1244C2D9A7EDD1242D52D
A81BBE025DB4544A719A686DB3A0393D2301EEF964B14766F22C4A5827> |-
/n <1C60D8A8C9B7EF327C10274A017D50E5277BF0D0EBCB370A96BE9DA56325
4EC441C4BC3817B6ABCAA45C3FADDF2A0C1FDBAFB2BC83F47DAFA77A786BA902
BA43197292E50CF57803A333B50FFCC316B4278D48D0702F544078D86E929B14
A38322C9A0C5BF9B9E5C> |-
/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2
CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089
D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-
/p <1C60D8A8C9B7EF322792C3BF0D38904A73F4440F6D92D5F5AE09CC018066
468E681543C8F047ACFD615B747546B5480444F746C2E0CD698A8961C13AF2BF
3940EE05278AAEFC066B11F108A32A247BB7A1777E1A71A35D0F71427779DCE4
A1F61E27FEB716A84B084E0A293D7F37477EB4DB407CE06D6E55EF820764AC64
86> |-
/q <1C60D8A8C9B7EF322792C3BF0D38904A73E52CCAA9981FED095148B9F708
CE581F33191456880D8A90EF89A2F1472B9936B81E3D8BBE656A066490E42FC3
597115A784448BEC12776A286D487219D520FD71B02D7F3A4185562EBE5EB1E3
D95E6D766D1B3D2C5673CF3D68ED7D581AE4EA5F32BEE3D4081FE31D3A1DA8A0
97> |-
/r <1C60D8A8C9B81F2C6DADD03096566F18A44C12756941A411C99A198CC8D4
5A7D128B0AC7E4BF3CECAA38DF996F9A6C482DB9F23D69FD46524CB92965AC6F
9D4D369C7898CDC92C3F38BFBF2273026F7CCF0E2F294158F88D37A82B162157
72> |-
/s <1C60D8A8C9B7A73D329D14FC63C56EEDE3F9A8460FEBA256258B5C852281
3839FED92DE3C47FB08E82DAD239D7D316E4DB98949C40B450B767A1D87B0ABE
0011CCD021B6229F454B1FF5E328C5CF8EC8EFFD81D3D2892F60438084072E44
AFC3709CC245EE12E4AC5F88F724A26A331F44C1FA0DE44324AECA> |-
/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C
0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B583708835
3D9095E679DCF29A> |-
/u <1C60D8A8C9B7EF325758E576B7BAA1EFA82EFF7976BE67CE506354F22E3D
1B078EDAE7715C61BE16B3CD4B647E2C68818E308CF0BE659E73BA193580128E
99771A6AFDBFEB4E9486BE6CBE5D0A068E2F3382B692BCB6E47C62554398C9E5
6946239346863C679F19> |-
/v <1C60D8A8C9B7A73DC53FF2C839B947F31C11DB63CB8CC0B0E0518E01B2A8
090086BA063BC631F5BCB6255A1F02FF856D> |-
/w <1C60D8A8C9B6079F3517E075E924A0EC154FF14393B5B0575475B515F428
794F8D3565E3C687B605880F5C4904C3BD11AE4A60F2EA0654E6A4CE7382D133
3411130E26BAF080637F66342F1D49510FE0B71E35474FA143> |-
/x <1C60D8A8C9B7A73DEE9439F61CF83FD6F0AADDB8373458EFEDE4BF6C4615
5F8370F02E9CE5FFD24DBE7D153354FABD4F844978ABB054761731A2B93E507F
E62552012BB1EB5E1E3EE678332D9E> |-
/y <1C60D8A8C9B7A73DB586573D0157E99900164D3426B7076627BC2EECA012
86D768DC747555489A92E6150F2562090A782510749223A2D01B0EE6374EEA8F
B8F18250484D2C6B565CDCA8D95B100B7B1E0289ED25E0E350438F56B28A332A
DDF034CB8EDC264C3ABAA85278C66F3E4B6419> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LBAXSW+Helvetica /Encoding get
dup 32 /space put
dup 39 /quoteright put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 53 /five put
dup 58 /colon put
dup 60 /less put
dup 61 /equal put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 74 /J put
dup 75 /K put
dup 76 /L put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 81 /Q put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 90 /Z put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
pop
%ADOEndSubsetFont
/LBAXSW+Helvetica*1 
[32{/.notdef}rp /space 6{/.notdef}rp /quoteright /parenleft /parenright /.notdef /plus 
/comma /hyphen /period /slash /zero /one /two /three 
/four /five 2{/.notdef}rp /eight /nine /colon /.notdef /less 
/equal 3{/.notdef}rp /A /B /C /D /E /F 
/G /H /I /J /K /L /M /N 
/O /P /Q /R /S /T /U /V 
/W 2{/.notdef}rp /Z 6{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /.notdef /k /l 
/m /n /o /p /q /r /s /t 
/u /v /w /x /y 55{/.notdef}rp /endash 78{/.notdef}rp]
LBAXSW+Helvetica nf
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
41.4 130.98 mo
(ADDRd, RrAdd two RegistersRd )
[4.02184 4.32 53.76 4.32 3.3558 1.62 1.67999 4.32001 44.9399 3.96004 3.3558 3.3558 
1.62 1.68781 4.31998 3.3558 1.67999 4.32001 3.29999 3.3558 1.32001 3.01978 1.68781 3.3558 
1.97995 138 4.32001 3.35577 0 ]xsh
%ADOBeginSubsetFont: ZJXAAA+SymbolMT Initial
ct_T42Dict begin
0 -0.219 1.109 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /ZJXAAA+SymbolMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3284f3e872000000cc000000566376
74202ac4fb8500000124000005046670676df530c471000006280000050f
676c7966b06f9754000016580000038868656164c5ad5c6500000b380000
0036686865610f2d038100000b7000000024686d74787750493e00000b94
000002fc6c6f63614fe24f2b00000e90000001826d617870020305a70000
1014000000206e616d65ff9a511500001034000002ae707265707e0fc165
000012e40000037167646972000000000000000000000000000104cd0190
00050000059a053300000125059a0533000003a0006602120c0305050102
010706020507000000000000000000000000000000004d6f6e6f0040f020
f0ff058cfe460133080b01c280000000000000000000055d0031054c001f
054c001c0394001b0000ffe10000ffe10000ffe4fe59ffed056b0023fe6a
ffdc270f000000b4000000b4000000000000000000610025005e0029004a
00c200f000be012a005000c0ffd0006300580277002d004a008f00b700c0
00de004400640002001a017c0020ff9c008c0026008300a00039041affb5
004c00e8080f00160024003a016f000600150067009e01dc0049004b002d
003b00470089007200470051006700f7013801dc0001000a005d00610094
009b00be00ce00df00190026002e00d6010701f7ffbb004300530063007b
00b900de0542058b0013009100a700a900c100e5012e01a401ea03eeffb5
ffccffeb0026002900310036005b00620062009200a100a700a700cb0223
03a3ff1aff7bffa8ffc8001c004400ab00b400c100c500ce00f601200156
016302a60379fefaff6effab0000000c00150024003a003a0041004c004e
007400a500ce00d600fb0109010901820220023f0263fe11ff170007001f
0020002b00530055006d007e0088008d0094009a009f00af00e8013f0168
01cd01ee020d028002bf0550074e074e09bffdd5ff47fff6000c000c0021
00290057006b0078007e009200930096009a00a100a500c400c400f000fd
0136013b013e01490152018f018601a501f8022b02db02fb030e030f032c
03590360037c03e203f90805fd4ffe97fed0ff50ff78000100010006000a
0025004300440054005c007000730077007c00800088008e008e00900091
00ab00ab00b000b900bf00bf00c300dd00e300e300e600e800ec01020105
0109010a012a012a01300130013b0140014a0155015f01670173019701b6
01b801be01c501ea01f4023402360239024f0252026702700274029002b0
02b102bf02e402f302fb033a03450373037f03ab03c203c803d203da0400
044a046104690475049404b004d504f004f404fe050005230523052e0561
05a0fda2fe4bfe5bff26ff3bff62ff8dff90ff90ffe80007001e00250026
002700440050006200630066006700700070007100710079007e00850091
0096009e00a100a100a500b600b800bc00c000c200c500c600d000da00dd
00dd00e200f700f901000102010501150121012d01310136013d01470147
015a01680176017c0180018e019a01a501b101b501b501c001dc01ea01fe
023902560259025e0276027c028d0297029b02b902c002d602db02ff0306
030f03180347034b0357035b035e0374039603980399039e039f03b803c0
03c60402043a045004720483049004a204af04c704d304dc0530053b058a
058a05b005b505bd05e60612061b0634065306b80706087908e708fe00b3
00c700b100b5000000000000000000000000000000000188011001b100ad
01e70304038002cc0258020b02d6018204cf01270274023c0100058e006e
00f202c0021d01d2023701570363015a002500820166015b009d031c03a2
034a00cc056e0153035001640053049700fc05c30061058a02b20302058a
03fd01f902ab0068008e026bfda9ff59010e005301a402a600ab007d003c
0029041a00d6023904b90125022902bf07ae01b8003e07060339033a080f
07ae01a403e300000053080f01ea006103e2004c00e102a6035202a6080f
00e601dc074f006e00fd03af0000007d003e01a4fe1100a905590260011c
02a4014cfd83fdd8039bff9f011902e20000fd11fd41024301b60155ffaa
02be00ef0097fef904e000be02db005501dc0063006b007800f200530077
003a015600fc020d0029005300610070403f3f3e3d3c3b3a393837353433
3231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615
14131211100f0e0d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b0042651582320b00d44235921212d2c20204518684420b001602045b0
4676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c
00b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a23
4445b01923442d2c2045b00325456164b050515845441b2121592d2cb001
43632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b0074365
0a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58
b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d
2cb01243588745b0112bb0172344b0177ae41b038a45186920b01723448a
8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d
2cb0022546608a46b040618c482d2c4b53205c58b002855958b00185592d
2c20b0032545b019234445b01a23444565234520b00325606a20b0092342
23688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a545823
21b03f1b235961441cb114008a5279b31940201945208a54582321b03f1b
235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d432343
0b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143234365
0b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b000
525823b002253823b002256538008a63381b212121212159012d2c4bb064
51584569b00943608a103a1b212121592d2c01b005251023208af500b001
6023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f5
00edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb0
2b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b80241
23701020b802414520b0005058b00161593a2f182d2c21210c6423648bb8
4000622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d
2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423
648bb84000626023212d2cb4000100000015b00826b00826b00826b00826
0f10161345683ab001162d2cb4000100000015b00826b00826b00826b008
260f1016134568653ab001162d2c4b53234b515a5820458a60441b212159
2d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c
4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c
4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c64
23646164b807085158b00425b00425012046b01060482046b0106048590a
21211b2121592d2cb012435c580cb00425b00425060c6423646164b80708
5158b00425b00425012046b8fff060482046b8fff06048590a21211b2121
592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b
2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b0
0426024b545a8a8a0ab012435c5a58381b2121592d000001000000028000
65f2eb1d5f0f3cf5081d080000000000a348bc3b00000000b24cd4e1ffff
fe3e08e7080b0000000b000100000000000000010000080bfe3e00000856
feabfc2e08740001000000000000000000000000000000be04cd00670000
000000fa00000200000002aa00e405b40061040000250464005106aa0047
063900480383003a02aa005402aa002d04000091046400250200006e0464
0025020000910239ffff0400004a040000f00400002c0400005304000020
04000062040000590400004c0400007c04000051023900ac0239008b0464
003c046400250464003c038d00580464002505c700140556002205c70012
04e5001a04e30027061b004804d3002305c7002602aa0033050c004e05c7
0025057d0014071d002505c7ffe805c7004c0625002305ee004a04730026
04bc003804e3003b05850016038300470625003805290042065c002504e3
001602aa00a706e7016a02aa004a054400250400ffef040003da050c0054
046400790464004603f4004503830049042b0047034affff04d3002d02a2
004304d300450464001504640031049c007c042b00280464005804640037
042b00590464006904d3004e0383002b049c004705b40041057d005003f2
005b057d002f03f4005b03d700d3019a00a403d700d60464003404f60013
01fa00790464003c0156feab05b4003604000000060600b9060601300606
00f7060600f60856002907e5004b04d3005d07e5004b04d3005d03330066
04640025034a00690464003c0464007905b4006603f4004103ae006a0464
0025046400250464002404640034080000e604d302390800ff8d05440020
069600e4057d002d065c005e07e501820625004e0625004e069600610625
004d0625004d05b4003805b4003705b4003b05b4003b05b4003a05b4010a
05b4010b0625005305b4004a0652006306520063071f00320696002e0464
00540200009105b4003004d3003004d300300856002907e5004c04d3005d
07e5004c04d3005d03f4002f02a200410652006306520063064a002a05b4
002b03120053031200530312005303120000031200000312000003f401a4
03f4001c03f401a403f401a40652007502a2003e02310000057d02a6057d
02a6057d00430312ff930312025d0312ff93031200230312028103120023
03f4001c01a4001c00000032003200320032003200320032003200320032
003200320032003200320032004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c00a200a200a200a201030103
01030103010301030103012a012a012a012a012a012a012a012a012a012a
012a012a012a012a01c401c401c401c401c401c401c401c401c401c401c4
01c401c401c401c401c401c401c401c401c401c401c401c401c401c401c4
01c401c401c401c401c401c401c401c401c401c401c401c401c401c401c4
01c401c401c401c401c401c401c401c401c401c401c401c401c401c401c4
01c401c400000001000000c0006700050000000000020010002f00400000
00ed050f000000000000000a007e0001000000000000007f000000010000
00000003000f007f0001000000000004000f008e0001000000000006000f
009d000300000409000000fe00ac0003000004090001001e01aa00030000
04090002000e01c80003000004090003001e01d60003000004090004001e
01f40003000004090006001e0212547970656661636520a920546865204d
6f6e6f7479706520436f72706f726174696f6e20706c632e204461746120
a920546865204d6f6e6f7479706520436f72706f726174696f6e20706c63
2f5479706520536f6c7574696f6e7320496e632e20313939302d31393932
2e20416c6c2052696768747320526573657276656450454c444b412b5379
6d626f6c4d5450454c444b412b53796d626f6c4d5450454c444b412b5379
6d626f6c4d5400540079007000650066006100630065002000a900200054
006800650020004d006f006e006f007400790070006500200043006f0072
0070006f0072006100740069006f006e00200070006c0063002e00200044
006100740061002000a900200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
00200070006c0063002f005400790070006500200053006f006c00750074
0069006f006e007300200049006e0063002e00200031003900390030002d
0031003900390032002e00200041006c006c002000520069006700680074
007300200052006500730065007200760065006400500045004c0044004b
0041002b00530079006d0062006f006c004d00540052006500670075006c
0061007200500045004c0044004b0041002b00530079006d0062006f006c
004d005400500045004c0044004b0041002b00530079006d0062006f006c
004d005400500045004c0044004b0041002b00530079006d0062006f006c
004d00540000411500120227022702260226006f01160001005f01160001
004f01160001003f01160001002f01160001022fb22f1f1fb8022eb2a01f
1fb8022cb21d291fb80224400be11a1f3127121f3c27291fb80217403b6c
291fe0aa191fe1aa191fab27321f883c321f833c321f2f3c321f7627321f
3c27291f27aa291f6f276f6d6f866f87043700161600000012110840b801
e3b655140914093790b801bf40390790bd0790b307906707906407905707
904607903607902e07902b079025079024071408120810080e080c080a08
0808060804080208000814b8ffe0402b0000010014061000000100060400
0001000410000001001002000001000200000001000002010802004a00b0
13034b024b5342b0382b4bb807ff52b0372b4bb007505b58b101018e59b0
382bb00288b801005458b801ffb101018e851bb0124358b9000101ff858d
1bb9000101ff858d5959014bb0c063004b6220b0f65323b8010a515ab005
234201b0124b004b5442180016763f183f123e113946443e113946443e11
3946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b
2b182b2b2b2b2b2b2b2b2b2b2b2b2b4b5079bc001f01750007001f0174b3
071f93072b2b2b4b5379bc00900175000700900174b3079093072b2b2b18
1db0964b5358b0aa1d59b0324b5358b0ff1d5901b341b5407b4565234560
23456560234560b08b766818b080622020b140b54565234520b003266062
636820b003266165b0b5236544b040234420b1417b4565234520b0032660
62636820b003266165b07b236544b0412344b1007b455458b17b406544b2
4140414523614459b9004e0162b12a8e456523456023456560234560b089
766818b080622020b9002a01624565234520b003266062636820b0032661
65b80162236544b02a234420b14e8e4565234520b003266062636820b003
266165b08e236544b04e2344b1008e455458b18e406544b24e404e452361
445945695342014b5058b108004259435c58b108004259b3020b0a124358
601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59b00c
2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b0
0f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342
002b752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7373737373001845694418
456944435c58b9ffc00280b2121f322b5900000000>
[905 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 152 109 <00010000ffe4074f03fd00110066401f65006503770387039703a7030606
070f0e0a0b030f4b01001d02074b030003b80231b607011a1307a606b801
aeb30a0ea60fb801aeb70b0b0a1912213f182b4e10f43c4d10fded10fded
4e10e64d10f63c002fed3cfd3ced1239390110c910c93130015d01211521
1616172326002735360037330606015005fffa018f72365075fea4668401
3c77503978022161a4b3859001283a384b01139187bc>ZJXAAA+SymbolMT AddT42Char 

1 0 3 <> ZJXAAA+SymbolMT AddT42Char 
1 518 120 <0001000000d302db03ae000b0021b9000301b4400e0907001a0d06190c0d
ef212938182b2b4ee410e6003f4ded313001140623222635343633321602
dbd69798d6d69897d6024198d6d69897d6d6>ZJXAAA+SymbolMT AddT42Char 
1 596 134 <00030000ffe1058a056b000b0017002300abb337081b1abc027f000f021b
0009021c4010031d181d1e2f237f2302402370230223b80273b2202021ba
027f0015021bb2030b00b8021b400e0cba1d58201b211b1d1a5818ba12b8
021bb5061924213f182b4e10f44dfdf6f4ed3c103cf4f6ed003ffdf63c10
f45d713cfd3c10fdfdf63c31304379402a01171008122b000e0a0c2b0114
04122b0016020c2b0111070f2b010d0b0f2b011305152b001701152b002b
2b2b2b012b2b2b2b81011000212000111000212000033400232200151400
333200012111331121152111231121058afe60fedbfedafe61019f012601
2501a062fe9afefdfe9a0166fdfe0166fb8f01dc6201dffe2162fe2402a6
fedbfe6001a001250126019ffe61fed8fd0166fe9afdfefe9a0166012d01
e1fe1f61fe2201de>ZJXAAA+SymbolMT AddT42Char 
1 100 16 <0001000001dd041a02400003001a400c001d03011a050019042028182b4e
10e410e6002f4dfd313011211521041afbe602406300>ZJXAAA+SymbolMT AddT42Char 
1 0 0 <0002010000000500050000030007003b401e06076302010005046303000a
0605630303021a09070463010019082938182b4e10f43c4dfd3c4e10f63c
4d10fd3c003f3cfd3c3f3cfd3c3130211121112521112101000400fc2003
c0fc400500fb002004c0>ZJXAAA+SymbolMT AddT42Char 
ZJXAAA+SymbolMT /CharStrings get begin
/g109 109 def
/g3 3 def
/g120 120 def
/g134 134 def
/g16 16 def
end
ZJXAAA+SymbolMT /Encoding get
dup 32 /g109 put
dup 33 /g3 put
dup 34 /g120 put
dup 35 /g134 put
dup 36 /g16 put
pop
end
%ADOEndSubsetFont
/LBAXSX+SymbolMT /ZJXAAA+SymbolMT findfont ct_VMDictPut
/LBAXSX+SymbolMT*1 
[32{/.notdef}rp /g109 /g3 /g120 /g134 /g16 219{/.notdef}rp]
LBAXSX+SymbolMT nf
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 130.98 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 130.98 mo
( Rd + RrZ,C,N,V,H1)
[1.67999 4.332 3.36002 1.62 3.53998 1.68002 4.332 100.32 3.66595 1.668 4.332 1.668 
4.332 1.668 4.00204 1.668 45.36 0 ]xsh
41.4 140.46 mo
(ADCRd, RrAdd with Carry two RegistersRd )
[4.02245 4.32 53.76 4.32 3.3564 1.62 1.68 4.32 44.9399 3.96005 3.3564 3.3564 
1.62001 4.3524 1.31999 1.68842 3.29999 1.68001 4.31999 3.36 1.97995 1.97995 3 1.68001 
1.6884 4.31999 3.3 1.68001 4.31999 3.3564 3.35641 1.31999 3.0204 1.6884 3.3 1.97998 
109.38 4.32001 3.35638 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 140.46 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 140.46 mo
( Rd + Rr + CZ,C,N,V,H1)
[1.67999 4.34039 3.34442 1.62 3.51239 1.67999 4.34042 2.00635 1.67999 3.48001 1.67999 91.5 
3.65997 1.67639 4.34039 1.67639 4.34039 1.67639 4.01047 1.67639 45.36 0 ]xsh
41.4 150 mo
(ADIWRdl,KAdd Immediate to WordRdh:Rdl )
[3.99424 4.3242 1.6602 52.08 4.3242 3.35999 1.3242 1.6602 49.56 3.96005 3.36 3.35999 
1.62001 1.6602 4.99014 5.03995 3.3 3.36 1.31999 3.36 1.62 3.36 1.68001 1.66019 
3.3282 1.68001 5.65619 3.36 1.99014 124.02 4.32416 3.36005 3.32819 1.66022 4.32416 3.36005 
1.32416 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
370.74 150 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
376.62 150 mo
( Rdh:Rdl + KZ,C,N,V,S2)
[1.67999 4.33862 3.34259 3.34259 1.62 4.33862 3.34259 1.33859 1.67999 3.48001 1.67999 76.6801 
3.65994 1.67459 4.33862 1.67459 4.33859 1.67462 4.00867 1.67459 45.36 0 ]xsh
41.4 159.48 mo
(SUBRd, RrSubtract two RegistersRd )
[4.02065 4.32 53.76 4.32001 3.3546 1.62 1.68 4.32 44.94 3.96002 3.35461 3.35458 
1.62 2.01657 3.29999 3.01859 1.68661 1.67999 1.68658 4.32001 3.29999 1.68002 4.31998 3.36002 
3.29999 1.38 3.01859 1.62 3.35461 1.97995 126.36 4.32001 3.35461 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 159.48 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 159.48 mo
( Rd - RrZ,C,N,V,H1)
[1.67999 4.332 3.36002 1.62 2.03995 1.67999 4.332 101.82 3.66595 1.66803 4.33197 1.66803 
4.33197 1.66803 4.00201 1.66803 45.36 0 ]xsh
41.4 168.96 mo
(SUBIRd, KSubtract Constant from Register Rd )
[4.02005 4.32 3.96004 49.8 4.32 3.35999 1.62 1.68 49.26 3.96005 3.35399 3.354 
1.62 2.01596 3.3 3.01799 1.686 1.68001 4.31999 3.36 3.3 3 1.68599 3.3 
3.354 1.68599 1.68001 1.62 2.03996 3.3 4.97995 1.67999 4.32001 3.354 3.35397 1.32001 
3.01801 1.68597 3.3 1.97997 98.04 4.32001 3.35999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 168.96 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 168.96 mo
( Rd - KZ,C,N,V,H1)
[1.67999 4.3446 3.3486 1.62 2.01056 1.67999 106.14 3.65997 1.6806 4.3446 1.6806 4.3446 
1.68057 4.01465 1.6806 45.36 0 ]xsh
41.4 178.5 mo
(SBCRd, RrSubtract with Carry two RegistersRd )
[4.02065 3.96004 54.12 4.32 3.3546 1.62 1.68 4.32 44.9399 3.96004 3.3546 3.3546 
1.62001 2.01654 3.3 3.0186 1.68658 1.68001 4.31999 1.32001 1.67999 3.3546 1.62001 4.31999 
3.36 1.97995 2.03995 3.0186 1.62001 1.68658 4.32001 3.35458 1.68001 4.31999 3.30002 3.3546 
1.32001 3.0186 1.68661 3.29999 2.03996 97.68 4.32001 3.35461 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 178.5 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 178.5 mo
( Rd - Rr - CZ,C,N,V,H1)
[1.67999 4.33801 3.34198 1.62003 2.00394 1.67999 4.33801 2.00397 1.67999 2.00394 1.68002 94.5 
3.65994 1.67401 4.33798 1.67401 4.33798 1.67401 4.00803 1.67401 45.36 0 ]xsh
41.4 187.98 mo
(SBCIRd, KSubtract with Carry Constant from Reg.Rd )
[3.99424 3.99425 4.3242 49.8 4.3242 3.35999 1.62 1.68 49.26 3.96004 3.36 3.36 
1.62001 2.03995 3.29999 2.9922 1.6602 1.67999 4.3242 1.32419 1.6602 3.35999 1.62001 4.3242 
3.35999 1.99016 2.03995 2.9922 1.62 4.38 3.29999 3.36 3 1.62001 3.36 3.36 
1.62001 1.67999 1.6602 1.99014 3.36002 4.97995 1.67999 4.3242 3.35999 3.32822 80.7 4.32422 
3.35999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 187.98 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 187.98 mo
( Rd - K - CZ,C,N,V,H1)
[1.67999 4.34039 3.34442 1.62 2.00635 1.67999 3.96005 1.67999 2.00638 1.67999 96.84 3.65994 
1.67639 4.34042 1.67639 4.34039 1.67642 4.01044 1.67639 45.36 0 ]xsh
41.4 197.46 mo
(SBIWRdl,KSubtract Immediate from WordRdh:Rdl )
[3.99244 3.99245 1.6584 52.44 4.3224 3.35999 1.3224 1.6584 49.56 3.96005 3.35999 3.36 
1.62 2.03996 3.3 2.99039 1.6584 1.68001 1.65839 4.98836 4.98836 3.36 3.3264 1.32239 
3.36 1.68001 3.32639 1.68001 1.6584 1.98836 3.36 4.97995 1.67999 5.65442 3.36002 1.98836 
105.36 4.32239 3.35999 3.32642 1.65845 4.32239 3.35999 1.32245 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
370.74 197.46 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
376.62 197.46 mo
( Rdh:Rdl - KZ,C,N,V,S2)
[1.67999 4.33621 3.34018 3.34021 1.62 4.33621 3.34018 1.33621 1.67999 2.00217 1.67999 78.1801 
3.65997 1.67218 4.33618 1.67221 4.33621 1.67218 4.00626 1.67221 45.36 0 ]xsh
41.4 207 mo
(ANDRd, RrLogical AND RegistersRd )
[3.99004 4.32 53.76 4.32 3.36 1.62 1.68 4.32 44.9399 3.32401 3.35999 3.36002 
1.31998 2.98801 3.32401 1.31998 1.68002 3.99002 4.32001 4.31998 1.68002 4.31998 3.36002 3.32397 
1.38 2.94 1.67999 3.36002 1.97995 126.36 4.32001 3.36002 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 207 mo
( !)
[5.88116 0 ]xsh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
364.14 207 mo
(Rd )
[4.32001 3.35999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
373.5 207 mo
(")sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
376.26 207 mo
( RrZ,N,V1)
[1.62 4.38 101.22 3.65997 1.67999 4.32001 1.67999 57.0601 0 ]xsh
41.4 216.48 mo
(ANDIRd, KLogical AND Register and ConstantRd )
[3.99004 4.32 4.32 49.44 4.32 3.35999 1.62 1.67999 49.26 3.29999 3.36002 3.35999 
1.32001 2.98798 3.32401 1.31998 1.68002 3.99002 4.32001 4.32001 1.67999 4.32001 3.35999 3.32401 
1.37997 2.94 1.68002 3.35999 1.97995 1.68002 3.32397 3.36002 3.35999 1.62 4.38 3.29999 
3.36002 3 1.62 3.36002 3.36002 90.66 4.32001 3.35999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 216.48 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 216.48 mo
( Rd )
[1.67999 4.32782 3.35999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
373.68 216.48 mo
("!)
[2.76004 0 ]xsh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
377.88 216.48 mo
(KZ,N,V1)
[105.6 3.65994 1.67401 4.33801 1.67398 57.06 0 ]xsh
41.4 225.96 mo
(ORRd, RrLogical OR RegistersRd )
[4.6596 57.42 4.3236 3.35999 1.62 1.68 4.3236 44.94 3.32761 3.35999 3.36 1.31999 
2.99161 3.32761 1.32359 1.68001 4.65959 4.32361 1.68001 4.32359 3.36 3.32759 1.32361 2.99159 
1.65961 3.35999 1.97997 130.02 4.32001 3.35999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 225.96 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 225.96 mo
( Rd v RrZ,N,V1)
[1.67999 4.32901 3.35999 1.62 2.99701 1.67999 4.32901 100.86 3.66296 1.66501 4.32901 1.66498 
57.0601 0 ]xsh
41.4 235.5 mo
(ORIRd, KLogical OR Register and ConstantRd )
[4.6848 4.32 53.1 4.32 3.3528 1.62 1.68 49.26 3.3 3.3528 3.3528 1.31999 
3.0168 3.3 1.31999 1.68001 4.6848 4.31999 1.68001 4.31999 3.36 3.29999 1.32001 3.01678 
1.68481 3.35278 1.97997 1.68001 3.29999 3.3528 3.3528 1.62 4.32001 3.35281 3.35278 3.01682 
1.62 3.3528 3.3528 94.32 4.32001 3.35999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 235.5 mo
( !)
[5.88116 0 ]xsh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
364.14 235.5 mo
(Rd v KZ,N,V1)
[4.3374 3.3414 1.67999 3.0054 1.62 105.36 3.65994 1.6734 4.3374 1.6734 57.0601 0 
]xsh
41.4 244.98 mo
(EORRd, RrExclusive OR RegistersRd )
[4.02425 4.62 53.46 4.32 3.3582 1.62 1.68 4.32 44.9399 3.96005 3.0222 3.0222 
1.3542 3.29999 3 1.32001 3 3.3582 1.68001 4.62 4.38 1.62 4.3542 3.3 
3.35818 1.32001 3.0222 1.6902 3.29999 1.97995 123.72 4.32001 3.35822 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 244.98 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 244.98 mo
( Rd )
[1.67999 4.32782 3.35999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
373.68 244.98 mo
(#)sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
378.24 244.98 mo
( RrZ,N,V1)
[1.67999 4.33142 99.2399 3.66537 1.66739 4.33142 1.66742 57.0601 0 ]xsh
41.4001 254.46 mo
(COMRdOne's ComplementRd )
[4.3158 4.6518 53.1 4.32 55.92 4.68001 3.31979 3.36 1.3158 2.9838 1.68001 4.3158 
3.31979 5.03995 3.3 1.3158 3.35999 4.98175 3.36 3.31979 134.04 4.3158 3.36002 0 
]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 254.46 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 254.46 mo
( 0xFF )
[1.67999 3.3576 2.94 3.68756 3.68756 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
379.62 254.46 mo
($)sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
382.92 254.46 mo
( RdZ,C,N,V1)
[1.67999 4.33142 94.56 3.66537 1.66739 4.33142 1.66742 4.33139 1.66739 51.0601 0 ]xsh
41.4001 264 mo
(NEGRdTwo's ComplementRd )
[4.3188 3.98885 53.76 4.32001 55.92 3.65996 4.3188 3.36 1.3188 2.9868 1.68001 4.3188 
3.3228 5.03996 3.3 1.3188 3.36 4.98476 3.36 3.3228 134.04 4.31882 3.36002 0 
]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 264 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 264 mo
( 0x00 )
[1.67999 3.35822 2.94 3.35818 3.35818 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
378.96 264 mo
($)sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
382.26 264 mo
( RdZ,C,N,V,H1)
[1.67999 4.33441 95.22 3.66833 1.67041 4.33441 1.67041 4.33438 1.67041 4.00446 1.67038 45.36 
0 ]xsh
41.4001 273.48 mo
(SBRRd,KSet Bit\(s\) in RegisterRd )
[4.01704 3.96004 54.12 4.32 3.351 1.62 50.94 3.96005 3.35098 1.68301 1.67999 3.96005 
1.32001 1.68298 2.01297 3.01501 1.97995 1.67999 1.32001 3.29999 1.67999 4.32001 3.35999 3.30002 
1.37997 3.01501 1.62 3.35101 130.68 4.32001 3.36002 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 273.48 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 273.48 mo
( Rd v KZ,N,V1)
[1.67999 4.3374 3.3414 1.62 3.0054 1.67999 105.18 3.65994 1.6734 4.3374 1.6734 57.0601 
0 ]xsh
41.4001 282.96 mo
(CBRRd,KClear Bit\(s\) in RegisterRd )
[4.3242 3.99424 53.76 4.32001 3.35999 1.62 50.94 4.3242 1.32419 3.36 3.32819 2.03996 
1.62 3.99425 1.32419 1.6602 1.99014 2.9922 2.03995 1.62001 1.37999 3.3 1.68001 4.32419 
3.36 3.32819 1.3242 2.99219 1.6602 3.36 125.34 4.32422 3.35999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 282.96 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 282.96 mo
( Rd )
[1.67999 4.32782 3.35999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
373.68 282.96 mo
(")sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
376.38 282.96 mo
( \(0xFF - K\)Z,N,V1)
[1.67999 2.03995 3.30002 3 3.66595 3.66595 1.67999 1.99796 1.67999 4.00204 80.4 3.66595 
1.668 4.332 1.668 57.0601 0 ]xsh
41.4001 292.5 mo
(INCRdIncrementRd )
[1.6512 4.3152 56.1 4.32 55.92 1.68001 3.3192 2.9832 1.98116 3.35999 4.98117 3.35999 
3.3192 158.7 4.31519 3.36002 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 292.5 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 292.5 mo
( Rd + 1Z,N,V1)
[1.67999 4.34521 3.34918 1.62 3.51721 1.67999 104.64 3.65994 1.68118 4.34521 1.68121 57.06 
0 ]xsh
41.4001 301.98 mo
(DECRdDecrementRd )
[4.32 4.02005 53.76 4.32 55.92 4.31999 3.3618 3.02579 1.97997 3.29999 5.02374 3.3 
3.3618 156 4.32001 3.36005 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 301.98 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 301.98 mo
( Rd )
[1.67999 4.32782 3.35999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
373.68 301.98 mo
($)sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
376.92 301.98 mo
( 1 Z,N,V1)
[1.67999 3.34921 101.52 3.67917 1.68118 4.31998 1.68002 57.06 0 ]xsh
41.4001 311.46 mo
(TSTRdTest for Zero or MinusRd )
[3.64075 4.02005 54.42 4.32 55.92 3.65996 3.31081 3 1.68001 1.67999 1.68001 3.3 
2.03995 1.62 3.64076 3.36 1.97275 3.36 1.68001 3.31079 2.03996 1.62 5.03996 1.31999 
3.31081 3.35999 127.68 4.32001 3.35999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 311.46 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 311.46 mo
( Rd )
[1.67999 4.32782 3.35999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
373.68 311.46 mo
(")sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
376.38 311.46 mo
( Rd Z,N,V1)
[1.67999 4.33142 3.35999 97.74 3.66537 1.66739 4.33142 1.66742 57.06 0 ]xsh
41.4002 321 mo
(CLRRdClear RegisterRd  )
[4.3176 3.36 54.42 4.32001 55.92 4.31761 1.31761 3.35999 3.32161 2.03995 1.62001 4.37999 
3.3 3.35999 1.32001 2.9856 1.65361 3.32159 147.36 4.3176 3.36002 1.67999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
358.38 321 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
364.32 321 mo
( Rd )
[1.67999 4.32001 3.32401 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
375.3 321 mo
(#)sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
379.92 321 mo
( RdZ,N,V1)
[1.67999 4.33142 97.56 3.66537 1.66739 4.33142 1.66742 57.06 0 ]xsh
41.4002 330.48 mo
(SERRdSet RegisterRd )
[4.01825 3.96004 54.12 4.32001 55.92 3.96004 3.3522 1.6842 1.68001 4.31999 3.3 3.3522 
1.31999 3.0162 1.6842 3.29999 152.7 4.32001 3.36002 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 330.48 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 330.48 mo
( 0xFFNone1)
[1.67999 3.37082 2.93997 3.70078 109.14 4.36679 3.29999 3.37082 57.36 0 ]xsh
41.4002 339.96 mo
(MULRd, RrMultiply UnsignedR1:R0 )
[4.98595 4.32 52.8 4.32001 3.35999 1.62 1.68 4.32 44.94 4.98595 3.36 1.31999 
1.65599 1.32001 3.32399 1.37999 3 1.62001 4.31999 3.36 2.98799 1.31999 3.36 3.29999 
3.36 139.68 4.32001 3.36005 1.65601 4.32001 3.32397 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
366.06 339.96 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
372 339.96 mo
( Rd x RrZ,C2)
[1.62 4.38 3.29999 1.68002 3 1.67999 4.31998 91.5 3.65994 1.68002 63.06 0 
]xsh
41.4003 349.5 mo
(MULSRd, RrMultiply SignedR1:R0 )
[4.98536 4.3194 3.36 49.44 4.3194 3.36 1.62 1.68 4.3194 44.94 4.98535 3.36 
1.3194 1.6554 1.3194 3.32339 1.38 3 1.62 3.98946 1.3194 3.36 3.29999 3.36 
146.34 4.3194 3.35999 1.6554 4.3194 3.32343 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
366.06 349.5 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
372 349.5 mo
( Rd x RrZ,C2)
[1.62 4.38 3.29999 1.68002 3 1.67999 4.31998 91.5 3.65994 1.68002 63.06 0 
]xsh
41.4003 358.98 mo
(MULSURd, RrMultiply Signed with UnsignedR1:R0 )
[4.98476 4.3188 3.36 4.02005 45.42 4.32 3.36 1.62 1.68 4.3188 44.94 4.98476 
3.35999 1.31882 1.6548 1.3188 3.32281 1.37999 3 1.62001 3.98885 1.3188 3.36 3.29999 
3.36 3.29999 1.68001 4.3188 1.38 1.62 3.36 1.68001 4.3188 3.3228 2.98682 1.37999 
3.3228 3.36002 3.32278 107.04 4.31879 3.36005 1.65479 4.31879 3.32281 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
366.06 358.98 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
372 358.98 mo
( Rd x RrZ,C2)
[1.62 4.38 3.29999 1.68002 3 1.67999 4.31998 91.5 3.65994 1.68002 63.06 0 
]xsh
41.4003 368.46 mo
(FMULRd, RrFractional Multiply UnsignedR1:R0 )
[3.64975 4.98175 4.3158 49.14 4.3158 3.35999 1.62 1.68 4.3158 44.94 3.64975 1.98175 
3.36 3 1.62001 1.37999 3.31979 3.36 3.31979 1.37999 1.62001 5.03996 3.29999 1.3158 
1.65179 1.3158 3.36 1.3158 2.9838 1.68001 4.3158 3.35999 2.9838 1.3158 3.31979 3.36 
3.31979 111.72 4.3158 3.35999 1.65179 4.3158 3.31982 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
366.06 368.46 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
372 368.46 mo
( \(Rd x Rr\) )
[1.62 2.03995 4.32001 3.30002 1.67999 3 1.67999 4.32001 1.97995 2.03995 0 ]xsh
LBAXSW+Helvetica*1 [9 0 0 -9 0 0 ]msf
399.66 368.46 mo
(<< 1)
[5.2182 5.2803 2.45969 0 ]xsh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
483.48 368.46 mo
(Z,C2)
[3.66895 1.67102 63.06 0 ]xsh
41.4 378 mo
(FMULSRd, RrFractional Multiply SignedR1:R0 )
[3.65096 4.98296 4.317 3.36 45.78 4.32 3.36 1.62 1.68 4.317 44.9399 3.65096 
1.98296 3.36 3 1.62 1.38 3.32098 3.36 3.321 1.37999 1.62001 5.03995 3.3 
1.317 1.65298 1.317 3.36 1.31699 2.985 1.68001 3.98705 1.317 3.32098 3.36 3.321 
118.38 4.31702 3.35999 1.65302 4.31702 3.32098 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
366.06 378 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
372 378 mo
( \(Rd x Rr\) )
[1.62 2.03995 4.32001 3.30002 1.67999 3 1.67999 4.32001 1.97995 2.03995 0 ]xsh
LBAXSW+Helvetica*1 [9 0 0 -9 0 0 ]msf
399.66 378 mo
(<< 1)
[5.2182 5.2803 2.45969 0 ]xsh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
483.48 378 mo
(Z,C2)
[3.66895 1.67102 63.06 0 ]xsh
41.4 387.48 mo
(FMULSURd, RrFractional Multiply Signed with UnsignedR1:R0 )
[3.65395 4.98595 4.32 3.36 3.99004 41.76 4.32001 3.35999 1.62 1.67999 4.32001 44.9399 
3.65396 1.98595 3.36 3 1.62 1.38 3.32399 3.36 3.32399 1.38 1.62 5.03995 
3.3 1.31999 1.65601 1.31999 3.36 1.31999 2.98799 1.68001 3.99004 1.31999 3.32399 3.36 
3.32399 3.36 1.68001 4.32001 1.32001 1.65601 3.36002 1.62 4.32001 3.36002 2.98799 1.32001 
3.36002 3.30002 3.35999 79.02 4.32001 3.35999 1.65601 4.32001 3.32397 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
366.06 387.48 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
372 387.48 mo
( \(Rd x Rr\) )
[1.62 2.03995 4.32001 3.30002 1.67999 3 1.67999 4.32001 1.97995 2.03995 0 ]xsh
LBAXSW+Helvetica*1 [9 0 0 -9 0 0 ]msf
399.66 387.48 mo
(<< 1)
[5.2182 5.2803 2.45969 0 ]xsh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
483.48 387.48 mo
(Z,C2)
[3.66895 1.67102 63.06 0 ]xsh
LBAXSV+Helvetica-Bold*1 [6 0 0 -6 0 0 ]msf
41.4 397.02 mo
(BRANCH INSTRUCTIONS)
[4.3224 4.3224 4.3224 4.38 4.3224 4.3224 1.68 1.62 4.38 3.99244 3.65636 4.38 
4.3224 4.3224 3.65636 1.6584 4.62 4.38 0 ]xsh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
41.4 406.5 mo
(RJMPkRelative JumpPC)
[4.3236 2.9916 4.98956 49.8 60.24 4.31999 3.36 1.31999 3.32761 1.65959 1.32361 2.99159 
3.36 1.68001 2.99159 3.32761 4.98955 149.04 3.99359 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
355.74 406.5 mo
(! )
[1.5 0 ]xsh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
363.12 406.5 mo
( PC + k  + 1None2)
[1.67999 4.02005 4.32001 1.67999 3.483 1.67999 2.979 1.67999 1.67999 3.483 1.67999 91.98 
4.38 3.315 3.35999 57.36 0 ]xsh
41.4 415.98 mo
(IJMPIndirect Jump to \(Z\)PC )
[1.6584 2.9904 4.98835 112.68 1.65839 3.32642 3.35999 1.32001 1.98834 3.35999 2.99042 1.65839 
1.62 2.99042 3.35999 4.98834 3.36002 1.62 1.65839 3.36002 1.67999 1.98837 3.65634 133.68 
4.02005 4.32242 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
357.42 415.98 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
363.3 415.98 mo
( Z None2)
[1.67999 3.67557 114.84 4.38 3.29999 3.34558 57.36 0 ]xsh
41.4 425.52 mo
(JMPkDirect JumpPC)
[2.9994 4.99735 54.12 60.24 4.33141 1.33141 1.99736 3.3354 2.9994 1.6674 1.68001 2.9994 
3.29999 4.99736 155.04 4.00146 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
355.74 425.52 mo
(! )
[1.5 0 ]xsh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
363.12 425.52 mo
( kNone3)
[1.67999 118.68 4.38 3.30002 3.35999 57.36 0 ]xsh
41.4 435 mo
(RCALLkRelative Subroutine Call PC )
[4.3032 4.3032 4.02005 3.3072 46.14 60.24 4.31998 3.36002 1.31998 3.30719 1.68002 1.30319 
3 3.35999 1.68002 3.97324 3.35999 3.30719 2.03995 3.30722 3.35999 1.67999 1.32001 3.30719 
3.35999 1.68002 4.30319 3.30719 1.38 1.31998 119.34 4.02002 4.32001 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
357.42 435 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
363.3 435 mo
( PC + k + 1None4)
[1.67999 4.02005 4.32001 1.67999 3.483 1.67999 2.979 1.67999 3.483 1.67999 93.48 4.38 
3.315 3.35999 57.36 0 ]xsh
41.4 444.48 mo
(ICALLIndirect Call to \(Z\)PC )
[1.6596 4.3236 3.99364 3.3276 109.02 1.67999 3.32761 3.36 1.32359 1.98956 3.36 3 
1.65959 1.62001 4.32359 3.36 1.32359 1.32361 1.68001 1.65959 3.36 1.62 2.03996 3.65996 
138 4.02002 4.32361 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
357.42 444.48 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
363.3 444.48 mo
( ZNone4)
[1.67999 118.5 4.37997 3.30002 3.35999 57.36 0 ]xsh
41.4 454.02 mo
(CALLkDirect Subroutine Call PC )
[4.3032 4.02005 3.3072 50.46 60.24 4.30319 1.30319 1.96915 3.36 3 1.68001 1.68001 
3.97324 3.36 3.30719 2.03995 3.30721 3.36 1.67999 1.32001 3.30719 3.35999 1.68001 4.30321 
3.30719 1.37999 1.31999 125.34 4.02002 4.32001 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
357.42 454.02 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
363.3 454.02 mo
( kNone5)
[1.67999 118.5 4.38 3.29999 3.36002 57.36 0 ]xsh
41.4 463.5 mo
(RETSubroutine ReturnPC )
[4.32 4.02005 114 3.96004 3.35521 3.35519 1.97997 3.29999 3.36 1.68719 1.31999 3.35521 
3.3 1.67999 4.32001 3.35999 1.62001 3.36 1.97995 138.36 4.02124 4.32001 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
357.42 463.5 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
363.3 463.5 mo
( STACKNone5)
[1.67999 4.00986 3.67374 3.96005 4.38 102.48 4.38 3.29999 3.36002 57.36 0 ]xsh
41.4 472.98 mo
(RETIInterrupt ReturnPC )
[4.3338 4.00385 3.66776 110.34 1.6698 3.29999 1.6698 3.3378 1.99976 1.99974 3.3378 3.3 
1.67999 1.68001 4.3338 3.33778 1.62001 3.36 1.99976 145.02 4.00385 4.3338 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
357.42 472.98 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
363.3 472.98 mo
( STACKI5)
[1.67999 4.00986 3.67374 3.96005 4.38 102.48 68.4 0 ]xsh
41.4 482.52 mo
(CPSERd,RrCompare, Skip if Equalif \(Rd = Rr\) PC)
[4.3236 3.99364 3.99364 49.8 4.3236 3.35999 1.62 4.38 46.56 4.32001 3.36 4.97995 
3.32759 3.36 1.98956 3.35999 1.65961 1.62 3.99365 2.99159 1.32361 3.36 1.67999 1.32361 
1.65959 1.62001 3.99364 3.36 3.32761 3.35999 123.66 1.32001 1.65961 1.67999 1.98956 4.32361 
3.35999 1.67999 3.49561 1.67999 4.32361 1.98956 1.9895 1.67999 3.99365 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
386.88 482.52 mo
(! )
[1.5 0 ]xsh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
394.32 482.52 mo
( PC + 2 or 3None1/2/3)
[1.62 4.01584 4.34583 1.67999 3.47998 1.68002 3.34979 1.67999 3.29999 1.97998 1.67999 60.36 
4.38 3.29999 3.36002 52.38 3.30005 1.68176 3.34985 1.68176 0 ]xsh
41.4 492 mo
(CPRd,RrCompareRd )
[4.314 57.78 4.314 3.36 1.62 4.38 46.56 4.32001 3.35999 4.97997 3.31799 3.35999 
1.97997 162.36 4.31403 3.35999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 492 mo
($)sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
360 492 mo
( RrZ, N,V,C,H1 )
[1.67999 4.33621 117.48 3.67017 1.67221 1.67999 4.33621 1.67218 4.00626 1.62 4.38 1.62 
43.74 3.35999 0 ]xsh
41.4 501.48 mo
(CPCRd,RrCompare with CarryRd )
[4.3176 3.98764 53.76 4.32 3.36 1.62 4.38 46.56 4.31761 3.35999 4.98357 3.32159 
3.36 1.97995 3.36 1.68001 4.3176 1.31761 1.65359 3.32161 1.68001 4.3176 3.36 1.98355 
1.98357 133.38 4.31763 3.35999 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 501.48 mo
($)sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
360 501.48 mo
( Rr )
[1.67999 4.32782 2.03995 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
369.66 501.48 mo
($)sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
372.96 501.48 mo
( CZ, N,V,C,H1)
[1.67999 108.84 3.65994 1.67822 1.67999 4.34219 1.67819 4.01224 1.62003 4.37997 1.62003 43.74 
0 ]xsh
41.4 511.02 mo
(CPIRd,KCompare Register with ImmediateRd )
[4.3044 4.02005 53.76 4.32001 3.35999 1.62 50.94 4.31998 3.36002 4.97995 3.30838 3.36002 
1.97034 3.36002 1.67999 4.30438 3.30841 3.35999 1.32001 3 1.67999 3.30841 2.03995 1.62 
4.38 1.32001 1.67999 3.29999 1.68002 1.67999 4.97037 4.97034 3.36002 3.30841 1.37997 3.30841 
1.67999 96.36 4.32001 3.36002 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 511.02 mo
($)sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
360 511.02 mo
( KZ, N,V,C,H1)
[1.67999 121.8 3.65997 1.67819 1.67999 4.34219 1.67822 4.01221 1.62003 4.37997 1.62003 43.74 
0 ]xsh
41.4 520.5 mo
(SBRCRr, bSkip if Bit in Register Clearedif \(Rr\(b\)=0\) PC )
[3.98885 3.98884 4.3188 49.8 4.3188 1.98475 1.6548 1.68 50.58 3.96005 2.9868 1.38 
3.3228 1.68001 1.3188 1.6548 1.68001 3.98885 1.38 1.62 1.68001 1.3188 3.36 1.68001 
4.3188 3.3228 3.36 1.31999 2.98682 1.6548 3.36 1.97995 1.67999 4.31882 1.3188 3.36 
3.3228 1.98476 3.36 109.02 1.31879 1.65479 1.67999 1.98474 4.31885 1.98474 2.03992 3.32281 
2.03998 3.49078 3.35999 1.98474 1.67999 3.98883 4.31879 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
388.2 520.5 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
394.14 520.5 mo
( PC + 2 or 3 None1/2/3)
[1.67999 3.96005 4.38 1.62 3.53159 1.62 3.36362 1.67999 3.29999 2.03998 1.62 3.36359 
57.18 4.35959 3.29999 3.36362 52.3799 3.30005 1.67999 3.36359 1.69562 0 ]xsh
41.4 529.98 mo
(SBRSRr, bSkip if Bit in Register is Setif \(Rr\(b\)=1\) PC )
[3.98885 3.98884 4.3188 49.8 4.3188 1.98475 1.6548 1.68 50.58 3.96004 2.9868 1.38 
3.3228 1.68001 1.3188 1.6548 1.68001 3.98885 1.38 1.62 1.68001 1.3188 3.36 1.68001 
4.3188 3.3228 3.36 1.31999 2.9868 1.65482 3.35999 1.97997 1.68001 1.3188 2.9868 1.68001 
3.98885 3.36002 113.34 1.32001 1.65479 1.67999 1.98474 4.31879 1.98474 2.03998 3.32275 2.03998 
3.49078 3.36005 1.98474 1.67999 3.98883 4.31879 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
388.2 529.98 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
394.14 529.98 mo
( PC + 2 or 3None1/2/3)
[1.67999 3.96005 4.38 1.62 3.5256 1.62 3.3576 1.67999 3.29999 2.03998 1.62 60.54 
4.38 3.30002 3.35999 52.38 3.30005 1.68958 3.3576 1.68958 0 ]xsh
41.4 539.52 mo
(SBICP, bSkip if Bit in I/O Register Clearedif \(P\(b\)=0\) PC )
[4.00745 3.96004 1.6734 52.44 4.00745 1.62 1.68 52.92 3.96004 3.0054 1.38 3.29999 
1.68001 1.3374 1.6734 1.68001 3.96004 1.38 1.62 1.68001 1.3374 3.3414 1.68001 1.6734 
1.62 4.6734 1.68001 4.3374 3.3414 3.29999 1.32001 3.0054 1.6734 3.3414 2.00336 1.67999 
4.3374 1.3374 3.3414 3.3 2.03996 3.29999 99.36 1.3374 1.6734 1.67999 2.00336 4.00745 
2.00336 3.34143 2.00336 3.47998 3.34137 2.00336 1.67999 4.00745 4.3374 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
385.92 539.52 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
391.8 539.52 mo
( PC + 2 or 3 None1/2/3)
[1.67999 4.02005 4.32001 1.67999 3.47101 1.67999 3.30301 1.67999 3.35999 1.97998 1.67999 3.30298 
59.52 4.38 3.29999 3.35999 52.38 3.30298 1.68005 3.35999 1.67999 0 ]xsh
41.4 549 mo
(SBISP, bSkip if Bit in I/O Register is Setif \(P\(b\)=1\) PC )
[4.00805 3.96004 1.674 52.44 4.00805 1.62 1.68 52.92 3.96005 3.006 1.38 3.29999 
1.68001 1.338 1.674 1.68001 3.96004 1.37999 1.62001 1.68001 1.338 3.342 1.67999 1.67401 
1.62 4.674 1.68001 4.338 3.342 3.29999 1.32001 3.00598 1.67401 3.34198 2.00397 1.67999 
1.338 3.00601 1.67999 3.96004 3.36002 103.68 1.32001 1.67401 1.67999 2.00397 4.008 2.00397 
3.34198 2.00397 3.47998 3.34204 2.00391 1.67999 4.00806 4.33801 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
385.92 549 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
391.8 549 mo
( PC + 2 or 3None1/2/3)
[1.67999 4.01166 4.34158 1.68002 3.47998 1.67999 3.30002 1.67999 3.34561 2.00754 1.67999 62.82 
4.38 3.29999 3.36002 52.38 3.29999 1.67755 3.34564 1.67761 0 ]xsh
41.4 558.48 mo
(BRBSs, kBranch if Status Flag Setif \(SREG\(s\) = 1\) then PC)
[4.02004 4.32 3.97144 49.8001 3 1.67999 1.62 53.94 3.96004 2.03996 3.29999 3.36 
3 3.3054 1.67999 1.30141 1.68001 1.67999 4.02005 1.62001 3.36 1.67999 3.3054 3 
1.68001 3.63535 1.30139 3.36 3.36 1.62 4.02005 3.36 118.98 1.32001 1.67999 1.67999 
1.96741 4.02002 4.30139 4.02002 4.63739 2.03998 3 1.97998 1.67999 3.47339 1.67999 3.30536 
2.03998 1.62 1.67999 3.36005 3.30536 3.36005 1.67999 3.97144 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
413.58 558.48 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
419.46 558.48 mo
(PC+k + 1None1/2)
[4.01825 4.34821 3.47998 3 1.67999 3.5202 1.62 42.36 4.38 3.29999 3.36002 54.9 
3.35999 1.6842 0 ]xsh
41.4 568.02 mo
(BRBCs, kBranch if Status Flag Clearedif \(SREG\(s\) = 0\) then PC)
[4.02004 4.32 3.97324 49.8 3 1.68 1.62 53.94 3.96002 2.03998 3.29999 3.35999 
3 3.30719 1.68002 1.30319 1.67999 1.68002 4.02002 1.62003 3.35999 1.67999 3.30722 3 
1.67999 3.63715 1.30319 3.36002 3.35999 1.62 4.30319 1.38 3.30719 3.36002 1.96915 3.35999 
108.66 1.32001 1.67999 1.67999 1.96918 4.02002 4.30322 4.02002 4.63922 2.03995 3 1.97995 
1.67999 3.47522 1.67999 3.30719 2.03998 1.62 1.67999 3.36002 3.30719 3.36002 1.67999 3.97327 
0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
413.58 568.02 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
419.46 568.02 mo
(PC+k + 1None1/2)
[4.01825 4.34821 3.47998 3 1.67999 3.5202 1.62 42.36 4.38 3.29999 3.36002 54.9 
3.35999 1.6842 0 ]xsh
41.4 577.5 mo
(BREQ kBranch if Equal if \(Z = 1\) then PC )
[4.02425 4.32 3.96004 49.8 1.67999 58.56 3.96004 2.02017 3.29999 3.35818 3.02222 3.29999 
1.68002 1.31998 1.68002 1.67999 4.02423 3.30002 3.35818 3.29999 1.35422 142.98 1.32001 1.67999 
1.67999 1.97998 3.65994 1.67999 3.47998 1.67999 3.35822 1.97995 1.67999 1.62 3.35822 3.35822 
3.29999 1.67999 4.02423 4.32001 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
394.92 577.5 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
400.8 577.5 mo
( PC + k + 1None1/2)
[1.67999 4.02005 4.32001 1.67999 3.483 1.67999 2.979 1.67999 3.483 1.67999 55.98 4.38 
3.315 3.35999 54.9 3.35999 1.67999 0 ]xsh
41.3999 586.98 mo
(BRNE kBranch if Not Equalif \(Z = 0\) then PC )
[4.01165 4.3416 4.3416 49.44 1.68 58.56 3.96004 2.00757 3.29999 3.3456 3.0096 3.3 
1.68001 1.3416 1.6776 1.68001 4.3416 3.34561 1.6776 1.62 4.01164 3.34561 3.29999 3.36 
133.32 1.32001 1.67755 1.67999 2.00757 3.67554 1.67999 3.47998 1.67999 3.34558 2.00757 1.67999 
1.62 3.34558 3.34558 3.29999 1.67999 4.01166 4.34161 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
394.92 586.98 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
400.8 586.98 mo
( PC + k + 1None1/2)
[1.67999 4.02005 4.32001 1.67999 3.483 1.67999 2.979 1.67999 3.483 1.67999 55.98 4.38 
3.315 3.35999 54.9 3.36005 1.67999 0 ]xsh
41.3999 596.52 mo
(BRCS kBranch if Carry Setif \(C = 1\) then PC )
[4.00925 4.3392 4.3392 49.44 1.68 58.56 3.96005 2.00514 3.3 3.34319 3.0072 3.3 
1.68001 1.33919 1.6752 1.68001 4.3392 3.34319 2.00516 2.00516 3.00719 1.68001 4.00925 3.3 
134.7 1.32001 1.67523 1.67999 2.00519 4.33917 1.67999 3.47998 1.67999 3.34326 2.00513 1.67999 
1.67523 3.29999 3.3432 3.29999 1.67999 4.00928 4.33917 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
395.58 596.52 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
401.46 596.52 mo
( PC + k + 1None1/2)
[1.67999 4.02005 4.32001 1.67999 3.483 1.67999 2.979 1.67999 3.483 1.67999 55.32 4.38 
3.315 3.35999 54.9 3.35999 1.68005 0 ]xsh
41.3999 606 mo
(BRCC kBranch if Carry Clearedif \(C = 0\) then PC )
[3.99424 4.3242 4.3242 49.44 1.68 58.56 3.96004 2.03996 3.29999 3.35999 3 3.32822 
1.67999 1.32419 1.66019 1.68002 4.32419 3.35999 1.99017 1.99014 2.99219 1.68002 4.32419 1.32419 
3.35999 3.36002 1.97995 3.32819 124.38 1.32419 1.66019 1.67999 1.99017 4.32419 1.67999 3.49619 
1.67999 3.36002 1.97995 1.67999 1.66022 3.32819 3.35999 3.30002 1.67999 3.99423 4.32419 0 
]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
395.58 606 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
401.46 606 mo
( PC + k + 1None1/2)
[1.67999 4.02005 4.32001 1.67999 3.483 1.67999 2.979 1.67999 3.483 1.67999 55.32 4.38 
3.315 3.35999 54.9 3.35999 1.68005 0 ]xsh
41.3999 615.48 mo
(BRSH kBranch if Same or Higher if \(C = 0\) then PC )
[4.02304 4.32 3.96004 49.8 1.67999 58.56 3.96004 2.01895 3.30002 3.35699 3.021 3.29999 
1.67999 1.32001 1.67999 1.68002 4.02304 3.29999 4.97995 3.36002 1.67999 3.29999 2.03998 1.62 
4.353 1.32001 3.29999 3.35699 3.35699 1.97995 116.34 1.32001 1.67999 1.67999 1.97998 4.32001 
1.67999 3.47998 1.67999 3.35699 1.97995 1.67999 1.689 3.30002 3.35696 3.30002 1.67999 4.02304 
4.32001 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
395.58 615.48 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
401.46 615.48 mo
( PC + k + 1None1/2)
[1.67999 4.02005 4.32001 1.67999 3.483 1.67999 2.979 1.67999 3.483 1.67999 55.32 4.38 
3.315 3.35999 54.9 3.35999 1.68005 0 ]xsh
41.3999 625.02 mo
(BRLO kBranch if Lowerif \(C = 1\) then PC )
[4.01284 4.3428 3.3 50.46 1.68 58.56 3.96005 2.00876 3.29999 3.3468 3.0108 3.29999 
1.68002 1.3428 1.6788 1.67999 3.3468 3.29999 4.3428 3.3468 144 1.32001 1.6788 1.67999 
2.00876 4.3428 1.67999 3.47998 1.67999 3.3468 2.00876 1.67999 1.6788 3.29999 3.3468 3.29999 
1.67999 4.01288 4.34277 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
395.58 625.02 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
401.46 625.02 mo
( PC + k + 1None1/2)
[1.67999 4.02005 4.32001 1.67999 3.483 1.67999 2.979 1.67999 3.483 1.67999 55.32 4.38 
3.315 3.35999 54.9 3.35999 1.68005 0 ]xsh
41.3999 634.5 mo
(BRMI kBranch if Minusif \(N = 1\) then PC )
[4.02124 4.32 4.97995 48.78 1.68 58.56 3.96005 2.01715 3.29999 3.35522 3.0192 3.29999 
1.68002 1.31998 1.68002 1.67999 4.97995 1.32001 3.35519 3.35519 145.32 1.32001 1.67999 1.67999 
1.97998 4.32001 1.67999 3.47998 1.67999 3.35519 1.97995 1.67999 1.68723 3.29999 3.35519 3.29999 
1.67999 4.02127 4.32001 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
395.58 634.5 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
401.46 634.5 mo
( PC + k + 1None1/2)
[1.67999 4.02005 4.32001 1.67999 3.483 1.67999 2.979 1.67999 3.483 1.67999 55.32 4.38 
3.315 3.35999 54.9 3.35999 1.68005 0 ]xsh
41.3999 643.98 mo
(BRPL kBranch if Plus if \(N = 0\) then PC )
[4.01104 4.341 3.96004 49.8 1.68 58.56 3.96005 2.00696 3.29999 3.345 3.00897 3.30002 
1.67999 1.341 1.677 1.67999 4.01105 1.34097 3.30002 3 146.7 1.341 1.677 1.67999 
2.00693 4.341 1.67999 3.47998 1.67999 3.345 2.00696 1.67999 1.677 3.29999 3.345 3.29999 
1.67999 4.01105 4.341 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
395.58 643.98 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
401.46 643.98 mo
( PC + k + 1None1/2)
[1.67999 4.02005 4.32001 1.67999 3.483 1.67999 2.979 1.67999 3.483 1.67999 55.32 4.38 
3.315 3.35999 54.9 3.35999 1.68005 0 ]xsh
41.3999 653.52 mo
(BRGE kBranch if Greater or Equal, Signedif \(N )
[4.02124 4.32 4.62 49.14 1.68 58.56 3.96005 2.01715 3.29999 3.35522 3.0192 3.29999 
1.68002 1.31998 1.68002 1.67999 4.68719 1.97995 3.35522 3.29999 1.68719 3.35519 1.97995 1.68002 
3.29999 1.97995 1.68002 4.02124 3.29999 3.35519 3.35522 1.31998 1.68719 1.62003 4.02124 1.32001 
3.35519 3.29999 3.35522 95.34 1.32001 1.67999 1.67999 1.97998 4.32001 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
360.06 653.52 mo
(#)sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
364.68 653.52 mo
( V= 0\) then PC )
[1.67999 3.96005 3.54001 1.62 3.3468 2.00876 1.67999 1.6788 3.29999 3.3468 3.29999 1.67999 
4.01285 4.3428 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
405.84 653.52 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
411.78 653.52 mo
( PC + k + 1None1/2)
[1.62 4.02005 4.32001 1.67999 3.48001 1.67999 2.97598 1.68002 3.47998 1.67999 45.06 4.38 
3.31201 3.35999 54.9 3.35999 1.67999 0 ]xsh
41.3999 663 mo
(BRLT kBranch if Less Than Zero, Signedif \(N )
[4.02124 4.32 3.3 50.46 1.68 58.56 3.96005 2.01715 3.29999 3.35522 3.0192 3.29999 
1.68002 1.31998 1.68002 1.67999 3.35519 3.29999 3.01923 3.0192 1.67999 3.68518 3.35519 3.29999 
3.35999 1.62003 3.68515 3.29999 1.97995 3.36002 1.68719 1.67999 3.96005 1.32001 3.35519 3.35519 
3.29999 97.68 1.32001 1.68723 1.67999 1.97995 4.32001 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
360.06 663 mo
(#)sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
364.68 663 mo
( V= 1\) then PC )
[1.67999 3.96005 3.54001 1.62 3.3468 2.00876 1.67999 1.6788 3.29999 3.3468 3.29999 1.67999 
4.01285 4.3428 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
405.84 663 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
411.78 663 mo
( PC + k + 1None1/2)
[1.62 4.02005 4.32001 1.67999 3.48001 1.67999 2.97598 1.68002 3.47998 1.67999 45.06 4.38 
3.31201 3.35999 54.9 3.35999 1.67999 0 ]xsh
41.3999 672.48 mo
(BRHS kBranch if Half Carry Flag Setif \(H = 1\) then PC )
[4.00864 4.3386 4.3386 49.44 1.67999 58.56 3.96004 2.00458 3.29999 3.34259 3.00662 3.29999 
1.67999 1.33862 1.67459 1.67999 4.33862 3.34259 1.33859 1.67462 1.62 4.38 3.29999 2.00455 
2.00458 3.00659 1.68002 3.67255 1.33859 3.30002 3.35999 1.67999 3.96005 3.35999 109.02 1.32001 
1.67459 1.67999 2.00455 4.33859 1.67999 3.47998 1.67999 3.34259 2.00455 1.67999 1.67459 3.30002 
3.34259 3.29999 1.67999 4.00864 4.33859 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
395.58 672.48 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
401.46 672.48 mo
( PC + k + 1None1/2)
[1.67999 4.02005 4.32001 1.67999 3.483 1.67999 2.979 1.67999 3.483 1.67999 55.32 4.38 
3.315 3.35999 54.9 3.35999 1.68005 0 ]xsh
41.3999 682.02 mo
(BRHC kBranch if Half Carry Flag Clearedif \(H = 0\) then PC )
[3.99244 4.3224 4.3224 49.44 1.67999 58.56 3.96004 2.03996 3.29999 3.35999 3 3.32642 
1.67999 1.32239 1.65842 1.67999 4.32242 3.35999 1.32239 1.65842 1.62 4.38 3.29999 2.03995 
1.97995 2.99042 1.67999 3.65634 1.32242 3.32639 3.36002 1.67999 4.32242 1.32239 3.36002 3.32642 
2.03995 3.32642 98.7 1.32239 1.65842 1.67999 1.98837 4.32239 1.67999 3.49442 1.67999 3.36002 
1.97998 1.67999 1.65839 3.32642 3.36002 3.29999 1.67999 3.99246 4.32239 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
395.58 682.02 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
401.46 682.02 mo
( PC + k + 1None1/2)
[1.67999 4.02005 4.32001 1.67999 3.483 1.67999 2.979 1.67999 3.483 1.67999 55.32 4.38 
3.315 3.35999 54.9 3.35999 1.68005 0 ]xsh
41.3999 691.5 mo
(BRTS kBranch if T Flag Setif \(T = 1\) then PC )
[4.01645 4.32 3.68036 50.1 1.68 58.56 3.96005 2.01236 3.29999 3.3504 3.01437 3.30002 
1.67999 1.32001 1.67999 1.67999 3.68036 1.68002 3.68033 1.32001 3.3504 3.29999 1.67999 4.01645 
3.29999 132.36 1.32001 1.6824 1.67999 1.97998 3.65994 1.67999 3.47998 1.67999 3.3504 1.97998 
1.67999 1.62 3.3504 3.3504 3.29999 1.67999 4.01642 4.32001 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
394.92 691.5 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
400.8 691.5 mo
( PC + k  + 1None1/2)
[1.67999 4.01465 4.3446 1.67999 3.48001 1.67999 3.0126 1.67999 1.62 3.5166 1.62 54.36 
4.38 3.29999 3.35999 54.9 3.35999 1.6806 0 ]xsh
41.4 700.98 mo
(BRTC kBranch if T Flag Clearedif \(T = 0\) then PC )
[4.01704 4.32 3.68095 50.1 1.68 58.56 3.96005 2.01294 3.30002 3.35098 3.01501 3.29999 
1.68002 1.31998 1.68002 1.67999 3.68097 1.67999 3.68097 1.31998 3.35101 3.29999 1.67999 4.32001 
1.32001 3.35098 3.35101 1.97995 3.29999 122.04 1.32001 1.67999 1.67999 1.97998 3.65997 1.67999 
3.47998 1.67999 3.35098 1.97995 1.67999 1.62003 3.35098 3.35098 3.30002 1.67999 4.01703 4.32001 
0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
394.92 700.98 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
400.8 700.98 mo
( PC + k + 1None1/2)
[1.67999 4.02005 4.32001 1.67999 3.483 1.67999 2.979 1.67999 3.483 1.67999 55.98 4.38 
3.315 3.35999 54.9 3.35999 1.67999 0 ]xsh
41.4 710.52 mo
(BRVS kBranch if Overflow Flag is Setif \(V = 1\) then PC )
[4.01405 4.344 3.96004 49.8 1.68 58.56 3.96004 2.00996 3.3 3.34799 3.01201 3.3 
1.67999 1.34401 1.68001 1.67999 4.68001 3.01201 3.29999 2.03996 1.62001 1.37999 3.3 4.31999 
1.68001 3.67795 1.34401 3.34801 3.29999 1.68001 1.34401 3.01199 1.67999 4.01404 3.3 106.38 
1.32001 1.67999 1.67999 2.00995 4.01404 1.62 3.51599 1.67999 3.29999 1.97998 1.67999 1.67999 
3.34796 3.29999 3.36005 1.67999 3.96002 4.32001 0 ]xsh
LBAXSX+SymbolMT*1 [6 0 0 -6 0 0 ]msf
395.22 710.52 mo
( )sh
LBAXSW+Helvetica*1 [6 0 0 -6 0 0 ]msf
401.16 710.52 mo
( PC + k + 1None1/2)
[1.67999 3.96005 4.32001 1.67999 3.52798 1.62003 3 1.67999 3.52798 1.62 55.68 4.38 
3.30002 3.35999 54.9 3.35999 1.69202 0 ]xsh
35.76 712.26 mo
36.24 712.26 li
36.24 101.46 li
35.76 101.46 li
cp
f
97.86 115.5 mo
98.34 115.5 li
98.34 98.46 li
97.86 98.46 li
cp
f
97.86 390.48 mo
98.34 390.48 li
98.34 123.24 li
97.86 123.24 li
cp
f
97.86 712.74 mo
98.34 712.74 li
98.34 398.76 li
97.86 398.76 li
cp
f
158.1 115.5 mo
158.58 115.5 li
158.58 98.46 li
158.1 98.46 li
cp
f
158.1 390.48 mo
158.58 390.48 li
158.58 123.24 li
158.1 123.24 li
cp
f
158.1 712.74 mo
158.58 712.74 li
158.58 398.76 li
158.1 398.76 li
cp
f
341.76 115.5 mo
342.24 115.5 li
342.24 98.46 li
341.76 98.46 li
cp
f
341.76 390.48 mo
342.24 390.48 li
342.24 123.24 li
341.76 123.24 li
cp
f
341.76 712.74 mo
342.24 712.74 li
342.24 398.76 li
341.76 398.76 li
cp
f
477.84 115.5 mo
478.32 115.5 li
478.32 98.46 li
477.84 98.46 li
cp
f
477.84 390.48 mo
478.32 390.48 li
478.32 123.24 li
477.84 123.24 li
cp
f
477.84 712.74 mo
478.32 712.74 li
478.32 398.76 li
477.84 398.76 li
cp
f
530.88 115.5 mo
531.36 115.5 li
531.36 98.46 li
530.88 98.46 li
cp
f
530.88 390.48 mo
531.36 390.48 li
531.36 123.24 li
530.88 123.24 li
cp
f
530.88 712.74 mo
531.36 712.74 li
531.36 398.76 li
530.88 398.76 li
cp
f
575.76 712.26 mo
576.24 712.26 li
576.24 101.46 li
575.76 101.46 li
cp
f
35.76 101.46 mo
576.24 101.46 li
576.24 98.46 li
35.76 98.46 li
cp
f
35.76 115.5 mo
576.24 115.5 li
576.24 112.5 li
35.76 112.5 li
cp
f
35.76 123.72 mo
576.24 123.72 li
576.24 123.24 li
35.76 123.24 li
cp
f
35.76 133.2 mo
576.24 133.2 li
576.24 132.72 li
35.76 132.72 li
cp
f
35.76 142.74 mo
576.24 142.74 li
576.24 142.26 li
35.76 142.26 li
cp
f
35.76 152.22 mo
576.24 152.22 li
576.24 151.74 li
35.76 151.74 li
cp
f
35.76 161.7 mo
576.24 161.7 li
576.24 161.22 li
35.76 161.22 li
cp
f
35.76 171.24 mo
576.24 171.24 li
576.24 170.76 li
35.76 170.76 li
cp
f
35.76 180.72 mo
576.24 180.72 li
576.24 180.24 li
35.76 180.24 li
cp
f
35.76 190.2 mo
576.24 190.2 li
576.24 189.72 li
35.76 189.72 li
cp
f
35.76 199.74 mo
576.24 199.74 li
576.24 199.26 li
35.76 199.26 li
cp
f
35.76 209.22 mo
576.24 209.22 li
576.24 208.74 li
35.76 208.74 li
cp
f
35.76 218.7 mo
576.24 218.7 li
576.24 218.22 li
35.76 218.22 li
cp
f
35.76 228.24 mo
576.24 228.24 li
576.24 227.76 li
35.76 227.76 li
cp
f
35.76 237.72 mo
576.24 237.72 li
576.24 237.24 li
35.76 237.24 li
cp
f
35.76 247.2 mo
576.24 247.2 li
576.24 246.72 li
35.76 246.72 li
cp
f
35.76 256.74 mo
576.24 256.74 li
576.24 256.26 li
35.76 256.26 li
cp
f
35.76 266.22 mo
576.24 266.22 li
576.24 265.74 li
35.76 265.74 li
cp
f
35.76 275.7 mo
576.24 275.7 li
576.24 275.22 li
35.76 275.22 li
cp
f
35.76 285.24 mo
576.24 285.24 li
576.24 284.76 li
35.76 284.76 li
cp
f
35.76 294.72 mo
576.24 294.72 li
576.24 294.24 li
35.76 294.24 li
cp
f
35.76 304.2 mo
576.24 304.2 li
576.24 303.72 li
35.76 303.72 li
cp
f
35.76 313.74 mo
576.24 313.74 li
576.24 313.26 li
35.76 313.26 li
cp
f
35.76 323.22 mo
576.24 323.22 li
576.24 322.74 li
35.76 322.74 li
cp
f
35.76 332.7 mo
576.24 332.7 li
576.24 332.22 li
35.76 332.22 li
cp
f
35.76 342.24 mo
576.24 342.24 li
576.24 341.76 li
35.76 341.76 li
cp
f
35.76 351.72 mo
576.24 351.72 li
576.24 351.24 li
35.76 351.24 li
cp
f
35.76 361.2 mo
576.24 361.2 li
576.24 360.72 li
35.76 360.72 li
cp
f
35.76 370.74 mo
576.24 370.74 li
576.24 370.26 li
35.76 370.26 li
cp
f
35.76 380.22 mo
576.24 380.22 li
576.24 379.74 li
35.76 379.74 li
cp
f
35.76 390.54 mo
576.24 390.54 li
576.24 388.56 li
35.76 388.56 li
cp
f
35.76 399.24 mo
576.24 399.24 li
576.24 398.76 li
35.76 398.76 li
cp
f
35.76 408.72 mo
576.24 408.72 li
576.24 408.24 li
35.76 408.24 li
cp
f
35.76 418.26 mo
576.24 418.26 li
576.24 417.78 li
35.76 417.78 li
cp
f
35.76 427.74 mo
576.24 427.74 li
576.24 427.26 li
35.76 427.26 li
cp
f
35.76 437.22 mo
576.24 437.22 li
576.24 436.74 li
35.76 436.74 li
cp
f
35.76 446.76 mo
576.24 446.76 li
576.24 446.28 li
35.76 446.28 li
cp
f
35.76 456.24 mo
576.24 456.24 li
576.24 455.76 li
35.76 455.76 li
cp
f
35.76 465.72 mo
576.24 465.72 li
576.24 465.24 li
35.76 465.24 li
cp
f
35.76 475.26 mo
576.24 475.26 li
576.24 474.78 li
35.76 474.78 li
cp
f
35.76 484.74 mo
576.24 484.74 li
576.24 484.26 li
35.76 484.26 li
cp
f
35.76 494.22 mo
576.24 494.22 li
576.24 493.74 li
35.76 493.74 li
cp
f
35.76 503.76 mo
576.24 503.76 li
576.24 503.28 li
35.76 503.28 li
cp
f
35.76 513.24 mo
576.24 513.24 li
576.24 512.76 li
35.76 512.76 li
cp
f
35.76 522.72 mo
576.24 522.72 li
576.24 522.24 li
35.76 522.24 li
cp
f
35.76 532.26 mo
576.24 532.26 li
576.24 531.78 li
35.76 531.78 li
cp
f
35.76 541.74 mo
576.24 541.74 li
576.24 541.26 li
35.76 541.26 li
cp
f
35.76 551.22 mo
576.24 551.22 li
576.24 550.74 li
35.76 550.74 li
cp
f
35.76 560.76 mo
576.24 560.76 li
576.24 560.28 li
35.76 560.28 li
cp
f
35.76 570.24 mo
576.24 570.24 li
576.24 569.76 li
35.76 569.76 li
cp
f
35.76 579.72 mo
576.24 579.72 li
576.24 579.24 li
35.76 579.24 li
cp
f
35.76 589.26 mo
576.24 589.26 li
576.24 588.78 li
35.76 588.78 li
cp
f
35.76 598.74 mo
576.24 598.74 li
576.24 598.26 li
35.76 598.26 li
cp
f
35.76 608.22 mo
576.24 608.22 li
576.24 607.74 li
35.76 607.74 li
cp
f
35.76 617.76 mo
576.24 617.76 li
576.24 617.28 li
35.76 617.28 li
cp
f
35.76 627.24 mo
576.24 627.24 li
576.24 626.76 li
35.76 626.76 li
cp
f
35.76 636.72 mo
576.24 636.72 li
576.24 636.24 li
35.76 636.24 li
cp
f
35.76 646.26 mo
576.24 646.26 li
576.24 645.78 li
35.76 645.78 li
cp
f
35.76 655.74 mo
576.24 655.74 li
576.24 655.26 li
35.76 655.26 li
cp
f
35.76 665.22 mo
576.24 665.22 li
576.24 664.74 li
35.76 664.74 li
cp
f
35.76 674.76 mo
576.24 674.76 li
576.24 674.28 li
35.76 674.28 li
cp
f
35.76 684.24 mo
576.24 684.24 li
576.24 683.76 li
35.76 683.76 li
cp
f
35.76 693.72 mo
576.24 693.72 li
576.24 693.24 li
35.76 693.24 li
cp
f
35.76 703.26 mo
576.24 703.26 li
576.24 702.78 li
35.76 702.78 li
cp
f
35.76 712.74 mo
576.24 712.74 li
576.24 712.26 li
35.76 712.26 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/1 ]]
] del_res
/LBAXSW+Helvetica*1 uf
/LBAXSW+Helvetica uf
/BLQAAA+Helvetica uf
/LBAXSX+SymbolMT*1 uf
/LBAXSX+SymbolMT uf
/ZJXAAA+SymbolMT uf
/LBAXSV+Helvetica-Bold*1 uf
/LBAXSV+Helvetica-Bold uf
/ADVAAA+Helvetica-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Page: 14 2
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (14)]
[/TrimBox [0 0 792 612]]
[/BleedBox [0 0 792 612]]
[/ArtBox [0 0 612 612 ]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -612 translate
pgsv
[0 -1 1 0 0 612 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
[1 0 0 1 0 0 ]ct
279.06 52.8 mo
347.94 52.8 li
347.94 19.2 li
279.06 19.2 li
cp
false sop
/2 
[/DeviceGray] /CSA add_res
1 gry
f
284.22 49.5 mo
342.78 49.5 li
342.78 22.44 li
284.22 22.44 li
cp
f
gsave
284.22 22.44 mo
342.78 22.44 li
342.78 49.5 li
284.22 49.5 li
cp
eclp
292.75 28.693 mo
284.46 43.854 li
291.016 43.854 li
291.016 42.181 li
289.787 42.181 li
292.529 37.202 li
292.529 43.854 li
296.784 43.854 li
296.784 28.693 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.03529 0.35686 0.65099 colr
f
0.274 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
292.75 28.693 mo
284.46 43.854 li
291.016 43.854 li
291.016 42.181 li
289.787 42.181 li
292.529 37.202 li
292.529 43.854 li
296.784 43.854 li
296.784 28.693 li
cp
@
336.279 28.693 mo
331.898 28.693 li
331.898 43.885 li
338.485 43.885 li
340.723 39.755 li
336.279 39.755 li
f
336.279 28.693 mo
331.898 28.693 li
331.898 43.885 li
338.485 43.885 li
340.723 39.755 li
336.279 39.755 li
cp
@
284.366 45.209 mo
284.366 48.96 li
335.649 48.96 li
337.728 45.209 li
f
284.366 45.209 mo
284.366 48.96 li
335.649 48.96 li
337.728 45.209 li
cp
@
298.392 43.885 mo
298.392 27.211 li
293.475 27.211 li
296.248 22.577 li
340.786 22.577 li
340.786 27.211 li
302.678 27.211 li
302.678 43.885 li
f
298.392 43.885 mo
298.392 27.211 li
293.475 27.211 li
296.248 22.577 li
340.786 22.577 li
340.786 27.211 li
302.678 27.211 li
302.678 43.885 li
cp
@
304.065 43.885 mo
304.065 28.693 li
316.453 28.693 li
318.219 28.629 319.668 29.733 319.574 31.75 cv
319.574 43.886 li
315.444 43.886 li
315.444 31.655 li
315.381 30.332 314.12 30.332 313.869 30.332 cv
313.869 43.886 li
309.771 43.886 li
309.771 30.332 li
308.258 30.332 li
308.258 43.886 li
304.065 43.886 li
f
304.065 43.885 mo
304.065 28.693 li
316.453 28.693 li
318.219 28.629 319.668 29.733 319.574 31.75 cv
319.574 43.886 li
315.444 43.886 li
315.444 31.655 li
315.381 30.332 314.12 30.332 313.869 30.332 cv
313.869 43.886 li
309.771 43.886 li
309.771 30.332 li
308.258 30.332 li
308.258 43.886 li
304.065 43.886 li
cp
@
330.448 28.693 mo
321.119 28.693 li
321.119 43.917 li
330.448 43.917 li
330.448 39.66 li
324.144 39.66 li
324.144 38.336 li
330.448 38.336 li
330.448 34.24 li
324.144 34.24 li
324.144 32.884 li
330.448 32.884 li
f
330.448 28.693 mo
321.119 28.693 li
321.119 43.917 li
330.448 43.917 li
330.448 39.66 li
324.144 39.66 li
324.144 38.336 li
330.448 38.336 li
330.448 34.24 li
324.144 34.24 li
324.144 32.884 li
330.448 32.884 li
cp
@
0.493 lw
340.408 44.987 mo
341.574 44.987 342.552 45.966 342.552 47.132 cv
342.552 48.297 341.574 49.276 340.408 49.276 cv
339.243 49.276 338.265 48.297 338.265 47.132 cv
338.265 45.965 339.243 44.987 340.408 44.987 cv
cp
@
339.899 46.265 mo
340.641 46.265 li
340.787 46.265 341.036 46.293 341.036 46.632 cv
341.036 46.957 340.806 47.013 340.588 47.013 cv
339.9 47.013 li
339.9 46.265 li
cp
339.899 47.268 mo
340.619 47.268 li
340.975 47.268 341.012 47.479 341.012 47.659 cv
341.012 47.742 341.021 48.077 341.064 48.211 cv
341.429 48.211 li
341.429 48.163 li
341.337 48.11 341.322 48.064 341.318 47.942 cv
341.299 47.544 li
341.287 47.237 341.161 47.183 341.036 47.13 cv
341.177 47.047 341.343 46.929 341.343 46.604 cv
341.343 46.137 340.981 46.011 340.619 46.011 cv
339.602 46.011 li
339.602 48.211 li
339.899 48.211 li
339.899 47.268 li
f
grestore
0 gry
%ADOBeginSubsetFont: ADVAAA+Helvetica-Bold Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /ADVAAA+Helvetica-Bold def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (Helvetica-Bold) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 47 /slash put
dup 49 /one put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 65 /A put
dup 80 /P put
dup 84 /T put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 109 /m put
def
/UniqueID 28357 def
/FontBBox {-170 -228 1003 962} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 718 737 532 546 698 710] def
/OtherBlues [271 283 401 409 -217 -208] def
/BlueScale 0.0437917 def
/StdHW [118] def
/StdVW [140] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
14 dict dup begin
/slash <1C60D8A8C9B854D08E823E34E98D69E05EECC9E8705DB5F86B9930EA
7128BCC1A633977959> |-
/one <1C60D8A8C9B7EF327C10274A23FFA602162C4CA1571585B0C1E77513AA
5B7F97CD86DBDAB28AAC85EF0A29A3E89D41CB761E2BBEAEE690> |-
/two <1C60D8A8C9B7EF325767EC41CBF510D1E0C71F1F1C039215CC32A5B90F
CF87168E35C28244745FCF47A9B7CE070B35171DB218CE7C8F2D9F0726293D9E
65C3C45297780FC122CECE1C36987116C8DB6BB559F3E2FA77AEB29702EDED93
3AF70BCDE4B644F7> |-
/three <1C60D8A8C9B7EF32A450E6CDCB2DBC464D59B250EEFF297922703F7A
1C62B0E2DD902F8B4278E9F98AECCD8BD128B20B17BEC7D8A3A1A65162C82E5A
8CE9866F72C565110868FD65D8C18A62564EFD1C8C46DBAB20D378988B1BB258
9905F17AF538B8272CCD92616DC49A1F2B14BC69E7CB92C844D3EDDCF325C584
8F599A6885AB739A36AA85201B953F058DEC541E4C0988CE6835E70930BE13F0
11B2CE417AF4A7D17EA8254FD592245E27F05D85E45036335FE7B7BC51E5AB59
02EE0E8226F2F0> |-
/four <1C60D8A8C9B7EF327C1027456714FC3BC7619810153E0E0BB1AFC3AE3
16C3E66D77684AF5C288D5749B76CF93B3D20F71F5A0E3789D4E186D0FDA28BA
D7075305BC124C6C5C0D7ED2C416E872E8670A5833B01> |-
/six <1C60D8A8C9B7EF32A450E6CDC47A46EBA62A986D8A4018CF2DEBD16CC9
7505CFB6B209B0A9FF5A258AA31DE23E1D88F734A7E48F8AF853626B7C39561C
3E52AD885CB4E560B9BBA8F7A2564D7FCB11AE5F639E6EEBCA772B6104B975CD
45A7CF9E774D11F805448B94627A866672C545B7299AC606F61FB363E9109DE6
AFC55F57428B80767B420D035D25C121384CAD9F93E64F83326C7580B961> |-
/A <1C60D8A8C9B6079F3517E07AE194467F2600CBBF80CDACFF67CA946405EC
4118A902AA9E3AD1C2ACBC1C96ADCDF278A5B068D6AD3EC85B0F1FA9ADA650BA
DCDD259A1E80F048D046> |-
/P <1C60D8A8C9B64EDFA3F30AE4FF71B5F4ACB06C7830091ED76355AF57E563
BACE6B9F18382092F649F10A78153D9E643FCA4FB2F0EA425397CD32EF53DFCA
2A21E66880A9FE4531E700C6054694F979479334C9EA> |-
/T <1C60D8A8C9B7D8BE41A64DAA76A975BC551F108B068D01BDBBAC2AD27262
B59952A766BB13F857E80A9C1CAD3ED3A7ACB4> |-
/a <1C60D8A8C9B7EF325730A2907F61B00205C0A296C9DF32E9DC65B526E2F4
C8ADC580B897B7206A5DA59C9696BB00EA7F1A0A06C73023E46EC804A076F02D
F4BDC69A6135461545FA8A14BD27F8CF4F25F4943E37F1D1C65276DECB4E9D6A
C0EC48F60EFDBE12AA6587FCF164CC3DB45D2B5A65777B03419394CDDD24FF22
F21243F8E28ED1FF2DD09C8E2A84D298381AAD9550B39360621CE1C759F80798
D4E2E93482B63D0349BE8E88D5485F93034964B138E766D0A08074C8EC8EE58B
FBF92479BF1434BFA703> |-
/e <1C60D8A8C9B7EF32A1CB45752FF6523DA5288185EF43DD045146AAD81675
EF96A1DDE9797BFF08369703AB5B932EB4FC76842B8FAFEA26499EB28D9010BF
45781D64B0753AFDAAF76627560E41BCFD847C893FE9E9680771D287E1806D72
84DB4BF9596E39109D2864B1FF> |-
/g <1C60D8A8C9B7D8BE1A3055587B34EC2A3DF2B79203F4050AA0B5738ED638
04380D2E13E060816E3421AEA1DC12A32CB72F12790D0531C0BCCFA2CD650E69
BF11A8A0B494E5997E2753F4DC7CC615950DE260CBFC81E5B438A30B9D1AD997
BAB5450F1B8057E9A08FDF0718C939D7BA23C215F3022BCED0B9A537C28F8186
7362D2D294B15570F2321017B898104E0838A83FEEF95313323561CAAA94467F
81A81D82605DBD0767EF388643166EBADEB4C9811852DF8D45F955B91E9BA5C8
9189E75A5728690EB0914B68BFB3277365BBB1F1EFD1E389E99F88EB021EE238
5C968A7A43FF69> |-
/m <1C60D8A8C9B59F85DBED304F205490E957BA80A7CE923989279D287A3DB9
7E93876C271A2C24EB89F39ADD151395A0382BD3CF306DD3500A44E02FD331FF
5F6833EC31518A35916D67D8BC58A88311498E0D46D0A13D75376763AA882382
C8F3547A34FF4AF65F97E4FFE5FF22577B793A63A62C968C68E5E59ED9FA05A5
2E2BF36653087848C6B445B278603F0C520FEA9021ED3917FC5606815DEFC9D7
9B> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LBAXSY+Helvetica-Bold /ADVAAA+Helvetica-Bold findfont ct_VMDictPut
/LBAXSY+Helvetica-Bold*1 
[47{/.notdef}rp /slash /.notdef /one /two /three /four /.notdef 
/six 10{/.notdef}rp /A 14{/.notdef}rp /P 3{/.notdef}rp /T 12{/.notdef}rp 
/a 3{/.notdef}rp /e /.notdef /g 5{/.notdef}rp /m 146{/.notdef}rp]
LBAXSY+Helvetica-Bold nf
LBAXSY+Helvetica-Bold*1 [9.96 0 0 -9.96 0 0 ]msf
36.84 747.54 mo
(14)
[5.51983 0 ]xsh
%ADOBeginSubsetFont: BLQAAA+Helvetica Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /BLQAAA+Helvetica def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (Helvetica) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 77 /M put
dup 82 /R put
dup 83 /S put
dup 86 /V put
dup 177 /endash put
def
/UniqueID 43142 def
/FontBBox {-166 -225 1000 931} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 718 737 523 538 688 703] def
/OtherBlues [270 281 -220 -207] def
/BlueScale 0.0437917 def
/StdHW [76] def
/StdVW [88] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/slash <1C60D8A8C9B854D08E823E34E98D69F07852149357481CB22577590C
C2367BB833216B> |-
/zero <1C60D8A8C9B7EF32A47D2AA10CC01BD74F486262CA3CBA2A0BB3D25A3
A094F02BD79F42A0A236349C843943C6914F47589F3954D0C018D1FE33AE62F4
AD6F7BB100F692008FA5232B949E365DCD3CA3A3EC8285D42D2BEFA> |-
/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE0295
8A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-
/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23
A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F
7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA
2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1C
B4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDD
AD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8
950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27
315B3507F9DAF305> |-
/nine <1C60D8A8C9B7EF32A4731A9DB70B9490730918F3CC8A6CEFA5DBCDDDD
5B8FF631E5F2E3BEA7592C5DB8D17DFB2B2E4B0DA0B1CDB7CBCE67C1382E1BCA
B1CA0DC367CB2D59D0DA1A7C85131B5D767099977B59D2EE9CD09CE6C2F22826
E56502A470206F3EAA46E7E3E86C6D4D4258A80AAFAE933FB6A3325CB283E> |-
/A <1C60D8A8C9B64EDFA3F30AE40D82621F0FCB1DE3B8FE08B0132A2CCBB252
5814D0E06433BF12343DC9A9AB3FF78B46F8CC42B8A00C8B5EA738952A496397
7B57B3D18EEA0F5BB95C06FA8CB59D2805C2A2BCC67181B967> |-
/M <1C60D8A8C9B6B41CEC8259157919DBFFC0387AB03B82A38E0BA7FD31C0C9
A9756DFD39FD4BD480155A68D2E08D21C20BC3CEA4B95133EF2A2BF8F5EEFAD3
CF67237CDD989A41F7033AA8F7C11EFEE59FE8A38BB05EE69AE4B6EB65A6C23E
8D337DDC21023E73B350C7A7BCDD414F20B8F03B485777C7ADB7DA43B9> |-
/R <1C60D8A8C9B6079F1E4D8C18B43D708E4867E1D5DF87FFDFDA59C87E0DAA
C2980D72F189A927C7607FB955553C4E4B82FD6E924592BF3E5BCF70BD67C10F
BFCC049000E196CAB909156B2D7E5AD89BC25B1EEB84D6826D9E71A848125076
4CA7F6941E7E5A3FA03A6C1E3D8CFFF2F1E46B6C85653A4E4F151EE538164F20
ED0EF4C4DDC2D3E61A88EDB425566879BAB1370C523490E7EC92ECF6338DD3> |-
/S <1C60D8A8C9B64EDF7B9A268599F9CD8C4143A0E6DDDCF2A0054E6BC2F76C
64CEFA918C4E8C0A17BF13FEEAAFA3992570A221EB29D874F6372AE0D5147B81
D12AD995155CFC83207D350E887D4FEBD8084F48B3CC6796B4C5DD7C46D97C8A
BA91E1F709B61796E472D133E1651C4F266523B863949A58DEF11F7CBF27A2FD
BD87B6510960625D3CE0D8C2C732863F2494E0D388028B3EF679DC21468C0061
1AD0512E72DA1636CB7A> |-
/V <1C60D8A8C9B64EDF884A7D8E901D2F4533C16A14B652E2E01CB0C4A82BD4
AE8D918B8A9135C63318FE8084BF228A8B1FD8F9> |-
/endash <1C60D8A8C9B7EF322B918448B7160BDD44CB8458F60F408D1D231B5
250E757> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LBAXSZ+Helvetica /BLQAAA+Helvetica findfont ct_VMDictPut
/LBAXSZ+Helvetica*1 
[47{/.notdef}rp /slash /zero /one 6{/.notdef}rp /eight /nine 7{/.notdef}rp 
/A 11{/.notdef}rp /M 4{/.notdef}rp /R /S 2{/.notdef}rp /V 
90{/.notdef}rp /endash 78{/.notdef}rp]
LBAXSZ+Helvetica nf
LBAXSZ+Helvetica*1 [6.96 0 0 -6.96 0 0 ]msf
509.34 760.08 mo
(8011MS\261AVR\26108/09)
[3.83981 3.89899 3.89899 3.89899 5.8269 4.62006 3.89972 4.67157 4.67163 5.05432 3.83984 3.89899 
3.89899 1.92029 3.89899 0 ]xsh
LBAXSY+Helvetica-Bold*1 [18 0 0 -18 0 0 ]msf
79.5 748.44 mo
(ATmega164P/324P/644P)
[12.9924 10.9943 15.9985 10.0044 10.9943 10.0044 10.0044 10.0044 10.0044 12.0025 5.0004 10.0044 
10.0044 10.0044 12.0025 5.0004 10.0044 10.0044 10.0044 0 ]xsh
291.48 747.66 mo
612 747.66 li
612 740.64 li
291.48 740.64 li
cp
f
576.54 755.7 mo
612 755.7 li
612 719.7 li
576.54 719.7 li
cp
1 gry
f
356.52 39.54 mo
360 39.54 li
360 32.52 li
356.52 32.52 li
cp
0 gry
f
360 39.54 mo
579.48 39.54 li
579.48 32.52 li
360 32.52 li
cp
f
%ADOBeginSubsetFont: BLQAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LBAXSZ+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D00D> |-
/parenleft <1C60D8A8C9B81F2C36CCD20CF8942181AC7F4474F2382F7D30DE
700E9D560AD8BD19EE22EACC9412684566AC63B0B33E5FC85E602E759FFC49BF
47306AE7BD9165A4E1D3> |-
/parenright <1C60D8A8C9B81F2C36CCD20CF894218194033859F410DA60583
B3351294315C6F5C4ACE205E4813D6F508658462783E35F08D53213E9F0ED798
4671681D402251A6FDC72> |-
/plus <1C60D8A8C9B7F374DE58F5ABE0E6A1C8086FFC4A7060090561B9BE7FE
714A2C2FBF06697E6E664F3AD2D192AE97A81E741581A97B9E2E2> |-
/comma <1C60D8A8C9B854D088E8E1B4A929C4983E8B0FE499C85D44EE9545D9
C727E0361A8C250C8B12674AC7> |-
/hyphen <1C60D8A8C9B81F2C3AC7E044D0946E6D2305FBC1A5806554FDBB52A
75CA669> |-
/period <1C60D8A8C9B854D088E8E1B4A929D159FDB35EBB0A92B2CB5440> |-
/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A7
7988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE
33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C3
12D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1
E4FEB02B613916D7> |-
/three <1C60D8A8C9B7EF32A47D2AAF8B27A6BD3F3BCF7FF319E4220BC810B4
CADF2216B3056307D1DA8A73EC78180A0FB2BB871CD9EF56ACC1CD52B6B9416F
F0F6CC105DB9F235573EA49040A80A9111450BB0A3B96123E69E500815CFC7CF
564552067BED0784FB65E0D025591F822D7ED553FA9ACD59EB8A476CA7B6AD8E
268F493C2C91D99FF49648FFC2772170FE015289F1DCCFD377216FF1F5ADD3B4
D09EAA924593AF3FAC43C888F801B765C80AD39E3E3AC8> |-
/four <1C60D8A8C9B7EF327C102745695739194BB3002578E9A13B5CE2A74FD
48894F71187E1172491C0FAAFD20337D17EB38BB138C76C05944382F2B261170
2A5DA745406DEB5C33C> |-
/six <1C60D8A8C9B7EF32A47D2AA03CEEE9DDB4E70F59B3EF1D68E8E9A23C5D
895B21005DF84DCDAD3DEA99AA84A6BB56E722B7BE0470ADA08603495E8D20C7
0508E0EED46F555AFE92330EBC2BA124D26816A87E77C3C9365D5C56A7582E9D
55AF56FFD9160B804C4E62EC754D6510790643CD8FBD09F0BA1748DD18E27797
64DBD296AF281D4117BA4D> |-
/seven <1C60D8A8C9B7EF327C10274AB025EB21CC3BB5514D7A792BCFB0F254
664FBEE7353071728231DCE5A09FB578C9A63F4547F469AB016F484730> |-
/colon <1C60D8A8C9B854D088E8E1AEAD30C92AB0D98EADF1DE7A77B7CB74CD
7251B14F346AB2E7541FDEE4> |-
/equal <1C60D8A8C9B7F37489A423B7922B77D906A279AB6FAD9AB21E66A20D
4B6DFF96A7A07589D23B89624F9C4EC97F6FAE> |-
/B <1C60D8A8C9B64EDF8861093A50D70CE704C3B99B255E57C25F5628D6A25D
CF329FDC490B240CA8E3263684788E9E559211DF7A652BCEA6E7473D11540293
3A862D3C0BED9681856F5ACE8B339645A6A4CED62CD1A26855F2D51956984EE1
3F47812E810D9E8C98922B6C1937C1681825270D4D77D4BBDEECB712B7702AEE
C61BE96AFEBE20DFCCFCC19F8646EA0A427DFBAA43CEB1ACB616853A6CD4C3E4
CEE20B743FFD4303148B5B4D479ED1038084D37CCEE34880877DCE43721DF888> |-
/C <1C60D8A8C9B6079FED21EC1DA43783C3C67A5FBA5FB885DEE16CDCDCAF1B
7E5C168D0377F501B09EEE06FA7720C35D9E5B5FBCE148C17092F43DAB7E2D94
E9FE9DCFFADEA91F9C52F49E3053420DCED72662293A521E028C39AF83F75FC5
4A> |-
/D <1C60D8A8C9B6079F1E08EB12991814F2BEFDD99E857D46CC83B089892D70
768EDFB737CEBE140DF668BA679C989F178F8C7B580D23B4B614D8D70F34E9A4
87B4AA37370316974673AB> |-
/E <1C60D8A8C9B64EDF885E9C70E86F4D6078E7D1BF0D69911FD55CAA5C46B6
C6C433175B8381217040BB42F142B1A0E1EA4F6BED24146D2DB65AFCA0> |-
/F <1C60D8A8C9B7D8BE41A64DA557BA3801C50A6D0B90DD03689D1958230FDD
078C54AD8D0DA7DD6F0C9EC4C6354485AE4B93FC66781C> |-
/G <1C60D8A8C9B6FF867A1E519166AD852ED2D238FC9FE1FC084F04D9E36004
B397AC0709489868433030C233EA40313B6770F2FBA6AC8B2414BB25BA59D5FD
807989151AA9C629866E3CE226ACBED3C073788232A7114C892B58478EAB25FD
2B5FAFB5A7A36C98166D31139DBFC4CCF79EAA40F2F350B8A457081F9727553F
EA93CA1BFD488C9BDF0A93497544EFC1E92BB497D5AD> |-
/H <1C60D8A8C9B6079F3517E07A2A32EE8D09F795FB6E9F11AE46C75AA31D50
B194B413469264EA3867DFEC1283FAD051B3C6B29B8DCA4E1CF3E914FCD7B445> |-
/I <1C60D8A8C9B854D0A3953AFD56E13A0A68A3547B5275504502229C694F14
98D4> |-
/K <1C60D8A8C9B64EDFA3F30AEA5DF4FD401A7F234D8B48713128AD4E4576F5
1EA758FCC04623E76F0392C65BD3153165595668DEA1A39FCBD3CCA6EA172D73
74581D5F> |-
/L <1C60D8A8C9B7EF3257710D8E45FDED8109BBDA794C5EEC6C4DCFCB68A628
CD21FC17F8D9EBEE> |-
/N <1C60D8A8C9B6079F1E210C2F9D6786425CC99EBE4B6CD195D3C159170B14
2780B60B004B88EC635D5140089E50EAFFA241767EA05CB13B768D326E39D0A6
3970CC75B69D7BE71D789A78E82369A15910> |-
/O <1C60D8A8C9B6FF867A21BA19EF0C570BB6C4AEDB905D3E548C322F786DA7
0CDAEFE3DEF4849E1D1588C3A22DCFB11573EC9A318A3B019A45D0FC4FCEE76B
AD39BBA1E526700FB4A11015D71862856C2D89337A110F371091E0B563CCFD9E
35D4> |-
/P <1C60D8A8C9B64EDFA3F30AE4AB14FCCB57D446AF805F45D1BE197D47C6C2
0943FECBF4EB404456C629F1F5342EEA681381C7461EF00E178F4482E2C7F7B3
9C94B8CCFF41619BA5DC67957F7F81> |-
/T <1C60D8A8C9B7D8BE41A64DAB684ED090D9F4D4439340AD4301BD70587A67
BA95C799E46FC7C8D88E9FFD990A> |-
/W <1C60D8A8C9B5D6EF151AEEAE3875D8E2A5C951C25CCAE17076987B69AE17
3FEA1B3C427ACE911C16E8FEA8B284EF3D308129F86EF60E943E71DF041FBC7D
AC2168561652391785B0FFA7DC94A36F5D794FD1C69C6FAE6A3307BC346A> |-
/X <1C60D8A8C9B64EDFA3F30AEA5DF4FD0964F225BEEB0A26F3041A5D25F418
1E974715F43550AFAF1626D1ACDB54348F88220A55F166A4CC3AF18400219AB9
D059787D58E62124AB7E13> |-
/Y <1C60D8A8C9B64EDFA3F30AEA5DF4FD6075C68D37A5EFE56A7A579DD5B22D
729834C526C6E6C6E35A057355874F06D5E8FCC1DF2F8A7981335C> |-
/Z <1C60D8A8C9B7D8BE6A3E2AEEF2640CE8DB5262F2C5EDEFC618050D7ABB3F
3E1430E049671B0B41552431356C5F84A5F24330D364E5> |-
/a <1C60D8A8C9B7EF32A0B922DB529D70E6EA400CC7CAD541AB907F903F935F
123595D5AAC76B7423BF56DAA953AABB30D3C158CBC49165B8067C6456A899E4
3A57DF6E4E8AB8002AB2FFE795F17DA3C0165F34038912EBD94962135F448EB9
A90E2C7E6E7F31818C09B9ED66D47DE4FCBEA13796BDA6590474BAAB3926D1FD
12190612E017AA015628D2E79EA8BD9BA8890ADD2020DB8778488A172689E9B4
E5800C4FC32EAC7FC1BF3EF2690C8233D8F11C29611AE962> |-
/b <1C60D8A8C9B7EF327C10274A017D50D0B79D520E8A6202A86E3798B68C88
3F2A00A228A8D3BD4B72A579020E8C18FEDCA09FC0E3429D99B1C24ADCD0AC4E
EFC3A966737F961C9202D8EDD44B44A693FE51414C15324869700E53C7B38758
7F8318D8232F82D503103EE5B820B0DF0BE22D1B4656A098694F40E8D44D99C4
61B751FBE10F9873814343E4DE07A8CCC094D2DC9819E5D7C44D788CB7F4378E
064E14049D09F8686693B208AE85DDCE327373F5E246A50D857DC427EA> |-
/c <1C60D8A8C9B7A73D329D14FC5ED04B22BEF11360501EE1499496C476E815
0EC3BDD954DBEADE8E9C14890D9CD9DB76F31AE11D3417AD4A86CFF13437B5FD
BD7396F24B7F94C12C61C297C734538546A29AF94483114D66> |-
/d <1C60D8A8C9B7EF32A0BAF021E6128CBCD055133316849E00736C24057076
3FFBEAA146CA9297CF7D3847B7CF1BE84FB2A37E5E555C53A806DE551FF53E55
D61D00981406A03EADD7AE8D33EF7217E17615CDCA7C18A3E3E1E13B179B4308
BD250D1E864A8A86D9BF7E50C7EC9522C99BD55A4F1A52E8A636FC1CA9AC7BFB
9D973089D39AA376C816268115093BC648CEB265DF83> |-
/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C202
1D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495AC
A0439C9D3724916322C63953AF89B727882819DFC99951D61BFC3A47117C933D
D3648A021C5AF4E9570A53> |-
/f <1C60D8A8C9B854D0A3953AFC308C88F2CB7B77611DE17001C91B65CE86C8
891C39A4DBCDDE1373931B89EF13785E617F99570B386BE99D1A576D0D1701D2
F253DF8B3192240780F3E221EB68A6> |-
/g <1C60D8A8C9B7EF3227AC78F20225D02AD1F5838626D1D2CB26D9A686345F
DBA7E6AD7CBBFB0968E5439577010C655F74DB6EC4A53F96DD554986565E4345
C3B0DB42345596269AD0BEDF0DE0FF0CEC2214730A572502B5B1C377714234C3
B835458280E4747C6986CC44F3A27E4CCC92606F912C02778569997A6186F8A1
606F089477CA3B9FEB77CDBA1E20BDD3E0AF3FDCB15E3FF07A1424B7C6719CE0
9398ACEECAAF6B2812773D6272899C> |-
/h <1C60D8A8C9B7EF327C10274A017D50D0B79D52072757441F46A9E3044975
4F52968402CD3736F71D6E09A15E2046342DF42A864D37373E0A213DE941C6F0
11296A017FBEA0AE0137A10664047E> |-
/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D7
2A7354004DF70944005F20755FAB3631> |-
/k <1C60D8A8C9B7A73DEE9439F98A6760116E53D02CD3639A4E206C0D442471
19E04D95FA72AF4CC3263E0911BCDDE695C914CD0C4AFF3DC9857E6995DD10EA
D2EA0AD1> |-
/l <1C60D8A8C9B88C082599D5E898B54D665A852C4BD97DFF418DFF9C25960C
0EAF> |-
/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103B4C2937F43F706F
E45E46BB4B168951587EB26A51BD9E5D6D15548973928DA7BD71E5C6A2EC7542
58679A8719AC099ECB167292DC3AC16D6A6399789AE1244C2D9A7EDD1242D52D
A81BBE025DB4544A719A686DB3A0393D2301EEF964B14766F22C4A5827> |-
/n <1C60D8A8C9B7EF327C10274A017D50E5277BF0D0EBCB370A96BE9DA56325
4EC441C4BC3817B6ABCAA45C3FADDF2A0C1FDBAFB2BC83F47DAFA77A786BA902
BA43197292E50CF57803A333B50FFCC316B4278D48D0702F544078D86E929B14
A38322C9A0C5BF9B9E5C> |-
/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2
CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089
D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-
/p <1C60D8A8C9B7EF322792C3BF0D38904A73F4440F6D92D5F5AE09CC018066
468E681543C8F047ACFD615B747546B5480444F746C2E0CD698A8961C13AF2BF
3940EE05278AAEFC066B11F108A32A247BB7A1777E1A71A35D0F71427779DCE4
A1F61E27FEB716A84B084E0A293D7F37477EB4DB407CE06D6E55EF820764AC64
86> |-
/q <1C60D8A8C9B7EF322792C3BF0D38904A73E52CCAA9981FED095148B9F708
CE581F33191456880D8A90EF89A2F1472B9936B81E3D8BBE656A066490E42FC3
597115A784448BEC12776A286D487219D520FD71B02D7F3A4185562EBE5EB1E3
D95E6D766D1B3D2C5673CF3D68ED7D581AE4EA5F32BEE3D4081FE31D3A1DA8A0
97> |-
/r <1C60D8A8C9B81F2C6DADD03096566F18A44C12756941A411C99A198CC8D4
5A7D128B0AC7E4BF3CECAA38DF996F9A6C482DB9F23D69FD46524CB92965AC6F
9D4D369C7898CDC92C3F38BFBF2273026F7CCF0E2F294158F88D37A82B162157
72> |-
/s <1C60D8A8C9B7A73D329D14FC63C56EEDE3F9A8460FEBA256258B5C852281
3839FED92DE3C47FB08E82DAD239D7D316E4DB98949C40B450B767A1D87B0ABE
0011CCD021B6229F454B1FF5E328C5CF8EC8EFFD81D3D2892F60438084072E44
AFC3709CC245EE12E4AC5F88F724A26A331F44C1FA0DE44324AECA> |-
/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C
0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B583708835
3D9095E679DCF29A> |-
/u <1C60D8A8C9B7EF325758E576B7BAA1EFA82EFF7976BE67CE506354F22E3D
1B078EDAE7715C61BE16B3CD4B647E2C68818E308CF0BE659E73BA193580128E
99771A6AFDBFEB4E9486BE6CBE5D0A068E2F3382B692BCB6E47C62554398C9E5
6946239346863C679F19> |-
/v <1C60D8A8C9B7A73DC53FF2C839B947F31C11DB63CB8CC0B0E0518E01B2A8
090086BA063BC631F5BCB6255A1F02FF856D> |-
/w <1C60D8A8C9B6079F3517E075E924A0EC154FF14393B5B0575475B515F428
794F8D3565E3C687B605880F5C4904C3BD11AE4A60F2EA0654E6A4CE7382D133
3411130E26BAF080637F66342F1D49510FE0B71E35474FA143> |-
/x <1C60D8A8C9B7A73DEE9439F61CF83FD6F0AADDB8373458EFEDE4BF6C4615
5F8370F02E9CE5FFD24DBE7D153354FABD4F844978ABB054761731A2B93E507F
E62552012BB1EB5E1E3EE678332D9E> |-
/y <1C60D8A8C9B7A73DB586573D0157E99900164D3426B7076627BC2EECA012
86D768DC747555489A92E6150F2562090A782510749223A2D01B0EE6374EEA8F
B8F18250484D2C6B565CDCA8D95B100B7B1E0289ED25E0E350438F56B28A332A
DDF034CB8EDC264C3ABAA85278C66F3E4B6419> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LBAXSZ+Helvetica /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 43 /plus put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 55 /seven put
dup 58 /colon put
dup 61 /equal put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 71 /G put
dup 72 /H put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 84 /T put
dup 87 /W put
dup 88 /X put
dup 89 /Y put
dup 90 /Z put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 113 /q put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 118 /v put
dup 119 /w put
dup 120 /x put
dup 121 /y put
pop
%ADOEndSubsetFont
/LBAXSZ+Helvetica*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright /.notdef /plus /comma 
/hyphen /period /slash /zero /one /two /three /four 
/.notdef /six /seven /eight /nine /colon 2{/.notdef}rp /equal 
3{/.notdef}rp /A /B /C /D /E /F /G 
/H /I /.notdef /K /L /M /N /O 
/P /.notdef /R /S /T /.notdef /V /W 
/X /Y /Z 6{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /.notdef /k /l 
/m /n /o /p /q /r /s /t 
/u /v /w /x /y 55{/.notdef}rp /endash 78{/.notdef}rp]
LBAXSZ+Helvetica nf
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
41.4 93.48 mo
(BRVC kBranch if Overflow Flag is Clearedif \(V = 0\) then PC )
[4.01165 4.3416 3.96004 49.8 1.68 58.56 3.96005 2.00754 3.30002 3.34558 3.00961 3.29999 
1.67999 1.34161 1.67761 1.67999 4.67761 3.00958 3.30002 2.03995 1.62 1.38 3.29999 4.32001 
1.67999 3.67557 1.34158 3.34561 3.29999 1.68002 1.34158 3.00961 1.67999 4.34158 1.38 3.29999 
3.36002 2.00754 3.34561 96 1.32001 1.67761 1.67999 2.00754 4.01163 1.62 3.51361 1.67999 
3.29999 1.97998 1.67999 1.67758 3.34558 3.29999 3.36002 1.67999 3.96005 4.32001 0 ]xsh
%ADOBeginSubsetFont: ZJXAAA+SymbolMT Initial
ct_T42Dict begin
0 -0.219 1.109 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /ZJXAAA+SymbolMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3284f3e872000000cc000000566376
74202ac4fb8500000124000005046670676df530c471000006280000050f
676c7966b06f9754000016580000038868656164c5ad5c6500000b380000
0036686865610f2d038100000b7000000024686d74787750493e00000b94
000002fc6c6f63614fe24f2b00000e90000001826d617870020305a70000
1014000000206e616d65ff9a511500001034000002ae707265707e0fc165
000012e40000037167646972000000000000000000000000000104cd0190
00050000059a053300000125059a0533000003a0006602120c0305050102
010706020507000000000000000000000000000000004d6f6e6f0040f020
f0ff058cfe460133080b01c280000000000000000000055d0031054c001f
054c001c0394001b0000ffe10000ffe10000ffe4fe59ffed056b0023fe6a
ffdc270f000000b4000000b4000000000000000000610025005e0029004a
00c200f000be012a005000c0ffd0006300580277002d004a008f00b700c0
00de004400640002001a017c0020ff9c008c0026008300a00039041affb5
004c00e8080f00160024003a016f000600150067009e01dc0049004b002d
003b00470089007200470051006700f7013801dc0001000a005d00610094
009b00be00ce00df00190026002e00d6010701f7ffbb004300530063007b
00b900de0542058b0013009100a700a900c100e5012e01a401ea03eeffb5
ffccffeb0026002900310036005b00620062009200a100a700a700cb0223
03a3ff1aff7bffa8ffc8001c004400ab00b400c100c500ce00f601200156
016302a60379fefaff6effab0000000c00150024003a003a0041004c004e
007400a500ce00d600fb0109010901820220023f0263fe11ff170007001f
0020002b00530055006d007e0088008d0094009a009f00af00e8013f0168
01cd01ee020d028002bf0550074e074e09bffdd5ff47fff6000c000c0021
00290057006b0078007e009200930096009a00a100a500c400c400f000fd
0136013b013e01490152018f018601a501f8022b02db02fb030e030f032c
03590360037c03e203f90805fd4ffe97fed0ff50ff78000100010006000a
0025004300440054005c007000730077007c00800088008e008e00900091
00ab00ab00b000b900bf00bf00c300dd00e300e300e600e800ec01020105
0109010a012a012a01300130013b0140014a0155015f01670173019701b6
01b801be01c501ea01f4023402360239024f0252026702700274029002b0
02b102bf02e402f302fb033a03450373037f03ab03c203c803d203da0400
044a046104690475049404b004d504f004f404fe050005230523052e0561
05a0fda2fe4bfe5bff26ff3bff62ff8dff90ff90ffe80007001e00250026
002700440050006200630066006700700070007100710079007e00850091
0096009e00a100a100a500b600b800bc00c000c200c500c600d000da00dd
00dd00e200f700f901000102010501150121012d01310136013d01470147
015a01680176017c0180018e019a01a501b101b501b501c001dc01ea01fe
023902560259025e0276027c028d0297029b02b902c002d602db02ff0306
030f03180347034b0357035b035e0374039603980399039e039f03b803c0
03c60402043a045004720483049004a204af04c704d304dc0530053b058a
058a05b005b505bd05e60612061b0634065306b80706087908e708fe00b3
00c700b100b5000000000000000000000000000000000188011001b100ad
01e70304038002cc0258020b02d6018204cf01270274023c0100058e006e
00f202c0021d01d2023701570363015a002500820166015b009d031c03a2
034a00cc056e0153035001640053049700fc05c30061058a02b20302058a
03fd01f902ab0068008e026bfda9ff59010e005301a402a600ab007d003c
0029041a00d6023904b90125022902bf07ae01b8003e07060339033a080f
07ae01a403e300000053080f01ea006103e2004c00e102a6035202a6080f
00e601dc074f006e00fd03af0000007d003e01a4fe1100a905590260011c
02a4014cfd83fdd8039bff9f011902e20000fd11fd41024301b60155ffaa
02be00ef0097fef904e000be02db005501dc0063006b007800f200530077
003a015600fc020d0029005300610070403f3f3e3d3c3b3a393837353433
3231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615
14131211100f0e0d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b0042651582320b00d44235921212d2c20204518684420b001602045b0
4676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c
00b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a23
4445b01923442d2c2045b00325456164b050515845441b2121592d2cb001
43632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b0074365
0a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58
b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d
2cb01243588745b0112bb0172344b0177ae41b038a45186920b01723448a
8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d
2cb0022546608a46b040618c482d2c4b53205c58b002855958b00185592d
2c20b0032545b019234445b01a23444565234520b00325606a20b0092342
23688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a545823
21b03f1b235961441cb114008a5279b31940201945208a54582321b03f1b
235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d432343
0b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143234365
0b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b000
525823b002253823b002256538008a63381b212121212159012d2c4bb064
51584569b00943608a103a1b212121592d2c01b005251023208af500b001
6023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f5
00edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb0
2b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b80241
23701020b802414520b0005058b00161593a2f182d2c21210c6423648bb8
4000622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d
2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423
648bb84000626023212d2cb4000100000015b00826b00826b00826b00826
0f10161345683ab001162d2cb4000100000015b00826b00826b00826b008
260f1016134568653ab001162d2c4b53234b515a5820458a60441b212159
2d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c
4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c
4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c64
23646164b807085158b00425b00425012046b01060482046b0106048590a
21211b2121592d2cb012435c580cb00425b00425060c6423646164b80708
5158b00425b00425012046b8fff060482046b8fff06048590a21211b2121
592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b
2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b0
0426024b545a8a8a0ab012435c5a58381b2121592d000001000000028000
65f2eb1d5f0f3cf5081d080000000000a348bc3b00000000b24cd4e1ffff
fe3e08e7080b0000000b000100000000000000010000080bfe3e00000856
feabfc2e08740001000000000000000000000000000000be04cd00670000
000000fa00000200000002aa00e405b40061040000250464005106aa0047
063900480383003a02aa005402aa002d04000091046400250200006e0464
0025020000910239ffff0400004a040000f00400002c0400005304000020
04000062040000590400004c0400007c04000051023900ac0239008b0464
003c046400250464003c038d00580464002505c700140556002205c70012
04e5001a04e30027061b004804d3002305c7002602aa0033050c004e05c7
0025057d0014071d002505c7ffe805c7004c0625002305ee004a04730026
04bc003804e3003b05850016038300470625003805290042065c002504e3
001602aa00a706e7016a02aa004a054400250400ffef040003da050c0054
046400790464004603f4004503830049042b0047034affff04d3002d02a2
004304d300450464001504640031049c007c042b00280464005804640037
042b00590464006904d3004e0383002b049c004705b40041057d005003f2
005b057d002f03f4005b03d700d3019a00a403d700d60464003404f60013
01fa00790464003c0156feab05b4003604000000060600b9060601300606
00f7060600f60856002907e5004b04d3005d07e5004b04d3005d03330066
04640025034a00690464003c0464007905b4006603f4004103ae006a0464
0025046400250464002404640034080000e604d302390800ff8d05440020
069600e4057d002d065c005e07e501820625004e0625004e069600610625
004d0625004d05b4003805b4003705b4003b05b4003b05b4003a05b4010a
05b4010b0625005305b4004a0652006306520063071f00320696002e0464
00540200009105b4003004d3003004d300300856002907e5004c04d3005d
07e5004c04d3005d03f4002f02a200410652006306520063064a002a05b4
002b03120053031200530312005303120000031200000312000003f401a4
03f4001c03f401a403f401a40652007502a2003e02310000057d02a6057d
02a6057d00430312ff930312025d0312ff93031200230312028103120023
03f4001c01a4001c00000032003200320032003200320032003200320032
003200320032003200320032004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c00a200a200a200a201030103
01030103010301030103012a012a012a012a012a012a012a012a012a012a
012a012a012a012a01c401c401c401c401c401c401c401c401c401c401c4
01c401c401c401c401c401c401c401c401c401c401c401c401c401c401c4
01c401c401c401c401c401c401c401c401c401c401c401c401c401c401c4
01c401c401c401c401c401c401c401c401c401c401c401c401c401c401c4
01c401c400000001000000c0006700050000000000020010002f00400000
00ed050f000000000000000a007e0001000000000000007f000000010000
00000003000f007f0001000000000004000f008e0001000000000006000f
009d000300000409000000fe00ac0003000004090001001e01aa00030000
04090002000e01c80003000004090003001e01d60003000004090004001e
01f40003000004090006001e0212547970656661636520a920546865204d
6f6e6f7479706520436f72706f726174696f6e20706c632e204461746120
a920546865204d6f6e6f7479706520436f72706f726174696f6e20706c63
2f5479706520536f6c7574696f6e7320496e632e20313939302d31393932
2e20416c6c2052696768747320526573657276656450454c444b412b5379
6d626f6c4d5450454c444b412b53796d626f6c4d5450454c444b412b5379
6d626f6c4d5400540079007000650066006100630065002000a900200054
006800650020004d006f006e006f007400790070006500200043006f0072
0070006f0072006100740069006f006e00200070006c0063002e00200044
006100740061002000a900200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
00200070006c0063002f005400790070006500200053006f006c00750074
0069006f006e007300200049006e0063002e00200031003900390030002d
0031003900390032002e00200041006c006c002000520069006700680074
007300200052006500730065007200760065006400500045004c0044004b
0041002b00530079006d0062006f006c004d00540052006500670075006c
0061007200500045004c0044004b0041002b00530079006d0062006f006c
004d005400500045004c0044004b0041002b00530079006d0062006f006c
004d005400500045004c0044004b0041002b00530079006d0062006f006c
004d00540000411500120227022702260226006f01160001005f01160001
004f01160001003f01160001002f01160001022fb22f1f1fb8022eb2a01f
1fb8022cb21d291fb80224400be11a1f3127121f3c27291fb80217403b6c
291fe0aa191fe1aa191fab27321f883c321f833c321f2f3c321f7627321f
3c27291f27aa291f6f276f6d6f866f87043700161600000012110840b801
e3b655140914093790b801bf40390790bd0790b307906707906407905707
904607903607902e07902b079025079024071408120810080e080c080a08
0808060804080208000814b8ffe0402b0000010014061000000100060400
0001000410000001001002000001000200000001000002010802004a00b0
13034b024b5342b0382b4bb807ff52b0372b4bb007505b58b101018e59b0
382bb00288b801005458b801ffb101018e851bb0124358b9000101ff858d
1bb9000101ff858d5959014bb0c063004b6220b0f65323b8010a515ab005
234201b0124b004b5442180016763f183f123e113946443e113946443e11
3946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b
2b182b2b2b2b2b2b2b2b2b2b2b2b2b4b5079bc001f01750007001f0174b3
071f93072b2b2b4b5379bc00900175000700900174b3079093072b2b2b18
1db0964b5358b0aa1d59b0324b5358b0ff1d5901b341b5407b4565234560
23456560234560b08b766818b080622020b140b54565234520b003266062
636820b003266165b0b5236544b040234420b1417b4565234520b0032660
62636820b003266165b07b236544b0412344b1007b455458b17b406544b2
4140414523614459b9004e0162b12a8e456523456023456560234560b089
766818b080622020b9002a01624565234520b003266062636820b0032661
65b80162236544b02a234420b14e8e4565234520b003266062636820b003
266165b08e236544b04e2344b1008e455458b18e406544b24e404e452361
445945695342014b5058b108004259435c58b108004259b3020b0a124358
601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59b00c
2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b0
0f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342
002b752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7373737373001845694418
456944435c58b9ffc00280b2121f322b5900000000>
[905 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 152 109 <00010000ffe4074f03fd00110066401f65006503770387039703a7030606
070f0e0a0b030f4b01001d02074b030003b80231b607011a1307a606b801
aeb30a0ea60fb801aeb70b0b0a1912213f182b4e10f43c4d10fded10fded
4e10e64d10f63c002fed3cfd3ced1239390110c910c93130015d01211521
1616172326002735360037330606015005fffa018f72365075fea4668401
3c77503978022161a4b3859001283a384b01139187bc>ZJXAAA+SymbolMT AddT42Char 

1 0 3 <> ZJXAAA+SymbolMT AddT42Char 
1 0 0 <0002010000000500050000030007003b401e06076302010005046303000a
0605630303021a09070463010019082938182b4e10f43c4dfd3c4e10f63c
4d10fd3c003f3cfd3c3f3cfd3c3130211121112521112101000400fc2003
c0fc400500fb002004c0>ZJXAAA+SymbolMT AddT42Char 
ZJXAAA+SymbolMT /CharStrings get begin
/g109 109 def
/g3 3 def
end
ZJXAAA+SymbolMT /Encoding get
dup 32 /g109 put
dup 33 /g3 put
pop
end
%ADOEndSubsetFont
/LBAXTA+SymbolMT /ZJXAAA+SymbolMT findfont ct_VMDictPut
/LBAXTA+SymbolMT*1 
[32{/.notdef}rp /g109 /g3 222{/.notdef}rp]
LBAXTA+SymbolMT nf
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
395.22 93.48 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
401.16 93.48 mo
( PC + k + 1None1/2)
[1.67999 3.96005 4.32001 1.67999 3.52798 1.62003 3 1.67999 3.52798 1.62 55.68 4.38 
3.29999 3.35999 54.9 3.36005 1.69196 0 ]xsh
41.4 102.96 mo
(BRIE kBranch if Interrupt Enabledif \( I = 1\) then PC )
[4.01405 4.344 1.68 52.08 1.67999 58.56 3.96005 2.00995 3.3 3.34799 3.01201 3.3 
1.67999 1.34401 1.68001 1.68001 1.68001 3.29999 1.68001 3.34801 2.00995 2.00996 3.34801 3.29999 
1.68001 1.68001 4.01404 3.3 3.34801 3.29999 1.38 3.29999 115.68 1.32001 1.67999 1.67999 
2.00995 1.67999 1.67999 1.62 3.51599 1.67999 3.29999 1.97998 1.67999 1.67999 3.34796 3.29999 
3.36005 1.62 4.01404 4.34399 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
394.56 102.96 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
400.5 102.96 mo
( PC + k + 1None1/2)
[1.67999 3.96005 4.32001 1.67999 3.51898 1.62003 3.01498 1.67999 3.48001 1.67999 56.34 4.38 
3.30002 3.35999 54.9 3.35999 1.68298 0 ]xsh
41.4 112.5 mo
(BRID kBranch if Interrupt Disabledif \( I = 0\) then PC )
[4.01225 4.3422 1.6782 52.08 1.68 58.56 3.96005 2.00815 3.3 3.34619 3.01019 3.3 
1.68001 1.34219 1.67819 1.68001 1.67819 3.3 1.67819 3.34619 2.00815 2.00815 3.34621 3.29999 
1.68001 1.68001 4.34219 1.34219 3.01021 3.34619 3.29999 1.38 3.29999 114.36 1.32001 1.67822 
1.67999 2.00818 1.67999 1.67816 1.62 3.51422 1.67999 3.29999 1.97998 1.67999 1.67822 3.34619 
3.29999 3.36005 1.62 4.01221 4.34222 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
394.56 112.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
400.5 112.5 mo
( PC + k + 1None1/2)
[1.67999 3.96005 4.32001 1.67999 3.51898 1.62003 3.01498 1.67999 3.48001 1.67999 56.34 4.38 
3.30002 3.35999 54.9 3.35999 1.68298 0 ]xsh
%ADOBeginSubsetFont: ADVAAA+Helvetica-Bold AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LBAXSY+Helvetica-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D00D> |-
/numbersign <1C60D8A8C9B7EF322B4EAC20C0679A92F6AAD0CF50452F4B7A8
C2F5B6CEAD8CCC81EE9E42811C0EB8AC7410D1978E4D4D19F8B77ABF1999D600
CA3FAA512FBBD58F02B46E3765A6D8077F3A215020B13FC3A95AD98B283328FC
B7D65D6DE734F0AACFD392A223B16E759499D33F7B2BD4ED0F77C5D9A0C43> |-
/hyphen <1C60D8A8C9B81F2C3AD0B0E9A313E244C8B357C46D9B6B8B485737E
2057FB05104> |-
/B <1C60D8A8C9B6079F1E21021F82EA7F7A31435010A538C84C74ECF8098981
C0B5BF242A1DCA5CE3A2C97884DFC17F62714226B8342BBE43B1C236B848F6DA
D8B1A83CCB9003DDE095565F71FD049FED4F0C3080B8E5C7842037D9D5FCDCE1
CEB524F2D72D976D20D844EF47A59FF26031A1B35E61B7F6B156DFE4EFA66434
D1CB027B2B1EC1B0ECCD5498BFBD8B8FB5C28BBFE92B087EB986C22713E9AD10
23259C9139FD2B0B84CFDF6AFC069A5B8368E961D17C824BB033F4C7E40B0598
13AA674E> |-
/C <1C60D8A8C9B6079FED37BD4297810A8F45ACF55D8D12634D77C5813B2BA5
52EE475FAE4879F3DD2AB20BD9945A4E8BDD86137D53ADEDD687C2FA6D371D3F
79E1AF8B21C167D0A1C13C40E843C9F29F0084A04288AE92384343780B0ACE2E
7B05F0> |-
/D <1C60D8A8C9B6079F1E21021F8DFEBC43D42A708489C7DE9C2A547484CC61
F625BCD0D05D23D83FD37C63566CFD3D632B2C7362B4C8B59094EFB4C9BBBA56
55012F391A5A4A127152E7BA46B3A700> |-
/E <1C60D8A8C9B64EDF8848CCF73D4277D726AD6058F694165E2A2CB1C1EB10
79905F8B7B0B8837025D68732518E0A712113FF7D9EF6C899EC76F60CCBE646A
C6BD5DEB> |-
/F <1C60D8A8C9B7D8BE41A64DA54F1041CAFA8003E90FAAD3AFEFB2B35892D7
DA35D646001C2EC6AAF61323D272A19EDE14BD4750A7EF9E29ADC8A12D> |-
/I <1C60D8A8C9B854D0A3953AFD56E13A2711DDCC5AD89F7135E194E27E004E
E8C929C12A> |-
/M <1C60D8A8C9B6B41CC7E939797865C145E43F931AC19F6BE6ACDDB6D19D73
31986EFAFD75D7A5B653EC4D98CAC1D9AFD60DC2F6E9931AC429FBBFFBFFA286
881E85D8E30A3A7E6E7E02F751FC06A2336E2D4606> |-
/N <1C60D8A8C9B6079F3517E07490032202E3565C1E79DF5E2CEC4A45528FC5
016B29120A3E353AAA58C8CAA884C65BAC48C2BF75C8B630A8C2AE2DF60F19E9
5CA77542> |-
/O <1C60D8A8C9B6FF867A376B705097D3DF2A09DD418C426287289928C624EE
A3A0AA5CD32985B403C4A705D174ACDF14F2551DA95FBC1C89EE4C51CB768A6A
99DDBABA0DAB09FDABEBAD1A9440E373139F78CFB64D66E43E3F4BCCEFFF> |-
/R <1C60D8A8C9B6079F1E488480F8E68E5DD28C4CA6F2FDB05A637E428CDEE4
C22721187778E5F2B25D958D16227514110DCE6B3233C5414B45808A9D8EF6F1
51BE915BBC23B9359B9BB6EC849CBE6D12FD40BC3365C05316335547AD48C457
A49D34DA9AE5416AC2C9569D67C306A93222297043166740A51DD29D1B1114DF
68EBDE0DB312AC26E786906787> |-
/S <1C60D8A8C9B64EDF7BB34086DE0E69D005A26DA4BA735FB798EA75D21BB5
5F6C759A94D7062788EE1818A2CA42627F3ECF77AE8E6E0C7E51D6A454D23A0A
9A7EEB64A70BEE97F45AA8B3E2371AC3DB82FF7E46221DB88F49D982D34C205E
2D12707FFEB990F6572BC32BF83CE5AE033213D02C9D3ABBBF509C642807ACD2
B8C0DCA6FB993EA33F866CDBD15C99D9850FE920C5F6B7C2EE42FD386D3385DA
4F71F4FA7DB0C17082384CFE> |-
/U <1C60D8A8C9B6079FED37B83A011931DC1977ACBC6966068B30CD81707B5A
34BF29FDCFE6B65E47EEB3833460F45B48B8D8A1A7500F8D135FF567512179ED
4B4926218477C5EA2656C91723844B6007> |-
/c <1C60D8A8C9B7EF32A1CB4643D9F758FE77E8D463BA3587C906C92C06DFB4
B5EA9664C3EB7AE74722EC172B56EF65CCA8FFF074C589B30756144CBE6731AA
5E6474FEDDE0262E202640C515DE0444A603F708E3C5E4E728C6CCB962ACA3> |-
/d <1C60D8A8C9B7D8BE9CC6FAB2DB847ABE04CAE7CAF18F66C0BBD51FE97C0A
303DD1757BD410028AB0A6B0D151DE51370F41EC0906FF9823A3B56FC4C5E195
9632791667AD20258ABD3FB2D692031CD3246B770B141196D1A3ED87FE61BBC8
BDE49762DDA99E5D99A7EC80CC7FBA3D3E9DB276FA89E5D888EF39CD6CF2A662
7805B514869C63EC1CDDCAA18718AE178F21AA780004BFE8D9C5F318> |-
/i <1C60D8A8C9B854D0A3953AFCCEC8366C1D9CC8ABF9AEF18FDFFCAC314569
F9907FC5583E9D03A4D019A6CF0F25B41305D6CDC0057657713A374168748F41
BCB7F4> |-
/k <1C60D8A8C9B7EF327C10274AF641B7D9FAD1311D427D569E62770192BFCE
8E44E713A3CDFC9CD55623D68170D37566F7D462DAED9EF152EBEA7B4D8AD73E
7ACD5713661BF766D5> |-
/l <1C60D8A8C9B854D0A3953AFD56E13A3C2277C895ED2230AD4B57AED4E6F2
F61F2CD118> |-
/n <1C60D8A8C9B7D8BE41A64DAAD50EBDD41CADFC55395F79E79D65C1305616
5B4B592635D62DE2A0394E5032302F5CFACECE059BF877A8313C2AACD1E23323
A6DC0569FC07221BACC79EF8100AE4A1FB5DDB16A4DD38E8CC77C17FB1D2CB66
0A3721D14AE87BD921727B4AFA4B53E9E311A5F7> |-
/o <1C60D8A8C9B7D8BE9CC6F749512707A5CB05AB5243B0645F9444C502F419
3FB356ABA45B4FA26E907D725C29EBD51C6E82BD7C0D8F7061BDD006EA19F724
8676AEE29D27B87199433A93CBAD6CD52EE44525E04315718039BB53845EEB> |-
/p <1C60D8A8C9B7D8BE1A134861007F288709A026F4EAD441D0DB9001EABE2D
B92C5255FB184DB483EADFB48D2A88F026A2DD6EDE516F48FD443804CF9B7403
384A077AD30002C76ABA036DBBD46EFDA92B4EE0B7CC2E41CE6F03D681AB67A6
943524EEC72E907786EFDF10215A97E25147712684BE980577BC11BFE0413A23
5E7ADDC08DE261A758229961668104357A71DDB42A5F330CD2DF0F> |-
/r <1C60D8A8C9B7361F55E947F94FA9A74271AD89AF0ACFDBA20EED9EF285A4
8659332E27E557A0A575DD525BBCE890D404508496BF16A92B81F66619D70402
C8D72AF76C7243E9544720CB7C4B40CD5D238237C30B32E563> |-
/s <1C60D8A8C9B7EF32A1C9A55715442669FEA39943230735B36BA1D69124A6
B1AA7B79900DEB09302A96DDB334556A0C50310E49F72ABD34086BE04C9F56C3
A992C64040DA71C798B57BE72592455CA5C09B1689291508F5F788120F16B56A
A673A954D30C862A8D3BDCCAC3E1B28A4D5BBF2647EF1C70B8C4A494C4A0815D
49B6D568AAAE5D2FC4870B0E463670A054A66F5523F4E6C46A91A707298504F2
A7DB1BB4A1307894F83CF1C23A4F4F83AFEB35A393B96E645A64F45A90DAAC3F
2773B226C66AF70EF1130DD00708D0F1863C10C54696AFBC5F1AA9DDDB0FFFFD
051BFA610B7D9BABF9E13927228A1E8EB0F493EFD1F3E1F1CFDE604027DC154B
24C98FDDD15B7B0C37> |-
/t <1C60D8A8C9B81F2C48F08776F2C719518D47AF26D067673C2134BFE8FF0B
E648A55033C05D6EF107FB63837C497CF67E5F2E872B1CB4B010376FE93C318F
F3946E3F8206701C10348C551353812E54> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LBAXSY+Helvetica-Bold /Encoding get
dup 32 /space put
dup 35 /numbersign put
dup 45 /hyphen put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 73 /I put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 85 /U put
dup 99 /c put
dup 100 /d put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
pop
%ADOEndSubsetFont
/LBAXSY+Helvetica-Bold*1 
[32{/.notdef}rp /space 2{/.notdef}rp /numbersign 9{/.notdef}rp /hyphen /.notdef /slash 
/.notdef /one /two /three /four /.notdef /six 10{/.notdef}rp 
/A /B /C /D /E /F 2{/.notdef}rp /I 
3{/.notdef}rp /M /N /O /P /.notdef /R /S 
/T /U 11{/.notdef}rp /a /.notdef /c /d /e 
/.notdef /g /.notdef /i /.notdef /k /l /m 
/n /o /p /.notdef /r /s /t 139{/.notdef}rp]
LBAXSY+Helvetica-Bold nf
LBAXSY+Helvetica-Bold*1 [6 0 0 -6 0 0 ]msf
41.4 121.98 mo
(BIT AND BIT-TEST INSTRUCTIONS)
[4.329 1.665 3.66295 1.68 4.329 4.329 4.329 1.68 4.32899 1.665 3.66296 1.99495 
3.66296 3.99905 3.99905 3.66296 1.67999 1.62 4.32 3.99905 3.66296 4.329 4.38 4.329 
3.66296 1.665 4.62 4.32901 0 ]xsh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
41.4 131.46 mo
(SBIP,bSet Bit in I/O RegisterI/O\(P,b\) )
[4.01284 3.96004 54.12 4.02005 1.62 54.6 3.96004 3.36 1.6788 1.68001 3.96004 1.31999 
1.6788 1.68001 1.3428 3.3468 1.68001 1.62 1.6788 4.6788 1.68001 4.3428 3.3 3.3468 
1.3428 3.0108 1.6788 3.3468 127.98 1.67877 1.67883 4.62 2.00873 3.96008 1.67877 3.3468 
2.00879 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
370.08 131.46 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
375.96 131.46 mo
( 1None2)
[1.67999 105.84 4.38 3.29999 3.36002 57.36 0 ]xsh
41.4 141 mo
(CBIP,bClear Bit in I/O RegisterI/O\(P,b\) )
[4.3404 4.01044 53.76 4.02005 1.62 54.6 4.34039 1.34039 3.34442 3.29999 2.03995 1.62 
4.01047 1.34039 1.67639 1.67999 1.34042 3.34439 1.62 1.67639 1.67642 4.67639 1.62 4.38 
3.29999 3.34439 1.34042 3.00839 1.67639 3.29999 122.7 1.67642 1.67639 4.62 2.00638 3.96002 
1.67639 3.34442 2.00635 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
370.08 141 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
375.96 141 mo
( 0None2)
[1.67999 105.84 4.38 3.29999 3.36002 57.36 0 ]xsh
41.4 150.48 mo
(LSLRdLogical Shift LeftRd\(n+1\) )
[3.3 4.02004 54.78 4.32 55.92 3.29999 3.3558 3.35577 1.32001 3.01981 3.29999 1.32001 
1.67999 4.02185 3.29999 1.35181 1.62 1.68781 1.67999 3.3558 3.29999 1.68781 141 4.32001 
3.36002 1.97995 3.36002 3.47998 3.36002 1.97995 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
370.92 150.48 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
376.8 150.48 mo
( Rd\(n\), Rd\(0\) )
[1.67999 4.3176 3.36002 1.98355 3.35999 1.98358 1.65359 1.62 4.38 3.29999 1.98355 3.36002 
1.98355 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
413.46 150.48 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
419.4 150.48 mo
( 0Z,C,N,V1)
[1.67999 62.4 3.65994 1.6734 4.3374 1.6734 4.3374 1.6734 51.0601 0 ]xsh
41.4 159.96 mo
(LSRRdLogical Shift RightRd\(n\) )
[3.3 4.02004 54.78 4.32 55.92 3.29999 3.3576 3.35759 1.31999 3.02159 3.3 1.31999 
1.68001 4.02364 3.3 1.35359 1.62 1.68959 1.68001 4.31999 1.32001 3.35759 3.35759 136.98 
4.32001 3.35999 1.97998 3.36002 1.97995 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
364.08 159.96 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
369.96 159.96 mo
( Rd\(n+1\), Rd\(7\) )
[1.67999 4.31641 3.35999 1.98236 3.36002 3.48837 3.36002 1.98236 1.6524 1.62 4.38 3.29999 
1.98236 3.35999 1.98236 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
413.46 159.96 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
419.4 159.96 mo
( 0Z,C,N,V1)
[1.67999 62.4 3.65994 1.6734 4.3374 1.6734 4.3374 1.6734 51.0601 0 ]xsh
41.4 169.5 mo
(ROLRdRotate Left Through CarryRd\(0\))
[4.32 4.68 53.1 4.32 55.92 4.31999 3.35701 1.62 3.35699 1.689 3.3 1.68001 
3.35699 3.29999 1.68901 1.689 1.68001 3.68695 3.29999 1.97997 3.35699 3.35699 3.3 3.35699 
1.68001 4.31999 3.29999 2.01897 1.97995 117 4.32001 3.35703 1.97995 3.35703 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
362.4 169.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
368.34 169.5 mo
(C,Rd\(n+1\))
[4.314 1.62 4.38 3.30002 1.97995 3.35999 3.48599 3.36002 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
396.12 169.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
402.06 169.5 mo
( Rd\(n\),C)
[1.67999 4.32001 3.29999 2.03397 3.29999 2.03397 1.62 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
424.74 169.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
430.62 169.5 mo
(Rd\(7\)Z,C,N,V1)
[4.33621 3.34018 2.00217 3.34021 39.8399 3.65994 1.67221 4.33621 1.67218 4.33621 1.67221 51.0601 
0 ]xsh
41.4 178.98 mo
(RORRdRotate Right Through CarryRd\(7\))
[4.3146 4.6506 53.1 4.32 55.92 4.32001 3.35999 1.62001 3.35999 1.68001 3.3186 1.68001 
4.31461 1.31461 3.36 3.36 1.62 1.68001 3.64856 3.36 1.98056 3.35999 3.3186 3.36 
3.3186 1.68001 4.31461 3.35999 1.98056 1.98056 113.04 4.31458 3.36005 1.98053 3.36005 0 
]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
362.4 178.98 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
368.34 178.98 mo
(C,Rd\(n\))
[4.31699 1.62003 4.38 3.29999 1.98294 3.36002 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
389.28 178.98 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
395.22 178.98 mo
( Rd\(n+1\),C)
[1.67999 4.31882 3.35999 1.98477 3.32278 3.54001 3.29999 2.03995 1.62 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
424.74 178.98 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
430.62 178.98 mo
(Rd\(0\)Z,C,N,V1)
[4.33621 3.34018 2.00217 3.34021 39.8399 3.65994 1.67221 4.33621 1.67218 4.33621 1.67221 51.0601 
0 ]xsh
41.4 188.46 mo
(ASRRdArithmetic Shift RightRd\(n\) )
[4.00985 3.96004 54.12 4.32001 55.92 3.96004 2.00577 1.3398 1.67581 3.29999 5.00577 3.29999 
1.67581 1.3398 3.00781 1.68001 4.00984 3.3 1.3398 1.6758 1.67581 1.68001 4.3398 1.33981 
3.3438 3.3 129.36 4.33984 3.34381 2.00574 3.34381 2.00574 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
364.08 188.46 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
369.96 188.46 mo
( Rd\(n+1\), n=0..6Z,C,N,V1)
[1.67999 4.3284 3.36002 1.99435 3.35999 3.5004 3.36002 1.99435 1.6644 1.62 3.35999 3.48001 
3.35999 1.6644 1.6644 73.14 3.66235 1.6644 4.3284 1.66437 4.32843 1.66437 51.0601 0 
]xsh
41.4 198 mo
(SWAPRdSwap NibblesRd\(3..0\))
[3.98764 5.6496 3.98765 48.42 4.3176 55.92 3.98764 4.38 3.32159 3.36002 1.67999 4.3176 
1.3176 3.32162 3.35999 1.32001 3.35999 150 4.31763 3.35999 1.98358 3.35999 1.62003 1.67999 
3.36002 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
369.06 198 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
375 198 mo
(Rd\(7..4\),Rd\(7..4\))
[4.3476 3.30002 2.01355 3.29999 1.68359 1.68359 3.30002 2.01355 1.62 4.38 3.29999 2.01358 
3.35159 1.68359 1.68359 3.30002 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
420 198 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
425.88 198 mo
(Rd\(3..0\)None1)
[4.32001 3.35999 1.97995 3.36002 1.62 1.67999 3.3678 37.92 4.3638 3.30002 3.3678 57.36 
0 ]xsh
41.4 207.48 mo
(BSETsFlag SetSREG\(s\) )
[4.01464 3.96004 4.01464 50.1 60.24 3.65996 1.3446 3.34859 3.3 1.68001 4.01465 3.29999 
163.02 4.02002 4.3446 3.96005 4.6806 2.01053 2.94003 2.03995 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
373.08 207.48 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
378.96 207.48 mo
( 1SREG\(s\)1)
[1.67999 102.84 4.02005 4.3338 4.00385 4.6698 1.99976 3.00177 46.3799 0 ]xsh
41.4 216.96 mo
(BCLRsFlag ClearSREG\(s\) )
[4.02005 4.32 3.3084 50.46 60.24 3.65996 1.3044 3.35999 3.30841 1.67999 4.30441 1.30438 
3.36002 3.30838 158.04 4.02005 4.32001 3.97446 4.67999 2.03995 2.94 2.03995 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
373.08 216.96 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
378.96 216.96 mo
( 0 SREG\(s\)1)
[1.67999 3.34979 99.48 4.01584 4.34583 4.01581 4.68182 1.97995 3 46.38 0 ]xsh
41.4 226.5 mo
(BSTRr, bBit Store from Register to TT )
[4.00864 3.96004 54.12 4.32001 2.00455 1.67459 1.68 50.58 3.96005 1.37999 1.62001 1.67999 
4.00864 1.67462 3.29999 2.03995 3.30002 1.67999 1.67459 2.00458 3.34259 5.00455 1.68002 4.33859 
3.29999 3.34262 1.33859 3.00662 1.67459 3.29999 2.03995 1.62003 1.67459 3.34259 1.68002 114.66 
3.65997 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
352.74 226.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.68 226.5 mo
( Rr\(b\)T1)
[1.67999 4.32242 2.03995 1.98834 3.36002 111.42 68.3999 0 ]xsh
41.4 235.98 mo
(BLDRd, bBit load from T to RegisterRd\(b\) )
[4.00864 3.3 54.78 4.32 3.3426 1.62 1.68 49.26 3.96005 1.37999 1.62001 1.67999 
1.33862 3.34259 3.34259 3.30002 1.67999 1.67459 2.00458 3.34259 5.00455 1.68002 3.67255 1.62 
1.67462 3.34259 1.68002 4.33859 3.29999 3.34262 1.33859 3.00659 1.67462 3.29999 116.04 4.33859 
3.34259 2.00455 3.34259 2.00455 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
364.08 235.98 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
369.96 235.98 mo
( TNone1)
[1.67999 111.84 4.37997 3.30002 3.35999 57.36 0 ]xsh
41.4 245.46 mo
(SECSet CarryC )
[4.01825 3.96004 114.36 3.96004 3.35219 1.6842 1.68002 4.34821 3.29999 2.01416 1.97995 161.34 
4.32001 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
353.4 245.46 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
359.34 245.46 mo
( 1C1)
[1.62 122.52 68.4 0 ]xsh
41.4 255 mo
(CLCClear CarryC )
[4.3134 3.36 114.66 4.31339 1.31342 3.35999 3.31741 2.03995 1.62003 4.37997 3.30002 1.97934 
2.03995 156 4.32001 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
353.4 255 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
359.34 255 mo
( 0 C1)
[1.62 3.36002 119.16 68.4 0 ]xsh
41.4 264.48 mo
(SENSet Negative FlagN )
[4.01645 3.96004 114.36 3.96002 3.3504 1.6824 1.67999 4.32001 3.29999 3.3504 3.29999 1.6824 
1.32001 3.01437 3.3504 1.67999 3.68036 1.32001 3.3504 139.32 4.32001 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
353.4 264.48 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
359.34 264.48 mo
( 1N1)
[1.62 122.52 68.4 0 ]xsh
41.4 273.96 mo
(CLNClear Negative FlagN )
[4.3188 3.36 114.66 4.31879 1.31882 3.35999 3.32281 2.03995 1.62003 4.37997 3.30002 3.35999 
3.29999 1.65482 1.31879 2.98682 3.35999 1.68002 3.65274 1.31882 3.32281 134.04 4.31879 0 
]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
353.4 273.96 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
359.34 273.96 mo
( 0 N1)
[1.62 3.36002 119.16 68.4 0 ]xsh
41.4 283.5 mo
(SEZSet Zero FlagZ )
[4.00745 3.96004 114.36 3.96005 3.3414 1.6734 1.68002 3.67136 3.3414 2.03995 3.29999 1.67999 
3.67136 1.3374 3.3414 150.66 3.67136 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
352.74 283.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.68 283.5 mo
( 1Z1)
[1.67999 123.12 68.4 0 ]xsh
41.4 292.98 mo
(CLZClear Ze)
[4.3158 3.36 114.66 4.3158 1.3158 3.35999 3.31979 2.03995 1.62003 3.64975 0 ]xsh
186.72 292.98 mo
(ro FlagZ )
[1.98836 3.3264 1.67999 3.65636 1.3224 3.3264 145.38 3.65637 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
352.74 292.98 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.68 292.98 mo
( 0 Z1)
[1.67999 3.3558 119.76 68.4 0 ]xsh
41.4 302.46 mo
(SEIGlobal Interrupt EnableI )
[4.01284 3.96004 114.36 4.67999 1.3428 3.30002 3.3468 3.29999 1.38 1.62 1.6788 3.3468 
1.6788 3.29999 2.00876 2.00876 3.29999 3.36002 1.6788 1.62 4.01285 3.3468 3.29999 3.36002 
1.3428 125.34 1.6788 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
350.76 302.46 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
356.64 302.46 mo
( 1I1)
[1.67999 125.16 68.4 0 ]xsh
41.4 312 mo
(CLIGlobal Interrupt DisableI)
[4.3404 3.3444 114.66 4.68001 1.34041 3.29999 3.34439 3.3 1.37999 1.62001 1.67641 3.34439 
1.67639 3.3 2.00636 2.00635 3.29999 3.36 1.67641 1.62 4.38 1.31999 3.00841 3.29999 
3.34439 1.34041 124.02 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
349.08 312 mo
(! )
[1.5 0 ]xsh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
356.46 312 mo
( 0 I1)
[1.67999 3.3558 121.98 68.4 0 ]xsh
41.4 321.48 mo
(SESSet Signed Test FlagS )
[4.01585 3.96004 114.36 3.96005 3.34979 1.68179 1.68002 3.96002 1.32001 3.34979 3.34982 3.29999 
3.34979 1.67999 3.67978 3.29999 3.01379 1.68179 1.68002 3.67975 1.32001 3.34979 130.98 4.01584 
0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
353.04 321.48 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.98 321.48 mo
( 1S1)
[1.67999 122.82 68.4 0 ]xsh
41.4 330.96 mo
(CLSClear Signed Test FlagS )
[4.3224 3.36 114.66 4.3224 1.32239 3.36 3.3264 2.03995 1.62001 3.99243 1.3224 3.36 
3.29999 3.36 3.36 1.62 3.65636 3.36 2.9904 1.6584 1.62 3.71996 1.31999 3.3264 
125.7 3.99243 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
353.04 330.96 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.98 330.96 mo
( 0 S1)
[1.67999 3.30002 119.52 68.4001 0 ]xsh
41.4 340.5 mo
(SEVSet Twos Complement Overflow.V )
[4.01585 3.96004 114.36 3.96004 3.34981 1.68179 1.68001 3.67976 4.31999 3.29999 3 1.68001 
4.31999 3.36 4.97995 3.36 1.31999 3.36 4.97995 3.3 3.34979 1.68181 1.62 4.68181 
3.01379 3.34979 1.97997 1.68181 1.32001 3.34979 4.32001 97.68 4.02002 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
353.04 340.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.98 340.5 mo
( 1V1)
[1.67999 122.82 68.4 0 ]xsh
41.4 349.98 mo
(CLVClear Twos Complement OverflowV )
[4.3218 3.36 114.66 4.32181 1.32179 3.36 3.32581 2.03995 1.62001 3.65576 4.37999 3.32581 
2.98979 1.68001 4.32181 3.36 4.98776 3.32579 1.38 3.29999 5.03996 3.29999 3.36 1.62001 
1.67999 4.65781 2.98979 3.36 1.97998 1.65778 1.32181 3.32578 96.72 3.99182 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
353.04 349.98 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.98 349.98 mo
( 0 V1)
[1.67999 3.30002 119.52 68.4001 0 ]xsh
41.4 359.46 mo
(SETSet T in SREGT )
[4.01524 3.96004 114.36 3.96004 3.3492 1.6812 1.68001 3.67914 1.62001 1.3452 3.29999 1.68001 
4.01524 4.34518 4.01524 148.98 3.67914 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
352.74 359.46 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.68 359.46 mo
( 1T1)
[1.67999 123.12 68.4 0 ]xsh
41.4 369 mo
(CLTClear T in SREGT )
[4.3134 3.36 114.66 4.31342 1.3134 3.36 3.31741 2.03995 1.62 3.64737 1.67999 1.31342 
3.35999 1.67999 3.98346 4.38 3.98343 143.7 3.64734 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
352.74 369 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.68 369 mo
( 0 T1)
[1.67999 3.3558 119.76 68.3999 0 ]xsh
41.4 378.48 mo
(SEHSet Half Carry Flag in SREGH )
[3.99244 3.99245 114.36 3.96005 3.35999 1.67999 1.68002 4.32239 3.32642 1.37997 1.62003 1.67999 
4.32239 3.36002 1.98834 1.98834 2.99042 1.67999 3.65637 1.32239 3.35999 3.36002 1.62 1.38 
3.29999 1.67999 3.99246 4.32239 3.99246 112.38 4.32242 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
353.4 378.48 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
359.34 378.48 mo
( 1H1)
[1.62 122.52 68.4 0 ]xsh
41.4 387.48 mo
(CLHClear Half Carry Flag in SREGH )
[4.3236 3.36 114.66 4.32361 1.32358 3.36002 3.32761 2.03995 1.62 4.38 3.29999 1.32361 
1.65961 1.67999 4.32361 3.35999 1.98956 1.98956 2.99158 1.68002 3.65753 1.32361 3.36002 3.29999 
1.67999 1.32361 3.35999 1.68002 3.99362 4.32361 3.99365 107.04 4.32358 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
353.4 387.48 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
359.34 387.48 mo
( 0 H1)
[1.62 3.36002 119.16 68.4 0 ]xsh
LBAXSY+Helvetica-Bold*1 [6 0 0 -6 0 0 ]msf
41.4 397.5 mo
(DATA TRANSFER INSTRUCTIONS)
[4.3224 4.3224 3.65635 4.3224 1.68 3.65635 4.3224 4.38 4.32 3.99245 3.71995 3.99245 
4.3224 1.67999 1.6584 4.3224 3.99245 3.65635 4.3224 4.3224 4.3224 3.65635 1.6584 4.6584 
4.32239 0 ]xsh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
41.4 406.98 mo
(MOVRd, RrMove Between RegistersRd )
[4.97995 4.68 52.44 4.32 3.3528 1.62 1.68 4.32 44.9399 4.97997 3.36 3.01678 
3.30002 1.67999 4.01886 3.29999 1.68478 4.32001 3.35278 3.30002 3.35278 1.68002 4.31998 3.29999 
3.35281 1.32001 3.01678 1.68481 3.29999 2.03995 120 4.32001 3.35281 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 406.98 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 406.98 mo
( RrNone1)
[1.67999 4.32782 114.84 4.38 3.29999 3.36002 57.36 0 ]xsh
41.4 416.46 mo
(MOVWRd, RrCopy Register Word)
[4.98956 4.6596 3.99364 48.42 4.3236 3.36 1.62 1.67999 4.32361 44.94 4.32359 3.36 
3.32759 2.99161 1.67999 4.32361 3.36 3.32759 1.32361 2.99159 1.65961 3.36 1.97995 1.67999 
5.65561 3.36 1.98955 0 ]xsh
347.4 415.98 mo
(Rd+1:Rd )
[4.30801 3.35999 3.48001 3.35999 1.62 4.38 3.31201 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
372.9 415.98 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
378.84 415.98 mo
( Rr+1:Rr)
[1.62 4.38 1.97995 3.48001 3.35999 1.67999 4.32001 0 ]xsh
483.48 416.46 mo
(None1)
[4.36801 3.29999 3.37201 57.36 0 ]xsh
41.4 426 mo
(LDIRd, KLoad ImmediateRd  )
[3.3 4.38 54.42 4.32 3.3564 1.62 1.68 49.26 3.29999 3.3564 3.35641 3.29999 
1.68001 1.6884 4.97995 4.97997 3.36 3.29999 1.38 3.29999 1.68001 144 4.32001 3.35638 
1.67999 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
358.38 426 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
364.32 426 mo
( KNone1)
[1.67999 117.48 4.38 3.29999 3.36002 57.36 0 ]xsh
41.4001 435.48 mo
(LDRd, XLoad IndirectRd )
[3.3 58.8 4.32 3.35999 1.62 1.68 49.26 3.29999 3.35161 3.35159 3.29999 1.68001 
1.68361 3.29999 3.35159 1.32001 1.97995 3.35999 3.01561 150.66 4.32001 3.35999 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 435.48 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 435.48 mo
( \(X\)None2)
[1.67999 1.97876 4.02005 113.16 4.38 3.31677 3.36002 57.36 0 ]xsh
41.4001 444.96 mo
(LDRd, X+Load Indirect and Post-Inc.Rd )
[3.3 58.8 4.32 3.35999 1.62 1.68 4.01884 45.24 3.3 3.3528 3.3528 3.29999 
1.68001 1.6848 3.3 3.35278 1.32001 1.97995 3.36 3.0168 1.6848 1.62 3.3528 3.3528 
3.3 1.67999 4.01886 3.29999 3.0168 1.6848 1.97995 1.68001 3.3528 3.0168 113.64 4.32001 
3.35278 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 444.96 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 444.96 mo
( \(X\), X )
[1.67999 1.98535 4.02005 1.98535 1.6554 1.68002 3.98944 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
381.3 444.96 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
387.24 444.96 mo
( X + 1None2)
[1.67999 3.96786 1.67999 3.46979 1.67999 83.76 4.38 3.30179 3.36002 57.36 0 ]xsh
41.4001 454.5 mo
(LDRd, - XLoad Indirect and Pre-Dec.X )
[3.3 58.8 4.32 3.35999 1.62 1.68 1.97996 1.67999 45.6001 3.29999 3.3522 3.3522 
3.3 1.68001 1.6842 3.29999 3.3522 1.32001 1.97995 3.35999 3.0162 1.6842 1.62001 3.3522 
3.3522 3.3 1.67999 4.01825 1.97995 3.3 2.03996 4.31999 3.29999 3.01619 113.7 4.01825 
0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
353.04 454.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.98 454.5 mo
( X - 1, Rd )
[1.67999 4.01764 1.62003 2.01355 1.62 3.35159 1.68359 1.68002 4.3476 3.29999 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
385.98 454.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
391.92 454.5 mo
( \(X\)None2)
[1.62 2.03995 3.96005 83.94 4.38 3.29999 3.35999 57.36 0 ]xsh
41.4001 463.98 mo
(LDRd, YLoad IndirectRd )
[3.3 58.8 4.32 3.35999 1.62 1.68 49.26 3.3 3.35159 3.35159 3.29999 1.68001 
1.68361 3.29999 3.35159 1.32001 1.97995 3.35999 3.01561 150.66 4.32001 3.36002 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 463.98 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 463.98 mo
( \(Y\)None2)
[1.67999 1.97876 4.02005 113.16 4.38 3.3168 3.35999 57.36 0 ]xsh
41.4001 473.46 mo
(LDRd, Y+Load Indirect and Post-Inc.Rd )
[3.3 58.8 4.32 3.35999 1.62 1.68 4.01884 45.24 3.3 3.3528 3.3528 3.29999 
1.68001 1.6848 3.3 3.35278 1.32001 1.97995 3.36 3.0168 1.6848 1.62 3.3528 3.3528 
3.3 1.67999 4.01886 3.29999 3.0168 1.6848 1.97995 1.68001 3.3528 3.0168 113.64 4.32001 
3.35278 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 473.46 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 473.46 mo
( \(Y\), Y )
[1.67999 1.98535 4.02005 1.98535 1.6554 1.68002 3.98944 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
381.3 473.46 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
387.24 473.46 mo
( Y + 1None2)
[1.67999 3.96786 1.67999 3.46979 1.67999 83.76 4.37997 3.30182 3.35999 57.36 0 ]xsh
41.4001 483 mo
(LDRd, - YLoad Indirect and Pre-Dec.Y )
[3.3 58.8 4.32 3.35999 1.62 1.68 1.97996 1.67999 45.6001 3.29999 3.3522 3.3522 
3.3 1.68001 1.6842 3.29999 3.3522 1.32001 1.97995 3.35999 3.0162 1.6842 1.62001 3.3522 
3.3522 3.3 1.67999 4.01825 1.97995 3.3 2.03996 4.31999 3.29999 3.01619 113.7 4.01825 
0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
353.04 483 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.98 483 mo
( Y - 1, Rd )
[1.67999 4.01764 1.62003 2.01355 1.62 3.35159 1.68359 1.67999 4.34763 3.29999 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
385.98 483 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
391.92 483 mo
( \(Y\)None2)
[1.62 2.03995 3.96005 83.9399 4.38 3.30002 3.36002 57.36 0 ]xsh
41.4001 492.48 mo
(LDDRd,Y+qLoad Indirect with DisplacementRd )
[3.3 4.38 54.42 4.32 3.3564 1.62 4.02245 3.48 43.44 3.29999 3.3564 3.3564 
3.3 1.68001 1.6884 3.3 3.3564 1.31999 1.97995 3.36 3.0204 1.68842 1.62 4.3524 
1.31999 1.68842 3.29999 1.68001 4.31999 1.32001 3 3.3564 1.31999 3.3564 3.0204 3.3 
4.97997 3.35638 3.3 100.38 4.32001 3.35641 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 492.48 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 492.48 mo
( \(Y + q\)None2)
[1.67999 1.98117 4.02005 1.67999 3.48718 1.67999 3.31921 103.02 4.38 3.29999 3.35999 57.36 
0 ]xsh
41.4001 501.96 mo
(LDRd, ZLoad Indirect Rd )
[3.3 58.8 4.32 3.35999 1.62 1.68 49.26 3.29999 3.3528 3.35281 3.29999 1.68001 
1.6848 3.29999 3.3528 1.31999 1.97997 3.36 3.01678 1.68481 148.98 4.32001 3.36005 0 
]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 501.96 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 501.96 mo
( \(Z\)None2)
[1.67999 1.98117 3.64914 113.52 4.38 3.31921 3.35999 57.36 0 ]xsh
41.4001 511.5 mo
(LDRd, Z+Load Indirect and Post-Inc.Rd )
[3.3 58.8 4.32 3.36 1.62 1.67999 3.68095 45.6 3.29999 3.351 3.35101 3.29999 
1.68001 1.683 3.29999 3.35101 1.31999 1.97995 3.36 3.015 1.683 1.62001 3.351 3.35101 
3.29999 1.68001 4.01704 3.29999 3.01501 1.683 1.97995 1.68001 3.351 3.015 113.64 4.32001 
3.35101 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 511.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 511.5 mo
( \(Z\), Z )
[1.67999 1.99615 3.66415 2.03995 1.62003 1.67999 3.66415 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
380.64 511.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
386.58 511.5 mo
( Z+1None2)
[1.62 3.71997 3.47998 88.08 4.38 3.29999 3.35999 57.36 0 ]xsh
41.4001 520.98 mo
(LDRd, -ZLoad Indirect and Pre-Dec.Z )
[3.3 58.8 4.32 3.35999 1.62 1.68 1.97996 47.28 3.29999 3.34981 3.34981 3.29999 
1.68001 1.68179 3.3 3.34979 1.32001 1.97995 3.35999 3.01381 1.68181 1.62 3.34979 3.34981 
3.3 1.67999 4.01585 1.97995 3.3 2.03995 4.31999 3.3 3.01379 113.7 3.67978 0 
]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
352.74 520.98 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.68 520.98 mo
( Z - 1, Rd )
[1.67999 3.66595 1.67999 1.99796 1.68002 3.336 1.668 1.62 4.38 3.29999 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
385.32 520.98 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
391.26 520.98 mo
( \(Z\)None2)
[1.62 2.03995 3.65997 84.9 4.38 3.29999 3.35999 57.36 0 ]xsh
41.4002 530.52 mo
(LDDRd, Z+qLoad Indirect with DisplacementRd )
[3.3 4.38 54.42 4.32 3.3558 1.62 1.68 3.68575 3.5238 42.06 3.30002 3.35577 
3.3558 3.29999 1.68002 1.68777 3.30002 3.35577 1.32001 1.97995 3.36002 3.01978 1.68781 1.62 
4.35181 1.32001 1.68777 3.30002 1.67999 4.32001 1.31998 3 3.3558 1.32001 3.35577 3.01981 
3.29999 4.97998 3.3558 3.29999 100.38 4.32001 3.3558 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 530.52 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 530.52 mo
( \(Z + q\)None2)
[1.67999 1.97995 3.65997 1.67999 3.48001 1.67999 3.36301 103.32 4.35901 3.29999 3.36298 57.36 
0 ]xsh
41.4002 540 mo
(LDSRd, kLoad Direct from SRAMRd  )
[3.306 4.38 54.42 4.32 3.35999 1.62 1.68 49.26 3.3 3.35999 3.36 3.29999 
1.68001 4.30202 1.302 2.03995 3.306 3 1.68001 1.68001 1.638 2.03996 3.306 5.03996 
1.62 4.02005 4.31999 4.02005 125.34 4.302 3.35999 1.67999 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
358.38 540 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
364.32 540 mo
( \(k\)None2)
[1.67999 1.98236 2.98441 112.5 4.38 3.3204 3.35999 57.36 0 ]xsh
41.4002 549.48 mo
(STX, RrStore Indirect\(X\))
[4.01464 58.08 4.01464 1.62 1.68 4.3446 48.6 3.96004 1.68001 3.34859 1.97997 3.34859 
1.62001 1.6806 3.34859 3.3 1.37999 1.97997 3.29999 3.0126 149.7 1.97998 4.02002 0 
]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
355.38 549.48 mo
(! )
[1.5 0 ]xsh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.82 549.48 mo
( RrNone2)
[1.67999 4.32782 114.66 4.37997 3.30002 3.35999 57.36 0 ]xsh
41.4002 559.02 mo
(STX+, RrStore Indirect and Post-Inc.\(X\))
[4.02184 58.08 4.02184 3.48 1.68781 1.62 4.3518 45.06 3.96005 1.67999 3.3558 1.97995 
3.35579 1.62001 1.68779 3.3558 3.29999 1.38 1.97995 3.3 3.01979 1.68781 1.67999 3.3558 
3.29999 3.3558 1.62 4.02185 3.3558 3.01979 1.62001 2.01775 1.68779 3.3 3 112.68 
1.97998 4.02185 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
355.38 559.02 mo
(! )
[1.5 0 ]xsh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.82 559.02 mo
( Rr, X )
[1.67999 4.33322 1.99915 1.66919 1.67999 3.96005 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
379.8 559.02 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
385.74 559.02 mo
( X + 1None2)
[1.67999 3.96786 1.67999 3.46979 1.67999 85.26 4.38 3.30179 3.36002 57.36 0 ]xsh
41.4002 568.5 mo
(ST- X, RrStore Indirect and Pre-Dec.X )
[4.01944 58.08 1.97995 1.68 4.01945 1.62 1.68 4.32 44.94 3.96005 1.67999 3.35339 
1.97997 3.35339 1.62 1.68539 3.35339 3.3 1.37999 1.97997 3.29999 3.0174 1.68539 1.68001 
3.35339 3.29999 3.35339 1.62001 4.01944 1.97995 3.35339 1.97995 4.32001 3.35999 3.01741 112.68 
4.01947 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
353.04 568.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.98 568.5 mo
( X - 1, \(X\) )
[1.67999 4.02844 1.62 2.02438 1.62 3.3624 1.6944 1.67999 1.97995 3.96005 2.02435 0 
]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
386.34 568.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
392.22 568.5 mo
( RrNone2)
[1.67999 4.32782 85.2599 4.38 3.29999 3.36002 57.36 0 ]xsh
41.4002 577.98 mo
(STY, RrStore Indirect\(Y\) )
[4.02005 58.08 4.02004 1.62 1.68 4.3194 48.6 3.98944 1.65541 3.35999 1.97995 3.36 
1.62001 1.6554 3.36 3.32339 1.37999 1.98537 3.32339 2.9874 149.7 1.98538 4.02002 1.98535 
0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
357.06 577.98 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
363 577.98 mo
( RrNone2)
[1.62 4.37219 114.48 4.37219 3.29999 3.37622 57.36 0 ]xsh
41.4002 587.52 mo
(STY+, RrStore Indirect and Post-Inc.\(Y\) )
[4.02184 58.08 4.02184 3.48 1.68781 1.62 4.3518 45.06 3.96005 1.67999 3.3558 1.97995 
3.35579 1.62001 1.68779 3.3558 3.29999 1.38 1.97995 3.3 3.01979 1.68781 1.67999 3.3558 
3.29999 3.3558 1.62 4.02185 3.3558 3.01979 1.62001 2.01775 1.68779 3.3 3 112.68 
1.97998 4.02185 1.97992 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
357.06 587.52 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
363 587.52 mo
( Rr, Y )
[1.62 4.36499 1.97998 1.67999 1.62 4.03503 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
379.98 587.52 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
385.92 587.52 mo
( Y + 1None2)
[1.62 4.02005 1.67999 3.48001 1.67999 85.08 4.38 3.29999 3.36002 57.36 0 ]xsh
41.4002 597 mo
(ST- Y, RrStore Indirect and Pre-Dec.Y )
[4.01944 58.08 1.97995 1.68 4.01945 1.62 1.68 4.32 44.94 3.96005 1.67999 3.35339 
1.97997 3.35339 1.62 1.68539 3.35339 3.3 1.37999 1.97997 3.29999 3.0174 1.68539 1.68001 
3.35339 3.29999 3.35339 1.62001 4.01944 1.97995 3.35339 1.97995 4.32001 3.35999 3.01741 112.68 
4.01947 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
353.04 597 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.98 597 mo
( Y - 1, \(Y\) )
[1.67999 4.02844 1.62 2.02438 1.62 3.3624 1.6944 1.67999 1.97995 3.96005 2.02435 0 
]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
386.34 597 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
392.22 597 mo
( RrNone2)
[1.67999 4.32782 85.2599 4.38 3.29999 3.36002 57.36 0 ]xsh
41.4002 606.48 mo
(STDY+q,RrStore Indirect with Displacement\(Y + q\) )
[4.02004 3.65996 54.42 4.02004 3.4902 3.3222 1.6542 4.3182 43.44 3.96005 1.65419 3.36 
1.98416 3.35999 1.62001 1.65419 3.36 3.32219 1.38 1.98416 3.32219 2.98619 1.65421 1.68001 
4.31819 1.31821 1.65419 3.36 1.62 4.38 1.31999 2.98621 3.32219 1.38 3.29999 2.98621 
3.35999 4.98416 3.36002 3.32219 99.36 1.98416 4.02005 1.67999 3.49017 1.67999 3.3222 2.03998 
0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
367.26 606.48 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
373.14 606.48 mo
( RrNone2)
[1.67999 4.32782 104.34 4.38 3.29999 3.36002 57.36 0 ]xsh
41.4002 616.02 mo
(STZ, RrStore Indirect\(Z\) )
[4.02425 58.08 3.68816 1.6902 1.62 4.3542 48.8999 3.96005 1.67999 3.3582 1.97995 3.35822 
1.62 1.6902 3.3582 3.29999 1.38 1.97995 3.3 3.0222 149.7 1.97998 3.65997 2.02014 
0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.7 616.02 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 616.02 mo
( RrNone2)
[1.67999 4.32782 114.84 4.38 3.29999 3.36002 57.36 0 ]xsh
41.4002 625.5 mo
(STZ+, RrStore Indirect and Post-Inc.\(Z\) )
[4.01825 58.0799 3.68216 3.48 1.6842 1.67999 4.32001 45.42 3.96004 1.68001 3.3522 1.97995 
3.3522 1.62001 1.6842 3.3522 3.29999 1.38 1.97995 3.3 3.0162 1.6842 1.67999 3.3522 
3.3 3.3522 1.62 4.01825 3.3522 3.0162 1.62001 2.01416 1.6842 3.29999 3 112.68 
1.97992 3.68219 2.01416 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.7 625.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 625.5 mo
( Rr, Z )
[1.67999 4.33142 1.99734 1.66739 1.67999 3.66537 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
379.32 625.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
385.2 625.5 mo
( Z + 1None2)
[1.67999 3.65756 1.67999 3.49561 1.67999 86.1 4.38 3.32758 3.32764 57.36 0 ]xsh
41.4 634.98 mo
(ST-Z, RrStore Indirect and Pre-Dec.Z )
[4.01765 58.08 1.97995 3.65995 1.6836 1.68 4.32 46.92 3.96002 1.68002 3.35159 1.97995 
3.35159 1.62 1.68362 3.35159 3.29999 1.38 1.97995 3.29999 3.01559 1.68359 1.68002 3.35159 
3.29999 3.35159 1.62 4.01767 1.97995 3.35159 1.97995 4.32001 3.35999 3.01559 112.68 3.68155 
0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
352.74 634.98 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.68 634.98 mo
( Z - 1, \(Z\) )
[1.67999 3.65097 1.67999 1.98294 1.68002 3.35999 1.67999 1.62 2.03998 3.65994 1.98297 0 
]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
385.32 634.98 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
391.2 634.98 mo
( RrNone2)
[1.67999 4.32782 86.2799 4.38 3.29999 3.35999 57.36 0 ]xsh
41.4 644.52 mo
(STDZ+q,RrStore Indirect with Displacement\(Z + q\) )
[4.02005 3.65995 54.42 3.65996 3.492 3.36 1.656 4.32 43.74 3.96004 1.65599 3.36002 
1.98593 3.36002 1.62 1.65598 3.36002 3.32397 1.38 1.98596 3.32397 2.98801 1.65601 1.67999 
4.32001 1.31998 1.65601 3.35999 1.62003 4.37997 1.32001 2.98801 3.32397 1.38 3.29999 2.98801 
3.36002 4.98596 3.35999 3.32401 99.36 1.98596 3.65399 1.67999 3.492 1.67999 3.35999 1.97998 
0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
366.9 644.52 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
372.84 644.52 mo
( RrNone2)
[1.62 4.37219 104.64 4.37219 3.29999 3.37622 57.36 0 ]xsh
41.4 654 mo
(STSk, RrStore Direct to SRAM\(k\) )
[4.02124 3.68515 54.42 2.99999 1.6872 1.62 4.3512 49.56 3.96004 1.68002 3.35519 1.97995 
3.35519 1.62003 4.3512 1.3512 1.97995 3.36002 3.0192 1.62 1.67999 1.68723 3.35519 1.62 
4.02124 4.35123 4.02124 131.34 1.97995 3 2.01718 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.04 654 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
361.98 654 mo
( RrNone2)
[1.67999 4.32782 115.5 4.38 3.29999 3.35999 57.36 0 ]xsh
41.4 663.48 mo
(LPMLoad Program MemoryR0 )
[3.3162 4.02004 115.02 3.29999 3.36 3.36 3.29999 1.68001 4.02005 1.97995 3.31619 3.36 
1.97816 3.35999 4.97816 1.68001 4.97815 3.36 4.97816 3.35999 1.97816 125.34 4.31219 3.36005 
0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 663.48 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 663.48 mo
( \(Z\)None3)
[1.67999 1.98117 3.64914 113.52 4.38 3.31918 3.36002 57.36 0 ]xsh
41.4 673.02 mo
(LPMRd, ZLoad Program MemoryRd )
[3.318 4.02005 54.78 4.32001 3.35999 1.62 1.68 49.2599 3.3 3.35999 3.36 3.29999 
1.68001 4.02005 1.97995 3.31801 3.35999 1.97995 3.36 4.97997 1.67999 4.97995 3.36 4.97997 
3.35999 1.97995 125.34 4.31403 3.35999 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 673.02 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 673.02 mo
( \(Z\)None3)
[1.67999 1.98117 3.64914 113.52 4.38 3.31918 3.36002 57.36 0 ]xsh
41.4 682.5 mo
(LPMRd, Z+Load Program Memory and Post-IncRd )
[3.3192 4.01944 54.7794 4.3194 3.3594 1.6194 1.6794 3.64915 45.5994 3.3192 3.35941 3.35941 
3.29939 1.6794 4.01944 1.97935 3.31921 3.35939 1.98116 3.35941 4.98116 1.6794 4.98116 3.35941 
4.98116 3.35941 1.98114 2.98322 1.67938 3.31921 3.35938 3.31921 1.67938 4.01944 3.29941 2.9832 
1.6512 1.98116 1.6512 3.35939 89.9994 4.31519 3.35944 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 682.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 682.5 mo
( \(Z\), Z )
[1.67999 1.99615 3.66415 2.03998 1.62 1.67999 3.66415 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
380.64 682.5 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
386.58 682.5 mo
( Z+1None3)
[1.62 3.71997 3.47998 88.08 4.38 3.29999 3.36002 57.36 0 ]xsh
41.4001 691.98 mo
(ELPMExtended Load Program MemoryR0 )
[4.02004 3.3 4.02005 111 3.98645 2.98439 1.6524 3.36 3.3204 3.36 3.35999 3.3 
1.68001 3.32039 3.36 3.36 3.29999 1.68001 4.02005 1.97995 3.3204 3.35999 1.98236 3.36 
4.98236 1.68001 4.98233 3.36002 4.98235 3.36 1.98236 98.34 4.31638 3.36002 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 691.98 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 691.98 mo
( \(RAMPZ:Z\)None3)
[1.67999 1.97995 4.32001 4.01166 4.97995 4.01166 3.67554 1.67761 3.67554 90.84 4.38 3.29999 
3.35999 57.36 0 ]xsh
41.4001 701.52 mo
(ELPMRd, ZExtended Load Program MemoryRd )
[4.02005 3.3 4.02005 50.76 4.3146 3.36 1.6506 1.68 49.2599 3.96005 2.9826 1.6506 
3.36 3.29999 3.36 3.36 3.29999 1.68001 3.3186 3.36 3.35999 3.3 1.68001 4.02005 
1.97995 3.3186 3.35999 1.98056 3.36 4.98056 1.68001 4.98056 3.36002 4.98056 3.36 1.98056 
98.34 4.31464 3.35999 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 701.52 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 701.52 mo
( \(Z\)None3)
[1.67999 1.98117 3.64914 113.52 4.38 3.31921 3.35999 57.36 0 ]xsh
41.4001 711 mo
(ELPMRd, Z+Extended Load Program MemoryRd )
[4.02005 3.3 4.02005 50.76 4.3152 3.35999 1.6512 1.68 3.64915 45.6 3.98526 2.9832 
1.65118 3.36 3.3192 3.36 3.36 3.29999 1.68001 3.3192 3.36 3.36 3.29999 1.68001 
4.02003 1.97997 3.3192 3.35999 1.98117 3.35999 4.98116 1.68001 4.98116 3.36 4.98117 3.36 
1.98116 98.34 4.31519 3.35999 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 711 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 711 mo
( \(RAMPZ:Z\), RAMPZ:Z )
[1.67999 1.98956 4.32361 4.02005 4.97995 4.02005 3.65994 1.65961 3.65753 1.98956 1.65961 1.67999 
4.32361 4.02005 4.98953 4.02005 3.65756 1.65961 3.65753 0 ]xsh
LBAXTA+SymbolMT*1 [6 0 0 -6 0 0 ]msf
425.94 711 mo
( )sh
LBAXSZ+Helvetica*1 [6 0 0 -6 0 0 ]msf
431.88 711 mo
(RAMPZ:Z+1None3)
[4.32239 3.99246 4.98834 3.99246 3.65634 1.62 3.71997 3.47998 21.78 4.38 3.32642 3.35999 
57.36 0 ]xsh
LBAXSY+Helvetica-Bold*1 [7.98 0 0 -7.98 0 0 ]msf
45.06 81.3 mo
(MnemonicsOperandsDescriptionOperationFlags#Clocks)
[6.64728 4.87572 4.43688 7.13977 4.87572 4.9196 2.21844 4.43687 24.9598 6.17972 4.9196 4.44008 
3.10428 4.43687 4.87572 4.91962 85.7403 5.75996 4.43689 4.43687 4.43687 3.10428 2.21844 4.91963 
2.65726 2.21844 4.91962 123.9 6.20844 4.91962 4.43686 3.10428 4.43689 2.65729 2.21844 4.8757 
70.1402 4.85977 2.21844 4.38022 4.8757 27.78 4.43689 5.76154 2.21844 4.91962 4.2597 4.44006 
0 ]xsh
35.76 712.74 mo
36.24 712.74 li
36.24 73.5 li
35.76 73.5 li
cp
f
97.86 115.5 mo
98.34 115.5 li
98.34 70.5 li
97.86 70.5 li
cp
f
97.86 390.96 mo
98.34 390.96 li
98.34 123.72 li
97.86 123.72 li
cp
f
97.86 713.22 mo
98.34 713.22 li
98.34 399.24 li
97.86 399.24 li
cp
f
158.1 115.5 mo
158.58 115.5 li
158.58 70.5 li
158.1 70.5 li
cp
f
158.1 390.96 mo
158.58 390.96 li
158.58 123.72 li
158.1 123.72 li
cp
f
158.1 713.22 mo
158.58 713.22 li
158.58 399.24 li
158.1 399.24 li
cp
f
341.76 115.5 mo
342.24 115.5 li
342.24 70.5 li
341.76 70.5 li
cp
f
341.76 390.96 mo
342.24 390.96 li
342.24 123.72 li
341.76 123.72 li
cp
f
341.76 713.22 mo
342.24 713.22 li
342.24 399.24 li
341.76 399.24 li
cp
f
477.84 115.5 mo
478.32 115.5 li
478.32 70.5 li
477.84 70.5 li
cp
f
477.84 390.96 mo
478.32 390.96 li
478.32 123.72 li
477.84 123.72 li
cp
f
477.84 713.22 mo
478.32 713.22 li
478.32 399.24 li
477.84 399.24 li
cp
f
530.88 115.5 mo
531.36 115.5 li
531.36 70.5 li
530.88 70.5 li
cp
f
530.88 390.96 mo
531.36 390.96 li
531.36 123.72 li
530.88 123.72 li
cp
f
530.88 713.22 mo
531.36 713.22 li
531.36 399.24 li
530.88 399.24 li
cp
f
575.76 712.74 mo
576.24 712.74 li
576.24 73.5 li
575.76 73.5 li
cp
f
35.76 73.5 mo
576.24 73.5 li
576.24 70.5 li
35.76 70.5 li
cp
f
35.76 86.22 mo
576.24 86.22 li
576.24 85.74 li
35.76 85.74 li
cp
f
35.76 96.96 mo
576.24 96.96 li
576.24 93.96 li
35.76 93.96 li
cp
f
35.76 105.24 mo
576.24 105.24 li
576.24 104.76 li
35.76 104.76 li
cp
f
35.76 115.5 mo
576.24 115.5 li
576.24 113.52 li
35.76 113.52 li
cp
f
35.76 124.2 mo
576.24 124.2 li
576.24 123.72 li
35.76 123.72 li
cp
f
35.76 133.74 mo
576.24 133.74 li
576.24 133.26 li
35.76 133.26 li
cp
f
35.76 143.22 mo
576.24 143.22 li
576.24 142.74 li
35.76 142.74 li
cp
f
35.76 152.7 mo
576.24 152.7 li
576.24 152.22 li
35.76 152.22 li
cp
f
35.76 162.24 mo
576.24 162.24 li
576.24 161.76 li
35.76 161.76 li
cp
f
35.76 171.72 mo
576.24 171.72 li
576.24 171.24 li
35.76 171.24 li
cp
f
35.76 181.2 mo
576.24 181.2 li
576.24 180.72 li
35.76 180.72 li
cp
f
35.76 190.74 mo
576.24 190.74 li
576.24 190.26 li
35.76 190.26 li
cp
f
35.76 200.22 mo
576.24 200.22 li
576.24 199.74 li
35.76 199.74 li
cp
f
35.76 209.7 mo
576.24 209.7 li
576.24 209.22 li
35.76 209.22 li
cp
f
35.76 219.24 mo
576.24 219.24 li
576.24 218.76 li
35.76 218.76 li
cp
f
35.76 228.72 mo
576.24 228.72 li
576.24 228.24 li
35.76 228.24 li
cp
f
35.76 238.2 mo
576.24 238.2 li
576.24 237.72 li
35.76 237.72 li
cp
f
35.76 247.74 mo
576.24 247.74 li
576.24 247.26 li
35.76 247.26 li
cp
f
35.76 257.22 mo
576.24 257.22 li
576.24 256.74 li
35.76 256.74 li
cp
f
35.76 266.7 mo
576.24 266.7 li
576.24 266.22 li
35.76 266.22 li
cp
f
35.76 276.24 mo
576.24 276.24 li
576.24 275.76 li
35.76 275.76 li
cp
f
35.76 285.72 mo
576.24 285.72 li
576.24 285.24 li
35.76 285.24 li
cp
f
35.76 295.2 mo
576.24 295.2 li
576.24 294.72 li
35.76 294.72 li
cp
f
35.76 304.74 mo
576.24 304.74 li
576.24 304.26 li
35.76 304.26 li
cp
f
35.76 314.22 mo
576.24 314.22 li
576.24 313.74 li
35.76 313.74 li
cp
f
35.76 323.7 mo
576.24 323.7 li
576.24 323.22 li
35.76 323.22 li
cp
f
35.76 333.24 mo
576.24 333.24 li
576.24 332.76 li
35.76 332.76 li
cp
f
35.76 342.72 mo
576.24 342.72 li
576.24 342.24 li
35.76 342.24 li
cp
f
35.76 352.2 mo
576.24 352.2 li
576.24 351.72 li
35.76 351.72 li
cp
f
35.76 361.74 mo
576.24 361.74 li
576.24 361.26 li
35.76 361.26 li
cp
f
35.76 371.22 mo
576.24 371.22 li
576.24 370.74 li
35.76 370.74 li
cp
f
35.76 380.7 mo
576.24 380.7 li
576.24 380.22 li
35.76 380.22 li
cp
f
35.76 391.02 mo
576.24 391.02 li
576.24 389.04 li
35.76 389.04 li
cp
f
35.76 399.72 mo
576.24 399.72 li
576.24 399.24 li
35.76 399.24 li
cp
f
35.76 409.2 mo
576.24 409.2 li
576.24 408.72 li
35.76 408.72 li
cp
f
35.76 418.74 mo
576.24 418.74 li
576.24 418.26 li
35.76 418.26 li
cp
f
35.76 428.22 mo
576.24 428.22 li
576.24 427.74 li
35.76 427.74 li
cp
f
35.76 437.7 mo
576.24 437.7 li
576.24 437.22 li
35.76 437.22 li
cp
f
35.76 447.24 mo
576.24 447.24 li
576.24 446.76 li
35.76 446.76 li
cp
f
35.76 456.72 mo
576.24 456.72 li
576.24 456.24 li
35.76 456.24 li
cp
f
35.76 466.2 mo
576.24 466.2 li
576.24 465.72 li
35.76 465.72 li
cp
f
35.76 475.74 mo
576.24 475.74 li
576.24 475.26 li
35.76 475.26 li
cp
f
35.76 485.22 mo
576.24 485.22 li
576.24 484.74 li
35.76 484.74 li
cp
f
35.76 494.7 mo
576.24 494.7 li
576.24 494.22 li
35.76 494.22 li
cp
f
35.76 504.24 mo
576.24 504.24 li
576.24 503.76 li
35.76 503.76 li
cp
f
35.76 513.72 mo
576.24 513.72 li
576.24 513.24 li
35.76 513.24 li
cp
f
35.76 523.26 mo
576.24 523.26 li
576.24 522.78 li
35.76 522.78 li
cp
f
35.76 532.74 mo
576.24 532.74 li
576.24 532.26 li
35.76 532.26 li
cp
f
35.76 542.22 mo
576.24 542.22 li
576.24 541.74 li
35.76 541.74 li
cp
f
35.76 551.76 mo
576.24 551.76 li
576.24 551.28 li
35.76 551.28 li
cp
f
35.76 561.24 mo
576.24 561.24 li
576.24 560.76 li
35.76 560.76 li
cp
f
35.76 570.72 mo
576.24 570.72 li
576.24 570.24 li
35.76 570.24 li
cp
f
35.76 580.26 mo
576.24 580.26 li
576.24 579.78 li
35.76 579.78 li
cp
f
35.76 589.74 mo
576.24 589.74 li
576.24 589.26 li
35.76 589.26 li
cp
f
35.76 599.22 mo
576.24 599.22 li
576.24 598.74 li
35.76 598.74 li
cp
f
35.76 608.76 mo
576.24 608.76 li
576.24 608.28 li
35.76 608.28 li
cp
f
35.76 618.24 mo
576.24 618.24 li
576.24 617.76 li
35.76 617.76 li
cp
f
35.76 627.72 mo
576.24 627.72 li
576.24 627.24 li
35.76 627.24 li
cp
f
35.76 637.26 mo
576.24 637.26 li
576.24 636.78 li
35.76 636.78 li
cp
f
35.76 646.74 mo
576.24 646.74 li
576.24 646.26 li
35.76 646.26 li
cp
f
35.76 656.22 mo
576.24 656.22 li
576.24 655.74 li
35.76 655.74 li
cp
f
35.76 665.76 mo
576.24 665.76 li
576.24 665.28 li
35.76 665.28 li
cp
f
35.76 675.24 mo
576.24 675.24 li
576.24 674.76 li
35.76 674.76 li
cp
f
35.76 684.72 mo
576.24 684.72 li
576.24 684.24 li
35.76 684.24 li
cp
f
35.76 694.26 mo
576.24 694.26 li
576.24 693.78 li
35.76 693.78 li
cp
f
35.76 703.74 mo
576.24 703.74 li
576.24 703.26 li
35.76 703.26 li
cp
f
35.76 713.22 mo
576.24 713.22 li
576.24 712.74 li
35.76 712.74 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/2 ]]
] del_res
/LBAXSZ+Helvetica*1 uf
/LBAXSZ+Helvetica uf
/BLQAAA+Helvetica uf
/LBAXTA+SymbolMT*1 uf
/LBAXTA+SymbolMT uf
/ZJXAAA+SymbolMT uf
/LBAXSY+Helvetica-Bold*1 uf
/LBAXSY+Helvetica-Bold uf
/ADVAAA+Helvetica-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Page: 15 3
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
[
[/Label (15)]
[/TrimBox [0 0 792 612]]
[/BleedBox [0 0 792 612]]
[/ArtBox [0 0 612 612 ]]
]xpdfm
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -612 translate
pgsv
[0 -1 1 0 0 612 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
[1 0 0 1 0 0 ]ct
false sop
/3 
[/DeviceGray] /CSA add_res
0 gry
%ADOBeginSubsetFont: ADVAAA+Helvetica-Bold Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /ADVAAA+Helvetica-Bold def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype AG and/or its subsidiaries.) def
/Weight (Bold) def
/ItalicAngle 0 def
/BaseFontName (Helvetica-Bold) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 49 /one put
dup 53 /five put
def
/UniqueID 28357 def
/FontBBox {-170 -228 1003 962} def
end
systemdict begin
dup /Private
12 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 718 737 532 546 698 710] def
/OtherBlues [271 283 401 409 -217 -208] def
/BlueScale 0.0437917 def
/StdHW [118] def
/StdVW [140] def
/ForceBold true def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
3 dict dup begin
/one <1C60D8A8C9B7EF327C10274A23FFA602162C4CA1571585B0C1E77513AA
5B7F97CD86DBDAB28AAC85EF0A29A3E89D41CB761E2BBEAEE690> |-
/five <1C60D8A8C9B7EF32A450E6CDCB13ACB635CC16ADD7CCAD6BEE541CB5D
1185200EC960A8AB3C993D405195DB79B04F43327837A1B529001C138A764F7A
24304287CE3BEC77DC6D8B12B5A671568AE2F5F84B155A674342640B38C48DD8
E48C0D56BED0611990A342E99DF070CDD3B740424> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LBAXTB+Helvetica-Bold /ADVAAA+Helvetica-Bold findfont ct_VMDictPut
/LBAXTB+Helvetica-Bold*1 
[49{/.notdef}rp /one 3{/.notdef}rp /five 202{/.notdef}rp]
LBAXTB+Helvetica-Bold nf
LBAXTB+Helvetica-Bold*1 [9.96 0 0 -9.96 0 0 ]msf
564.9 747.54 mo
(15)
[5.57959 0 ]xsh
261.72 761.28 mo
329.16 761.28 li
329.16 727.68 li
261.72 727.68 li
cp
1 gry
f
266.16 758.04 mo
324.72 758.04 li
324.72 730.92 li
266.16 730.92 li
cp
f
gsave
266.164 758.008 mo
324.732 758.008 li
324.732 730.927 li
266.164 730.927 li
cp
clp
gsave
266.16 730.92 mo
324.72 730.92 li
324.72 758.04 li
266.16 758.04 li
cp
eclp
274.685 737.181 mo
266.395 752.342 li
272.951 752.342 li
272.951 750.669 li
271.722 750.669 li
274.464 745.69 li
274.464 752.342 li
278.719 752.342 li
278.719 737.181 li
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
0.03529 0.35686 0.65099 colr
f
0.274 lw
0 lc
0 lj
4 ml
[] 0 dsh
true sadj
274.685 737.181 mo
266.395 752.342 li
272.951 752.342 li
272.951 750.669 li
271.722 750.669 li
274.464 745.69 li
274.464 752.342 li
278.719 752.342 li
278.719 737.181 li
cp
@
318.214 737.181 mo
313.833 737.181 li
313.833 752.373 li
320.42 752.373 li
322.658 748.243 li
318.214 748.243 li
f
318.214 737.181 mo
313.833 737.181 li
313.833 752.373 li
320.42 752.373 li
322.658 748.243 li
318.214 748.243 li
cp
@
266.301 753.696 mo
266.301 757.447 li
317.584 757.447 li
319.663 753.696 li
f
266.301 753.696 mo
266.301 757.447 li
317.584 757.447 li
319.663 753.696 li
cp
@
280.328 752.372 mo
280.328 735.698 li
275.411 735.698 li
278.184 731.064 li
322.722 731.064 li
322.722 735.698 li
284.614 735.698 li
284.614 752.372 li
f
280.328 752.372 mo
280.328 735.698 li
275.411 735.698 li
278.184 731.064 li
322.722 731.064 li
322.722 735.698 li
284.614 735.698 li
284.614 752.372 li
cp
@
286 752.372 mo
286 737.18 li
298.387 737.18 li
300.154 737.116 301.603 738.219 301.509 740.237 cv
301.509 752.373 li
297.379 752.373 li
297.379 740.142 li
297.316 738.819 296.055 738.819 295.804 738.819 cv
295.804 752.373 li
291.706 752.373 li
291.706 738.819 li
290.193 738.819 li
290.193 752.373 li
286 752.373 li
f
286 752.372 mo
286 737.18 li
298.387 737.18 li
300.154 737.116 301.603 738.219 301.509 740.237 cv
301.509 752.373 li
297.379 752.373 li
297.379 740.142 li
297.316 738.819 296.055 738.819 295.804 738.819 cv
295.804 752.373 li
291.706 752.373 li
291.706 738.819 li
290.193 738.819 li
290.193 752.373 li
286 752.373 li
cp
@
312.383 737.181 mo
303.054 737.181 li
303.054 752.405 li
312.383 752.405 li
312.383 748.148 li
306.079 748.148 li
306.079 746.824 li
312.383 746.824 li
312.383 742.728 li
306.079 742.728 li
306.079 741.372 li
312.383 741.372 li
f
312.383 737.181 mo
303.054 737.181 li
303.054 752.405 li
312.383 752.405 li
312.383 748.148 li
306.079 748.148 li
306.079 746.824 li
312.383 746.824 li
312.383 742.728 li
306.079 742.728 li
306.079 741.372 li
312.383 741.372 li
cp
@
0.493 lw
322.343 753.474 mo
323.509 753.474 324.487 754.453 324.487 755.619 cv
324.487 756.784 323.509 757.763 322.343 757.763 cv
321.178 757.763 320.2 756.784 320.2 755.619 cv
320.2 754.452 321.178 753.474 322.343 753.474 cv
cp
@
321.834 754.752 mo
322.576 754.752 li
322.722 754.752 322.971 754.78 322.971 755.119 cv
322.971 755.444 322.741 755.5 322.523 755.5 cv
321.835 755.5 li
321.835 754.752 li
cp
321.834 755.755 mo
322.554 755.755 li
322.91 755.755 322.947 755.966 322.947 756.146 cv
322.947 756.229 322.956 756.564 322.999 756.698 cv
323.364 756.698 li
323.364 756.65 li
323.272 756.597 323.257 756.551 323.253 756.429 cv
323.234 756.031 li
323.222 755.724 323.096 755.67 322.971 755.617 cv
323.112 755.534 323.278 755.416 323.278 755.091 cv
323.278 754.624 322.916 754.498 322.554 754.498 cv
321.537 754.498 li
321.537 756.698 li
321.834 756.698 li
321.834 755.755 li
f
grestore
grestore
0 gry
%ADOBeginSubsetFont: BLQAAA+Helvetica Initial
%ADOt1write: (1.0.24)
13 dict dup begin
/FontType 1 def
/FontName /BLQAAA+Helvetica def
/FontInfo 8 dict dup begin
/Notice (Copyright (c) 1985, 1987, 1989, 1990, 1997 Adobe Systems Incorporated.  All Rights Reserved.Helvetica is a trademark of Linotype-Hell AG and/or its subsidiaries.) def
/Weight (Medium) def
/ItalicAngle 0 def
/BaseFontName (Helvetica) def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 47 /slash put
dup 48 /zero put
dup 49 /one put
dup 56 /eight put
dup 57 /nine put
dup 65 /A put
dup 77 /M put
dup 82 /R put
dup 83 /S put
dup 86 /V put
dup 177 /endash put
def
/UniqueID 43142 def
/FontBBox {-166 -225 1000 931} def
end
systemdict begin
dup /Private
11 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [-19 -0 718 737 523 538 688 703] def
/OtherBlues [270 281 -220 -207] def
/BlueScale 0.0437917 def
/StdHW [76] def
/StdVW [88] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
12 dict dup begin
/slash <1C60D8A8C9B854D08E823E34E98D69F07852149357481CB22577590C
C2367BB833216B> |-
/zero <1C60D8A8C9B7EF32A47D2AA10CC01BD74F486262CA3CBA2A0BB3D25A3
A094F02BD79F42A0A236349C843943C6914F47589F3954D0C018D1FE33AE62F4
AD6F7BB100F692008FA5232B949E365DCD3CA3A3EC8285D42D2BEFA> |-
/one <1C60D8A8C9B7EF327C10274AD9026AD10E2766BF7084C2014D15DE0295
8A6977C33F9C9651D5788EA2FB530B3EE42DE5824448> |-
/eight <1C60D8A8C9B7EF32A47D2AAF8C15BC9A859DEE3961E3E87D4A075B23
A11F4E1B8DA7A8772634B4ECDB883EF2DB44CDECFBE4E202B98695A94AFF523F
7B1AE2058D1C080DD98E0A32A86E55A2C0345F68822872F2557F26C80C6076DA
2C4604B53F935533F9962BA1F0D34FDB09574D345B8D74E00102970A9DAEDD1C
B4E8AB0A6367A1059EEA4ED1988A97012E4FE8C182E0A6ED4A9EB75CCC475DDD
AD950BFD81A4BB81CFB7C9BA7DACE650133273D2C6B02792661CFF7C7AEDD0C8
950995706397F734154AD83056F538F2A1EFF74A9D661B7E76DF498DEB5AEB27
315B3507F9DAF305> |-
/nine <1C60D8A8C9B7EF32A4731A9DB70B9490730918F3CC8A6CEFA5DBCDDDD
5B8FF631E5F2E3BEA7592C5DB8D17DFB2B2E4B0DA0B1CDB7CBCE67C1382E1BCA
B1CA0DC367CB2D59D0DA1A7C85131B5D767099977B59D2EE9CD09CE6C2F22826
E56502A470206F3EAA46E7E3E86C6D4D4258A80AAFAE933FB6A3325CB283E> |-
/A <1C60D8A8C9B64EDFA3F30AE40D82621F0FCB1DE3B8FE08B0132A2CCBB252
5814D0E06433BF12343DC9A9AB3FF78B46F8CC42B8A00C8B5EA738952A496397
7B57B3D18EEA0F5BB95C06FA8CB59D2805C2A2BCC67181B967> |-
/M <1C60D8A8C9B6B41CEC8259157919DBFFC0387AB03B82A38E0BA7FD31C0C9
A9756DFD39FD4BD480155A68D2E08D21C20BC3CEA4B95133EF2A2BF8F5EEFAD3
CF67237CDD989A41F7033AA8F7C11EFEE59FE8A38BB05EE69AE4B6EB65A6C23E
8D337DDC21023E73B350C7A7BCDD414F20B8F03B485777C7ADB7DA43B9> |-
/R <1C60D8A8C9B6079F1E4D8C18B43D708E4867E1D5DF87FFDFDA59C87E0DAA
C2980D72F189A927C7607FB955553C4E4B82FD6E924592BF3E5BCF70BD67C10F
BFCC049000E196CAB909156B2D7E5AD89BC25B1EEB84D6826D9E71A848125076
4CA7F6941E7E5A3FA03A6C1E3D8CFFF2F1E46B6C85653A4E4F151EE538164F20
ED0EF4C4DDC2D3E61A88EDB425566879BAB1370C523490E7EC92ECF6338DD3> |-
/S <1C60D8A8C9B64EDF7B9A268599F9CD8C4143A0E6DDDCF2A0054E6BC2F76C
64CEFA918C4E8C0A17BF13FEEAAFA3992570A221EB29D874F6372AE0D5147B81
D12AD995155CFC83207D350E887D4FEBD8084F48B3CC6796B4C5DD7C46D97C8A
BA91E1F709B61796E472D133E1651C4F266523B863949A58DEF11F7CBF27A2FD
BD87B6510960625D3CE0D8C2C732863F2494E0D388028B3EF679DC21468C0061
1AD0512E72DA1636CB7A> |-
/V <1C60D8A8C9B64EDF884A7D8E901D2F4533C16A14B652E2E01CB0C4A82BD4
AE8D918B8A9135C63318FE8084BF228A8B1FD8F9> |-
/endash <1C60D8A8C9B7EF322B918448B7160BDD44CB8458F60F408D1D231B5
250E757> |-
/.notdef <1C60D8A8C9B854D00D> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
/LBAXTC+Helvetica /BLQAAA+Helvetica findfont ct_VMDictPut
/LBAXTC+Helvetica*1 
[47{/.notdef}rp /slash /zero /one 6{/.notdef}rp /eight /nine 7{/.notdef}rp 
/A 11{/.notdef}rp /M 4{/.notdef}rp /R /S 2{/.notdef}rp /V 
90{/.notdef}rp /endash 78{/.notdef}rp]
LBAXTC+Helvetica nf
LBAXTC+Helvetica*1 [6.96 0 0 -6.96 0 0 ]msf
36 760.08 mo
(8011MS\261AVR\26108/09)
[3.90038 3.83983 3.90038 3.90038 5.82825 4.673 3.83983 4.673 4.673 5.05575 3.90038 3.83984 
3.90038 1.92027 3.90038 0 ]xsh
%ADOBeginSubsetFont: ADVAAA+Helvetica-Bold AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LBAXTB+Helvetica-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/slash <1C60D8A8C9B854D08E823E34E98D69E05EECC9E8705DB5F86B9930EA
7128BCC1A633977959> |-
/two <1C60D8A8C9B7EF325767EC41CBF510D1E0C71F1F1C039215CC32A5B90F
CF87168E35C28244745FCF47A9B7CE070B35171DB218CE7C8F2D9F0726293D9E
65C3C45297780FC122CECE1C36987116C8DB6BB559F3E2FA77AEB29702EDED93
3AF70BCDE4B644F7> |-
/three <1C60D8A8C9B7EF32A450E6CDCB2DBC464D59B250EEFF297922703F7A
1C62B0E2DD902F8B4278E9F98AECCD8BD128B20B17BEC7D8A3A1A65162C82E5A
8CE9866F72C565110868FD65D8C18A62564EFD1C8C46DBAB20D378988B1BB258
9905F17AF538B8272CCD92616DC49A1F2B14BC69E7CB92C844D3EDDCF325C584
8F599A6885AB739A36AA85201B953F058DEC541E4C0988CE6835E70930BE13F0
11B2CE417AF4A7D17EA8254FD592245E27F05D85E45036335FE7B7BC51E5AB59
02EE0E8226F2F0> |-
/four <1C60D8A8C9B7EF327C1027456714FC3BC7619810153E0E0BB1AFC3AE3
16C3E66D77684AF5C288D5749B76CF93B3D20F71F5A0E3789D4E186D0FDA28BA
D7075305BC124C6C5C0D7ED2C416E872E8670A5833B01> |-
/six <1C60D8A8C9B7EF32A450E6CDC47A46EBA62A986D8A4018CF2DEBD16CC9
7505CFB6B209B0A9FF5A258AA31DE23E1D88F734A7E48F8AF853626B7C39561C
3E52AD885CB4E560B9BBA8F7A2564D7FCB11AE5F639E6EEBCA772B6104B975CD
45A7CF9E774D11F805448B94627A866672C545B7299AC606F61FB363E9109DE6
AFC55F57428B80767B420D035D25C121384CAD9F93E64F83326C7580B961> |-
/A <1C60D8A8C9B6079F3517E07AE194467F2600CBBF80CDACFF67CA946405EC
4118A902AA9E3AD1C2ACBC1C96ADCDF278A5B068D6AD3EC85B0F1FA9ADA650BA
DCDD259A1E80F048D046> |-
/P <1C60D8A8C9B64EDFA3F30AE4FF71B5F4ACB06C7830091ED76355AF57E563
BACE6B9F18382092F649F10A78153D9E643FCA4FB2F0EA425397CD32EF53DFCA
2A21E66880A9FE4531E700C6054694F979479334C9EA> |-
/T <1C60D8A8C9B7D8BE41A64DAA76A975BC551F108B068D01BDBBAC2AD27262
B59952A766BB13F857E80A9C1CAD3ED3A7ACB4> |-
/a <1C60D8A8C9B7EF325730A2907F61B00205C0A296C9DF32E9DC65B526E2F4
C8ADC580B897B7206A5DA59C9696BB00EA7F1A0A06C73023E46EC804A076F02D
F4BDC69A6135461545FA8A14BD27F8CF4F25F4943E37F1D1C65276DECB4E9D6A
C0EC48F60EFDBE12AA6587FCF164CC3DB45D2B5A65777B03419394CDDD24FF22
F21243F8E28ED1FF2DD09C8E2A84D298381AAD9550B39360621CE1C759F80798
D4E2E93482B63D0349BE8E88D5485F93034964B138E766D0A08074C8EC8EE58B
FBF92479BF1434BFA703> |-
/e <1C60D8A8C9B7EF32A1CB45752FF6523DA5288185EF43DD045146AAD81675
EF96A1DDE9797BFF08369703AB5B932EB4FC76842B8FAFEA26499EB28D9010BF
45781D64B0753AFDAAF76627560E41BCFD847C893FE9E9680771D287E1806D72
84DB4BF9596E39109D2864B1FF> |-
/g <1C60D8A8C9B7D8BE1A3055587B34EC2A3DF2B79203F4050AA0B5738ED638
04380D2E13E060816E3421AEA1DC12A32CB72F12790D0531C0BCCFA2CD650E69
BF11A8A0B494E5997E2753F4DC7CC615950DE260CBFC81E5B438A30B9D1AD997
BAB5450F1B8057E9A08FDF0718C939D7BA23C215F3022BCED0B9A537C28F8186
7362D2D294B15570F2321017B898104E0838A83FEEF95313323561CAAA94467F
81A81D82605DBD0767EF388643166EBADEB4C9811852DF8D45F955B91E9BA5C8
9189E75A5728690EB0914B68BFB3277365BBB1F1EFD1E389E99F88EB021EE238
5C968A7A43FF69> |-
/m <1C60D8A8C9B59F85DBED304F205490E957BA80A7CE923989279D287A3DB9
7E93876C271A2C24EB89F39ADD151395A0382BD3CF306DD3500A44E02FD331FF
5F6833EC31518A35916D67D8BC58A88311498E0D46D0A13D75376763AA882382
C8F3547A34FF4AF65F97E4FFE5FF22577B793A63A62C968C68E5E59ED9FA05A5
2E2BF36653087848C6B445B278603F0C520FEA9021ED3917FC5606815DEFC9D7
9B> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LBAXTB+Helvetica-Bold /Encoding get
dup 47 /slash put
dup 50 /two put
dup 51 /three put
dup 52 /four put
dup 54 /six put
dup 65 /A put
dup 80 /P put
dup 84 /T put
dup 97 /a put
dup 101 /e put
dup 103 /g put
dup 109 /m put
pop
%ADOEndSubsetFont
/LBAXTB+Helvetica-Bold*1 
[47{/.notdef}rp /slash /.notdef /one /two /three /four /five 
/six 10{/.notdef}rp /A 14{/.notdef}rp /P 3{/.notdef}rp /T 12{/.notdef}rp 
/a 3{/.notdef}rp /e /.notdef /g 5{/.notdef}rp /m 146{/.notdef}rp]
LBAXTB+Helvetica-Bold nf
LBAXTB+Helvetica-Bold*1 [18 0 0 -18 0 0 ]msf
370.14 40.02 mo
(ATmega164P/324P/644P)
[12.9906 10.9925 15.9967 10.0026 10.9925 10.0026 10.0026 10.0026 10.0026 12.0008 4.9986 10.0026 
10.0026 10.0026 12.0007 4.9986 10.0026 10.0026 10.0026 0 ]xsh
0 39.24 mo
365.16 39.24 li
365.16 32.22 li
0 32.22 li
cp
f
0 63 mo
36 63 li
36 18 li
0 18 li
cp
1 gry
f
32.52 747.12 mo
36 747.12 li
36 740.1 li
32.52 740.1 li
cp
0 gry
f
36 747.12 mo
255.48 747.12 li
255.48 740.1 li
36 740.1 li
cp
f
%ADOBeginSubsetFont: BLQAAA+Helvetica AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LBAXTC+Helvetica dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D00D> |-
/parenleft <1C60D8A8C9B81F2C36CCD20CF8942181AC7F4474F2382F7D30DE
700E9D560AD8BD19EE22EACC9412684566AC63B0B33E5FC85E602E759FFC49BF
47306AE7BD9165A4E1D3> |-
/parenright <1C60D8A8C9B81F2C36CCD20CF894218194033859F410DA60583
B3351294315C6F5C4ACE205E4813D6F508658462783E35F08D53213E9F0ED798
4671681D402251A6FDC72> |-
/comma <1C60D8A8C9B854D088E8E1B4A929C4983E8B0FE499C85D44EE9545D9
C727E0361A8C250C8B12674AC7> |-
/hyphen <1C60D8A8C9B81F2C3AC7E044D0946E6D2305FBC1A5806554FDBB52A
75CA669> |-
/period <1C60D8A8C9B854D088E8E1B4A929D159FDB35EBB0A92B2CB5440> |-
/two <1C60D8A8C9B7EF32574ED2CD7E030E235A78DE7C157B301D9F714898A7
7988FEBF6D99B65383FF02504025F2F803F7AA1202974CDA083D6C42523402CE
33E90490F1E02088FC3C50E8C63A9FF243AF62D527B6BA67294C62B404FAD5C3
12D1BDBFAF8BF39048069AF835BC96F39A7275F3B466A0A5A19B9F7235EC0FB1
E4FEB02B613916D7> |-
/colon <1C60D8A8C9B854D088E8E1AEAD30C92AB0D98EADF1DE7A77B7CB74CD
7251B14F346AB2E7541FDEE4> |-
/B <1C60D8A8C9B64EDF8861093A50D70CE704C3B99B255E57C25F5628D6A25D
CF329FDC490B240CA8E3263684788E9E559211DF7A652BCEA6E7473D11540293
3A862D3C0BED9681856F5ACE8B339645A6A4CED62CD1A26855F2D51956984EE1
3F47812E810D9E8C98922B6C1937C1681825270D4D77D4BBDEECB712B7702AEE
C61BE96AFEBE20DFCCFCC19F8646EA0A427DFBAA43CEB1ACB616853A6CD4C3E4
CEE20B743FFD4303148B5B4D479ED1038084D37CCEE34880877DCE43721DF888> |-
/C <1C60D8A8C9B6079FED21EC1DA43783C3C67A5FBA5FB885DEE16CDCDCAF1B
7E5C168D0377F501B09EEE06FA7720C35D9E5B5FBCE148C17092F43DAB7E2D94
E9FE9DCFFADEA91F9C52F49E3053420DCED72662293A521E028C39AF83F75FC5
4A> |-
/D <1C60D8A8C9B6079F1E08EB12991814F2BEFDD99E857D46CC83B089892D70
768EDFB737CEBE140DF668BA679C989F178F8C7B580D23B4B614D8D70F34E9A4
87B4AA37370316974673AB> |-
/E <1C60D8A8C9B64EDF885E9C70E86F4D6078E7D1BF0D69911FD55CAA5C46B6
C6C433175B8381217040BB42F142B1A0E1EA4F6BED24146D2DB65AFCA0> |-
/F <1C60D8A8C9B7D8BE41A64DA557BA3801C50A6D0B90DD03689D1958230FDD
078C54AD8D0DA7DD6F0C9EC4C6354485AE4B93FC66781C> |-
/H <1C60D8A8C9B6079F3517E07A2A32EE8D09F795FB6E9F11AE46C75AA31D50
B194B413469264EA3867DFEC1283FAD051B3C6B29B8DCA4E1CF3E914FCD7B445> |-
/I <1C60D8A8C9B854D0A3953AFD56E13A0A68A3547B5275504502229C694F14
98D4> |-
/K <1C60D8A8C9B64EDFA3F30AEA5DF4FD401A7F234D8B48713128AD4E4576F5
1EA758FCC04623E76F0392C65BD3153165595668DEA1A39FCBD3CCA6EA172D73
74581D5F> |-
/L <1C60D8A8C9B7EF3257710D8E45FDED8109BBDA794C5EEC6C4DCFCB68A628
CD21FC17F8D9EBEE> |-
/N <1C60D8A8C9B6079F1E210C2F9D6786425CC99EBE4B6CD195D3C159170B14
2780B60B004B88EC635D5140089E50EAFFA241767EA05CB13B768D326E39D0A6
3970CC75B69D7BE71D789A78E82369A15910> |-
/O <1C60D8A8C9B6FF867A21BA19EF0C570BB6C4AEDB905D3E548C322F786DA7
0CDAEFE3DEF4849E1D1588C3A22DCFB11573EC9A318A3B019A45D0FC4FCEE76B
AD39BBA1E526700FB4A11015D71862856C2D89337A110F371091E0B563CCFD9E
35D4> |-
/P <1C60D8A8C9B64EDFA3F30AE4AB14FCCB57D446AF805F45D1BE197D47C6C2
0943FECBF4EB404456C629F1F5342EEA681381C7461EF00E178F4482E2C7F7B3
9C94B8CCFF41619BA5DC67957F7F81> |-
/T <1C60D8A8C9B7D8BE41A64DAB684ED090D9F4D4439340AD4301BD70587A67
BA95C799E46FC7C8D88E9FFD990A> |-
/U <1C60D8A8C9B6079FED21EC1DD9E4F86C05723BD153DC25ACCB72ED4F0814
E32635C8A90E12D3CBE19E234F6769255763D8A7BAF6A13DF1E384206C4BD9C4
AAD02D927F96B3EB70> |-
/W <1C60D8A8C9B5D6EF151AEEAE3875D8E2A5C951C25CCAE17076987B69AE17
3FEA1B3C427ACE911C16E8FEA8B284EF3D308129F86EF60E943E71DF041FBC7D
AC2168561652391785B0FFA7DC94A36F5D794FD1C69C6FAE6A3307BC346A> |-
/Z <1C60D8A8C9B7D8BE6A3E2AEEF2640CE8DB5262F2C5EDEFC618050D7ABB3F
3E1430E049671B0B41552431356C5F84A5F24330D364E5> |-
/a <1C60D8A8C9B7EF32A0B922DB529D70E6EA400CC7CAD541AB907F903F935F
123595D5AAC76B7423BF56DAA953AABB30D3C158CBC49165B8067C6456A899E4
3A57DF6E4E8AB8002AB2FFE795F17DA3C0165F34038912EBD94962135F448EB9
A90E2C7E6E7F31818C09B9ED66D47DE4FCBEA13796BDA6590474BAAB3926D1FD
12190612E017AA015628D2E79EA8BD9BA8890ADD2020DB8778488A172689E9B4
E5800C4FC32EAC7FC1BF3EF2690C8233D8F11C29611AE962> |-
/b <1C60D8A8C9B7EF327C10274A017D50D0B79D520E8A6202A86E3798B68C88
3F2A00A228A8D3BD4B72A579020E8C18FEDCA09FC0E3429D99B1C24ADCD0AC4E
EFC3A966737F961C9202D8EDD44B44A693FE51414C15324869700E53C7B38758
7F8318D8232F82D503103EE5B820B0DF0BE22D1B4656A098694F40E8D44D99C4
61B751FBE10F9873814343E4DE07A8CCC094D2DC9819E5D7C44D788CB7F4378E
064E14049D09F8686693B208AE85DDCE327373F5E246A50D857DC427EA> |-
/c <1C60D8A8C9B7A73D329D14FC5ED04B22BEF11360501EE1499496C476E815
0EC3BDD954DBEADE8E9C14890D9CD9DB76F31AE11D3417AD4A86CFF13437B5FD
BD7396F24B7F94C12C61C297C734538546A29AF94483114D66> |-
/d <1C60D8A8C9B7EF32A0BAF021E6128CBCD055133316849E00736C24057076
3FFBEAA146CA9297CF7D3847B7CF1BE84FB2A37E5E555C53A806DE551FF53E55
D61D00981406A03EADD7AE8D33EF7217E17615CDCA7C18A3E3E1E13B179B4308
BD250D1E864A8A86D9BF7E50C7EC9522C99BD55A4F1A52E8A636FC1CA9AC7BFB
9D973089D39AA376C816268115093BC648CEB265DF83> |-
/e <1C60D8A8C9B7EF32A0BAF02E48E9B39AD7C7181F03C1667A89DB68F4C202
1D90AF24B2D47013ACA99B4B2D769B990015FB6EFC7E8ADB53D7F0A72F6495AC
A0439C9D3724916322C63953AF89B727882819DFC99951D61BFC3A47117C933D
D3648A021C5AF4E9570A53> |-
/f <1C60D8A8C9B854D0A3953AFC308C88F2CB7B77611DE17001C91B65CE86C8
891C39A4DBCDDE1373931B89EF13785E617F99570B386BE99D1A576D0D1701D2
F253DF8B3192240780F3E221EB68A6> |-
/g <1C60D8A8C9B7EF3227AC78F20225D02AD1F5838626D1D2CB26D9A686345F
DBA7E6AD7CBBFB0968E5439577010C655F74DB6EC4A53F96DD554986565E4345
C3B0DB42345596269AD0BEDF0DE0FF0CEC2214730A572502B5B1C377714234C3
B835458280E4747C6986CC44F3A27E4CCC92606F912C02778569997A6186F8A1
606F089477CA3B9FEB77CDBA1E20BDD3E0AF3FDCB15E3FF07A1424B7C6719CE0
9398ACEECAAF6B2812773D6272899C> |-
/h <1C60D8A8C9B7EF327C10274A017D50D0B79D52072757441F46A9E3044975
4F52968402CD3736F71D6E09A15E2046342DF42A864D37373E0A213DE941C6F0
11296A017FBEA0AE0137A10664047E> |-
/i <1C60D8A8C9B88C082599D5E95652E4745C17562AE47DDBD30E7054F041D7
2A7354004DF70944005F20755FAB3631> |-
/k <1C60D8A8C9B7A73DEE9439F98A6760116E53D02CD3639A4E206C0D442471
19E04D95FA72AF4CC3263E0911BCDDE695C914CD0C4AFF3DC9857E6995DD10EA
D2EA0AD1> |-
/l <1C60D8A8C9B88C082599D5E898B54D665A852C4BD97DFF418DFF9C25960C
0EAF> |-
/m <1C60D8A8C9B6B41C803D68C39EF50D06E406D806E0103B4C2937F43F706F
E45E46BB4B168951587EB26A51BD9E5D6D15548973928DA7BD71E5C6A2EC7542
58679A8719AC099ECB167292DC3AC16D6A6399789AE1244C2D9A7EDD1242D52D
A81BBE025DB4544A719A686DB3A0393D2301EEF964B14766F22C4A5827> |-
/n <1C60D8A8C9B7EF327C10274A017D50E5277BF0D0EBCB370A96BE9DA56325
4EC441C4BC3817B6ABCAA45C3FADDF2A0C1FDBAFB2BC83F47DAFA77A786BA902
BA43197292E50CF57803A333B50FFCC316B4278D48D0702F544078D86E929B14
A38322C9A0C5BF9B9E5C> |-
/o <1C60D8A8C9B7EF32A1EB0E906A9534468E05CEB1010836670827B7F6AFA2
CC00AD8F9832B5E57EC7BD21A33599CE96350BC4CAB33AA09D5134F6F8CF8089
D97FF4A8EED59E93E5BC94B6181F6AD989C60A6089DE02A32BD22539CE> |-
/p <1C60D8A8C9B7EF322792C3BF0D38904A73F4440F6D92D5F5AE09CC018066
468E681543C8F047ACFD615B747546B5480444F746C2E0CD698A8961C13AF2BF
3940EE05278AAEFC066B11F108A32A247BB7A1777E1A71A35D0F71427779DCE4
A1F61E27FEB716A84B084E0A293D7F37477EB4DB407CE06D6E55EF820764AC64
86> |-
/r <1C60D8A8C9B81F2C6DADD03096566F18A44C12756941A411C99A198CC8D4
5A7D128B0AC7E4BF3CECAA38DF996F9A6C482DB9F23D69FD46524CB92965AC6F
9D4D369C7898CDC92C3F38BFBF2273026F7CCF0E2F294158F88D37A82B162157
72> |-
/s <1C60D8A8C9B7A73D329D14FC63C56EEDE3F9A8460FEBA256258B5C852281
3839FED92DE3C47FB08E82DAD239D7D316E4DB98949C40B450B767A1D87B0ABE
0011CCD021B6229F454B1FF5E328C5CF8EC8EFFD81D3D2892F60438084072E44
AFC3709CC245EE12E4AC5F88F724A26A331F44C1FA0DE44324AECA> |-
/t <1C60D8A8C9B854D08798C221F1632F11AD0FAC820137C5F0FDBBEBF17E1C
0D647913022A839A37663E0CE3B897F4D89F6C2CEAC84AC3D591D5B583708835
3D9095E679DCF29A> |-
/u <1C60D8A8C9B7EF325758E576B7BAA1EFA82EFF7976BE67CE506354F22E3D
1B078EDAE7715C61BE16B3CD4B647E2C68818E308CF0BE659E73BA193580128E
99771A6AFDBFEB4E9486BE6CBE5D0A068E2F3382B692BCB6E47C62554398C9E5
6946239346863C679F19> |-
/y <1C60D8A8C9B7A73DB586573D0157E99900164D3426B7076627BC2EECA012
86D768DC747555489A92E6150F2562090A782510749223A2D01B0EE6374EEA8F
B8F18250484D2C6B565CDCA8D95B100B7B1E0289ED25E0E350438F56B28A332A
DDF034CB8EDC264C3ABAA85278C66F3E4B6419> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LBAXTC+Helvetica /Encoding get
dup 32 /space put
dup 40 /parenleft put
dup 41 /parenright put
dup 44 /comma put
dup 45 /hyphen put
dup 46 /period put
dup 50 /two put
dup 58 /colon put
dup 66 /B put
dup 67 /C put
dup 68 /D put
dup 69 /E put
dup 70 /F put
dup 72 /H put
dup 73 /I put
dup 75 /K put
dup 76 /L put
dup 78 /N put
dup 79 /O put
dup 80 /P put
dup 84 /T put
dup 85 /U put
dup 87 /W put
dup 90 /Z put
dup 97 /a put
dup 98 /b put
dup 99 /c put
dup 100 /d put
dup 101 /e put
dup 102 /f put
dup 103 /g put
dup 104 /h put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 109 /m put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
dup 117 /u put
dup 121 /y put
pop
%ADOEndSubsetFont
/LBAXTC+Helvetica*1 
[32{/.notdef}rp /space 7{/.notdef}rp /parenleft /parenright 2{/.notdef}rp /comma /hyphen 
/period /slash /zero /one /two 5{/.notdef}rp /eight /nine 
/colon 6{/.notdef}rp /A /B /C /D /E /F 
/.notdef /H /I /.notdef /K /L /M /N 
/O /P /.notdef /R /S /T /U /V 
/W 2{/.notdef}rp /Z 6{/.notdef}rp /a /b /c /d 
/e /f /g /h /i /.notdef /k /l 
/m /n /o /p /.notdef /r /s /t 
/u 3{/.notdef}rp /y 55{/.notdef}rp /endash 78{/.notdef}rp]
LBAXTC+Helvetica nf
LBAXTC+Helvetica*1 [6 0 0 -6 0 0 ]msf
41.4 93.48 mo
(SPMStore Program Memory\(Z\) )
[4.02004 3.96004 114.36 3.96005 1.64819 3.35999 1.97818 3.35999 1.62 4.02005 1.97995 3.36002 
3.35999 1.97995 3.31619 5.03998 1.62 5.03995 3.29999 5.03998 3.29999 1.97815 124.38 1.97815 
3.64615 2.03995 0 ]xsh
%ADOBeginSubsetFont: ZJXAAA+SymbolMT Initial
ct_T42Dict begin
0 -0.219 1.109 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /ZJXAAA+SymbolMT
Type42DictBegin
[<00010000000c000c000c000c4f532f3284f3e872000000cc000000566376
74202ac4fb8500000124000005046670676df530c471000006280000050f
676c7966b06f9754000016580000038868656164c5ad5c6500000b380000
0036686865610f2d038100000b7000000024686d74787750493e00000b94
000002fc6c6f63614fe24f2b00000e90000001826d617870020305a70000
1014000000206e616d65ff9a511500001034000002ae707265707e0fc165
000012e40000037167646972000000000000000000000000000104cd0190
00050000059a053300000125059a0533000003a0006602120c0305050102
010706020507000000000000000000000000000000004d6f6e6f0040f020
f0ff058cfe460133080b01c280000000000000000000055d0031054c001f
054c001c0394001b0000ffe10000ffe10000ffe4fe59ffed056b0023fe6a
ffdc270f000000b4000000b4000000000000000000610025005e0029004a
00c200f000be012a005000c0ffd0006300580277002d004a008f00b700c0
00de004400640002001a017c0020ff9c008c0026008300a00039041affb5
004c00e8080f00160024003a016f000600150067009e01dc0049004b002d
003b00470089007200470051006700f7013801dc0001000a005d00610094
009b00be00ce00df00190026002e00d6010701f7ffbb004300530063007b
00b900de0542058b0013009100a700a900c100e5012e01a401ea03eeffb5
ffccffeb0026002900310036005b00620062009200a100a700a700cb0223
03a3ff1aff7bffa8ffc8001c004400ab00b400c100c500ce00f601200156
016302a60379fefaff6effab0000000c00150024003a003a0041004c004e
007400a500ce00d600fb0109010901820220023f0263fe11ff170007001f
0020002b00530055006d007e0088008d0094009a009f00af00e8013f0168
01cd01ee020d028002bf0550074e074e09bffdd5ff47fff6000c000c0021
00290057006b0078007e009200930096009a00a100a500c400c400f000fd
0136013b013e01490152018f018601a501f8022b02db02fb030e030f032c
03590360037c03e203f90805fd4ffe97fed0ff50ff78000100010006000a
0025004300440054005c007000730077007c00800088008e008e00900091
00ab00ab00b000b900bf00bf00c300dd00e300e300e600e800ec01020105
0109010a012a012a01300130013b0140014a0155015f01670173019701b6
01b801be01c501ea01f4023402360239024f0252026702700274029002b0
02b102bf02e402f302fb033a03450373037f03ab03c203c803d203da0400
044a046104690475049404b004d504f004f404fe050005230523052e0561
05a0fda2fe4bfe5bff26ff3bff62ff8dff90ff90ffe80007001e00250026
002700440050006200630066006700700070007100710079007e00850091
0096009e00a100a100a500b600b800bc00c000c200c500c600d000da00dd
00dd00e200f700f901000102010501150121012d01310136013d01470147
015a01680176017c0180018e019a01a501b101b501b501c001dc01ea01fe
023902560259025e0276027c028d0297029b02b902c002d602db02ff0306
030f03180347034b0357035b035e0374039603980399039e039f03b803c0
03c60402043a045004720483049004a204af04c704d304dc0530053b058a
058a05b005b505bd05e60612061b0634065306b80706087908e708fe00b3
00c700b100b5000000000000000000000000000000000188011001b100ad
01e70304038002cc0258020b02d6018204cf01270274023c0100058e006e
00f202c0021d01d2023701570363015a002500820166015b009d031c03a2
034a00cc056e0153035001640053049700fc05c30061058a02b20302058a
03fd01f902ab0068008e026bfda9ff59010e005301a402a600ab007d003c
0029041a00d6023904b90125022902bf07ae01b8003e07060339033a080f
07ae01a403e300000053080f01ea006103e2004c00e102a6035202a6080f
00e601dc074f006e00fd03af0000007d003e01a4fe1100a905590260011c
02a4014cfd83fdd8039bff9f011902e20000fd11fd41024301b60155ffaa
02be00ef0097fef904e000be02db005501dc0063006b007800f200530077
003a015600fc020d0029005300610070403f3f3e3d3c3b3a393837353433
3231302f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615
14131211100f0e0d0c0b0a090807060504030201002c4523466020b02660
b004262348482d2c452346236120b02661b004262348482d2c45234660b0
206120b04660b004262348482d2c4523462361b0206020b02661b02061b0
04262348482d2c45234660b0406120b06660b004262348482d2c45234623
61b0406020b02661b04061b004262348482d2c0110203c003c2d2c204523
20b0cd442320b8015a51582320b08d44235920b0ed51582320b04d442359
20b0042651582320b00d44235921212d2c20204518684420b001602045b0
4676688a4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c
00b0172370b101173e01b0172370b10217453ab10200080d2d2c45b01a23
4445b01923442d2c2045b00325456164b050515845441b2121592d2cb001
43632362b0002342b00f2b2d2c2045b0004360442d2c01b00643b0074365
0a2d2c2069b04061b0008b20b12cc08a8cb8100062602b0c642364615c58
b00361592d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d
2cb01243588745b0112bb0172344b0177ae41b038a45186920b01723448a
8a8720b0a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d
2cb0022546608a46b040618c482d2c4b53205c58b002855958b00185592d
2c20b0032545b019234445b01a23444565234520b00325606a20b0092342
23688a6a606120b01a8ab000527921b21a1a40b9ffe0001a45208a545823
21b03f1b235961441cb114008a5279b31940201945208a54582321b03f1b
235961442d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d432343
0b2d2cb10c0d432343650b2d2cb10e0f432343650b2d2cb1101143234365
0b2d2c4b525845441b2121592d2c0120b003252349b04060b0206320b000
525823b002253823b002256538008a63381b212121212159012d2c4bb064
51584569b00943608a103a1b212121592d2c01b005251023208af500b001
6023edec2d2c01b005251023208af500b0016123edec2d2c01b0062510f5
00edec2d2c20b001600110203c003c2d2c20b001610110203c003c2d2cb0
2b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b80241
23701020b802414520b0005058b00161593a2f182d2c21210c6423648bb8
4000622d2c21b08051580c6423648bb82000621bb200402f2b59b002602d
2c21b0c051580c6423648bb81555621bb200802f2b59b002602d2c0c6423
648bb84000626023212d2cb4000100000015b00826b00826b00826b00826
0f10161345683ab001162d2cb4000100000015b00826b00826b00826b008
260f1016134568653ab001162d2c4b53234b515a5820458a60441b212159
2d2c4b545820458a60441b2121592d2c4b53234b515a58381b2121592d2c
4b5458381b2121592d2cb0134358031b02592d2cb0134358021b03592d2c
4b54b012435c5a58381b2121592d2cb012435c580cb00425b00425060c64
23646164b807085158b00425b00425012046b01060482046b0106048590a
21211b2121592d2cb012435c580cb00425b00425060c6423646164b80708
5158b00425b00425012046b8fff060482046b8fff06048590a21211b2121
592d2c4b53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b
2121592d2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b0
0426024b545a8a8a0ab012435c5a58381b2121592d000001000000028000
65f2eb1d5f0f3cf5081d080000000000a348bc3b00000000b24cd4e1ffff
fe3e08e7080b0000000b000100000000000000010000080bfe3e00000856
feabfc2e08740001000000000000000000000000000000be04cd00670000
000000fa00000200000002aa00e405b40061040000250464005106aa0047
063900480383003a02aa005402aa002d04000091046400250200006e0464
0025020000910239ffff0400004a040000f00400002c0400005304000020
04000062040000590400004c0400007c04000051023900ac0239008b0464
003c046400250464003c038d00580464002505c700140556002205c70012
04e5001a04e30027061b004804d3002305c7002602aa0033050c004e05c7
0025057d0014071d002505c7ffe805c7004c0625002305ee004a04730026
04bc003804e3003b05850016038300470625003805290042065c002504e3
001602aa00a706e7016a02aa004a054400250400ffef040003da050c0054
046400790464004603f4004503830049042b0047034affff04d3002d02a2
004304d300450464001504640031049c007c042b00280464005804640037
042b00590464006904d3004e0383002b049c004705b40041057d005003f2
005b057d002f03f4005b03d700d3019a00a403d700d60464003404f60013
01fa00790464003c0156feab05b4003604000000060600b9060601300606
00f7060600f60856002907e5004b04d3005d07e5004b04d3005d03330066
04640025034a00690464003c0464007905b4006603f4004103ae006a0464
0025046400250464002404640034080000e604d302390800ff8d05440020
069600e4057d002d065c005e07e501820625004e0625004e069600610625
004d0625004d05b4003805b4003705b4003b05b4003b05b4003a05b4010a
05b4010b0625005305b4004a0652006306520063071f00320696002e0464
00540200009105b4003004d3003004d300300856002907e5004c04d3005d
07e5004c04d3005d03f4002f02a200410652006306520063064a002a05b4
002b03120053031200530312005303120000031200000312000003f401a4
03f4001c03f401a403f401a40652007502a2003e02310000057d02a6057d
02a6057d00430312ff930312025d0312ff93031200230312028103120023
03f4001c01a4001c00000032003200320032003200320032003200320032
003200320032003200320032004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c004c004c004c004c004c004c
004c004c004c004c004c004c004c004c004c00a200a200a200a201030103
01030103010301030103012a012a012a012a012a012a012a012a012a012a
012a012a012a012a01c401c401c401c401c401c401c401c401c401c401c4
01c401c401c401c401c401c401c401c401c401c401c401c401c401c401c4
01c401c401c401c401c401c401c401c401c401c401c401c401c401c401c4
01c401c401c401c401c401c401c401c401c401c401c401c401c401c401c4
01c401c400000001000000c0006700050000000000020010002f00400000
00ed050f000000000000000a007e0001000000000000007f000000010000
00000003000f007f0001000000000004000f008e0001000000000006000f
009d000300000409000000fe00ac0003000004090001001e01aa00030000
04090002000e01c80003000004090003001e01d60003000004090004001e
01f40003000004090006001e0212547970656661636520a920546865204d
6f6e6f7479706520436f72706f726174696f6e20706c632e204461746120
a920546865204d6f6e6f7479706520436f72706f726174696f6e20706c63
2f5479706520536f6c7574696f6e7320496e632e20313939302d31393932
2e20416c6c2052696768747320526573657276656450454c444b412b5379
6d626f6c4d5450454c444b412b53796d626f6c4d5450454c444b412b5379
6d626f6c4d5400540079007000650066006100630065002000a900200054
006800650020004d006f006e006f007400790070006500200043006f0072
0070006f0072006100740069006f006e00200070006c0063002e00200044
006100740061002000a900200054006800650020004d006f006e006f0074
00790070006500200043006f00720070006f0072006100740069006f006e
00200070006c0063002f005400790070006500200053006f006c00750074
0069006f006e007300200049006e0063002e00200031003900390030002d
0031003900390032002e00200041006c006c002000520069006700680074
007300200052006500730065007200760065006400500045004c0044004b
0041002b00530079006d0062006f006c004d00540052006500670075006c
0061007200500045004c0044004b0041002b00530079006d0062006f006c
004d005400500045004c0044004b0041002b00530079006d0062006f006c
004d005400500045004c0044004b0041002b00530079006d0062006f006c
004d00540000411500120227022702260226006f01160001005f01160001
004f01160001003f01160001002f01160001022fb22f1f1fb8022eb2a01f
1fb8022cb21d291fb80224400be11a1f3127121f3c27291fb80217403b6c
291fe0aa191fe1aa191fab27321f883c321f833c321f2f3c321f7627321f
3c27291f27aa291f6f276f6d6f866f87043700161600000012110840b801
e3b655140914093790b801bf40390790bd0790b307906707906407905707
904607903607902e07902b079025079024071408120810080e080c080a08
0808060804080208000814b8ffe0402b0000010014061000000100060400
0001000410000001001002000001000200000001000002010802004a00b0
13034b024b5342b0382b4bb807ff52b0372b4bb007505b58b101018e59b0
382bb00288b801005458b801ffb101018e851bb0124358b9000101ff858d
1bb9000101ff858d5959014bb0c063004b6220b0f65323b8010a515ab005
234201b0124b004b5442180016763f183f123e113946443e113946443e11
3946443e113946443e11394660443e11394660442b2b2b2b2b2b2b2b2b2b
2b182b2b2b2b2b2b2b2b2b2b2b2b2b4b5079bc001f01750007001f0174b3
071f93072b2b2b4b5379bc00900175000700900174b3079093072b2b2b18
1db0964b5358b0aa1d59b0324b5358b0ff1d5901b341b5407b4565234560
23456560234560b08b766818b080622020b140b54565234520b003266062
636820b003266165b0b5236544b040234420b1417b4565234520b0032660
62636820b003266165b07b236544b0412344b1007b455458b17b406544b2
4140414523614459b9004e0162b12a8e456523456023456560234560b089
766818b080622020b9002a01624565234520b003266062636820b0032661
65b80162236544b02a234420b14e8e4565234520b003266062636820b003
266165b08e236544b04e2344b1008e455458b18e406544b24e404e452361
445945695342014b5058b108004259435c58b108004259b3020b0a124358
601b2159421610703eb0124358b93b21187e1bba040001a8000b2b59b00c
2342b00d2342b0124358b92d412d411bba04000400000b2b59b00e2342b0
0f2342b0124358b9187e3b211bba01a80400000b2b59b0102342b0112342
002b752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7373737373001845694418
456944435c58b9ffc00280b2121f322b5900000000>
[905 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 152 109 <00010000ffe4074f03fd00110066401f65006503770387039703a7030606
070f0e0a0b030f4b01001d02074b030003b80231b607011a1307a606b801
aeb30a0ea60fb801aeb70b0b0a1912213f182b4e10f43c4d10fded10fded
4e10e64d10f63c002fed3cfd3ced1239390110c910c93130015d01211521
1616172326002735360037330606015005fffa018f72365075fea4668401
3c77503978022161a4b3859001283a384b01139187bc>ZJXAAA+SymbolMT AddT42Char 
1 0 0 <0002010000000500050000030007003b401e06076302010005046303000a
0605630303021a09070463010019082938182b4e10f43c4dfd3c4e10f63c
4d10fd3c003f3cfd3c3f3cfd3c3130211121112521112101000400fc2003
c0fc400500fb002004c0>ZJXAAA+SymbolMT AddT42Char 
ZJXAAA+SymbolMT /CharStrings get begin
/g109 109 def
end
ZJXAAA+SymbolMT /Encoding get
dup 32 /g109 put
pop
end
%ADOEndSubsetFont
/LBAXTD+SymbolMT /ZJXAAA+SymbolMT findfont ct_VMDictPut
/LBAXTD+SymbolMT*1 
[32{/.notdef}rp /g109 223{/.notdef}rp]
LBAXTD+SymbolMT nf
LBAXTD+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.7 93.48 mo
( )sh
LBAXTC+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 93.48 mo
( R1:R0None-)
[1.67999 4.31522 3.35999 1.62 4.38 105.48 4.38 3.31918 3.36002 58.02 0 ]xsh
41.4 102.96 mo
(INRd, PIn PortRd )
[1.6554 60.42 4.3194 3.35999 1.62 1.68 49.26 1.68001 3.32341 1.67999 3.98946 3.32339 
1.98535 167.7 4.31946 3.35999 0 ]xsh
LBAXTD+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 102.96 mo
( )sh
LBAXTC+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 102.96 mo
( PNone1)
[1.67999 119.16 4.38 3.30002 3.35999 57.36 0 ]xsh
41.4 112.5 mo
(OUTP, RrOut PortP )
[4.6698 4.3338 53.1 4.02005 1.62 1.68 4.3338 48.6 4.66978 3.3 1.6698 1.67999 
3.96005 3.36 1.99974 163.02 4.00385 0 ]xsh
LBAXTD+SymbolMT*1 [6 0 0 -6 0 0 ]msf
353.04 112.5 mo
( )sh
LBAXTC+Helvetica*1 [6 0 0 -6 0 0 ]msf
358.98 112.5 mo
( RrNone1)
[1.67999 4.32782 118.5 4.38 3.29999 3.36002 57.36 0 ]xsh
41.4 121.98 mo
(PUSHRrPush Register on StackSTACK )
[4.00864 4.3386 3.96004 49.8 4.3386 55.9199 3.96005 3.36 3.00659 3.34261 1.62001 4.37999 
3.3 3.34259 1.33861 3.00661 1.67461 3.29999 1.97997 1.67999 3.34261 3.3 1.67999 4.00865 
1.67461 3.29999 3 124.02 4.02002 3.67255 3.96008 4.38 3.96002 0 ]xsh
LBAXTD+SymbolMT*1 [6 0 0 -6 0 0 ]msf
369.06 121.98 mo
( )sh
LBAXTC+Helvetica*1 [6 0 0 -6 0 0 ]msf
375 121.98 mo
( RrNone2)
[1.62 4.37219 102.48 4.37219 3.29999 3.37622 57.36 0 ]xsh
41.4 131.46 mo
(POPRdPop Register from StackRd )
[4.02304 4.62 53.46 4.32 55.92 3.96004 3.35699 3.35699 1.62001 4.353 3.3 3.35699 
1.31999 3.02101 1.689 3.29999 2.03996 1.62 1.68901 1.97995 3.35699 4.97995 1.68001 4.02304 
1.62001 3.35699 3.021 121.68 4.32001 3.35699 0 ]xsh
LBAXTD+SymbolMT*1 [6 0 0 -6 0 0 ]msf
356.76 131.46 mo
( )sh
LBAXTC+Helvetica*1 [6 0 0 -6 0 0 ]msf
362.64 131.46 mo
( STACKNone2)
[1.67999 4.00986 3.67374 3.96005 4.38 103.14 4.38 3.29999 3.35999 57.36 0 ]xsh
%ADOBeginSubsetFont: ADVAAA+Helvetica-Bold AddGlyphs
%ADOt1write: (1.0.24)
systemdict begin
LBAXTB+Helvetica-Bold dup
/Private get dup rcheck
{begin true}{pop false}ifelse exch
/CharStrings get begin
systemdict /gcheck known {currentglobal currentdict gcheck setglobal} if
/space <1C60D8A8C9B854D00D> |-
/numbersign <1C60D8A8C9B7EF322B4EAC20C0679A92F6AAD0CF50452F4B7A8
C2F5B6CEAD8CCC81EE9E42811C0EB8AC7410D1978E4D4D19F8B77ABF1999D600
CA3FAA512FBBD58F02B46E3765A6D8077F3A215020B13FC3A95AD98B283328FC
B7D65D6DE734F0AACFD392A223B16E759499D33F7B2BD4ED0F77C5D9A0C43> |-
/C <1C60D8A8C9B6079FED37BD4297810A8F45ACF55D8D12634D77C5813B2BA5
52EE475FAE4879F3DD2AB20BD9945A4E8BDD86137D53ADEDD687C2FA6D371D3F
79E1AF8B21C167D0A1C13C40E843C9F29F0084A04288AE92384343780B0ACE2E
7B05F0> |-
/D <1C60D8A8C9B6079F1E21021F8DFEBC43D42A708489C7DE9C2A547484CC61
F625BCD0D05D23D83FD37C63566CFD3D632B2C7362B4C8B59094EFB4C9BBBA56
55012F391A5A4A127152E7BA46B3A700> |-
/F <1C60D8A8C9B7D8BE41A64DA54F1041CAFA8003E90FAAD3AFEFB2B35892D7
DA35D646001C2EC6AAF61323D272A19EDE14BD4750A7EF9E29ADC8A12D> |-
/I <1C60D8A8C9B854D0A3953AFD56E13A2711DDCC5AD89F7135E194E27E004E
E8C929C12A> |-
/L <1C60D8A8C9B7D8BE6A287B22DA0B19F05B2FBD0CC9EABFA4F6FF71D08C02
F57C33E4CDE5822439A881D2> |-
/M <1C60D8A8C9B6B41CC7E939797865C145E43F931AC19F6BE6ACDDB6D19D73
31986EFAFD75D7A5B653EC4D98CAC1D9AFD60DC2F6E9931AC429FBBFFBFFA286
881E85D8E30A3A7E6E7E02F751FC06A2336E2D4606> |-
/N <1C60D8A8C9B6079F3517E07490032202E3565C1E79DF5E2CEC4A45528FC5
016B29120A3E353AAA58C8CAA884C65BAC48C2BF75C8B630A8C2AE2DF60F19E9
5CA77542> |-
/O <1C60D8A8C9B6FF867A376B705097D3DF2A09DD418C426287289928C624EE
A3A0AA5CD32985B403C4A705D174ACDF14F2551DA95FBC1C89EE4C51CB768A6A
99DDBABA0DAB09FDABEBAD1A9440E373139F78CFB64D66E43E3F4BCCEFFF> |-
/R <1C60D8A8C9B6079F1E488480F8E68E5DD28C4CA6F2FDB05A637E428CDEE4
C22721187778E5F2B25D958D16227514110DCE6B3233C5414B45808A9D8EF6F1
51BE915BBC23B9359B9BB6EC849CBE6D12FD40BC3365C05316335547AD48C457
A49D34DA9AE5416AC2C9569D67C306A93222297043166740A51DD29D1B1114DF
68EBDE0DB312AC26E786906787> |-
/S <1C60D8A8C9B64EDF7BB34086DE0E69D005A26DA4BA735FB798EA75D21BB5
5F6C759A94D7062788EE1818A2CA42627F3ECF77AE8E6E0C7E51D6A454D23A0A
9A7EEB64A70BEE97F45AA8B3E2371AC3DB82FF7E46221DB88F49D982D34C205E
2D12707FFEB990F6572BC32BF83CE5AE033213D02C9D3ABBBF509C642807ACD2
B8C0DCA6FB993EA33F866CDBD15C99D9850FE920C5F6B7C2EE42FD386D3385DA
4F71F4FA7DB0C17082384CFE> |-
/U <1C60D8A8C9B6079FED37B83A011931DC1977ACBC6966068B30CD81707B5A
34BF29FDCFE6B65E47EEB3833460F45B48B8D8A1A7500F8D135FF567512179ED
4B4926218477C5EA2656C91723844B6007> |-
/c <1C60D8A8C9B7EF32A1CB4643D9F758FE77E8D463BA3587C906C92C06DFB4
B5EA9664C3EB7AE74722EC172B56EF65CCA8FFF074C589B30756144CBE6731AA
5E6474FEDDE0262E202640C515DE0444A603F708E3C5E4E728C6CCB962ACA3> |-
/d <1C60D8A8C9B7D8BE9CC6FAB2DB847ABE04CAE7CAF18F66C0BBD51FE97C0A
303DD1757BD410028AB0A6B0D151DE51370F41EC0906FF9823A3B56FC4C5E195
9632791667AD20258ABD3FB2D692031CD3246B770B141196D1A3ED87FE61BBC8
BDE49762DDA99E5D99A7EC80CC7FBA3D3E9DB276FA89E5D888EF39CD6CF2A662
7805B514869C63EC1CDDCAA18718AE178F21AA780004BFE8D9C5F318> |-
/i <1C60D8A8C9B854D0A3953AFCCEC8366C1D9CC8ABF9AEF18FDFFCAC314569
F9907FC5583E9D03A4D019A6CF0F25B41305D6CDC0057657713A374168748F41
BCB7F4> |-
/k <1C60D8A8C9B7EF327C10274AF641B7D9FAD1311D427D569E62770192BFCE
8E44E713A3CDFC9CD55623D68170D37566F7D462DAED9EF152EBEA7B4D8AD73E
7ACD5713661BF766D5> |-
/l <1C60D8A8C9B854D0A3953AFD56E13A3C2277C895ED2230AD4B57AED4E6F2
F61F2CD118> |-
/n <1C60D8A8C9B7D8BE41A64DAAD50EBDD41CADFC55395F79E79D65C1305616
5B4B592635D62DE2A0394E5032302F5CFACECE059BF877A8313C2AACD1E23323
A6DC0569FC07221BACC79EF8100AE4A1FB5DDB16A4DD38E8CC77C17FB1D2CB66
0A3721D14AE87BD921727B4AFA4B53E9E311A5F7> |-
/o <1C60D8A8C9B7D8BE9CC6F749512707A5CB05AB5243B0645F9444C502F419
3FB356ABA45B4FA26E907D725C29EBD51C6E82BD7C0D8F7061BDD006EA19F724
8676AEE29D27B87199433A93CBAD6CD52EE44525E04315718039BB53845EEB> |-
/p <1C60D8A8C9B7D8BE1A134861007F288709A026F4EAD441D0DB9001EABE2D
B92C5255FB184DB483EADFB48D2A88F026A2DD6EDE516F48FD443804CF9B7403
384A077AD30002C76ABA036DBBD46EFDA92B4EE0B7CC2E41CE6F03D681AB67A6
943524EEC72E907786EFDF10215A97E25147712684BE980577BC11BFE0413A23
5E7ADDC08DE261A758229961668104357A71DDB42A5F330CD2DF0F> |-
/r <1C60D8A8C9B7361F55E947F94FA9A74271AD89AF0ACFDBA20EED9EF285A4
8659332E27E557A0A575DD525BBCE890D404508496BF16A92B81F66619D70402
C8D72AF76C7243E9544720CB7C4B40CD5D238237C30B32E563> |-
/s <1C60D8A8C9B7EF32A1C9A55715442669FEA39943230735B36BA1D69124A6
B1AA7B79900DEB09302A96DDB334556A0C50310E49F72ABD34086BE04C9F56C3
A992C64040DA71C798B57BE72592455CA5C09B1689291508F5F788120F16B56A
A673A954D30C862A8D3BDCCAC3E1B28A4D5BBF2647EF1C70B8C4A494C4A0815D
49B6D568AAAE5D2FC4870B0E463670A054A66F5523F4E6C46A91A707298504F2
A7DB1BB4A1307894F83CF1C23A4F4F83AFEB35A393B96E645A64F45A90DAAC3F
2773B226C66AF70EF1130DD00708D0F1863C10C54696AFBC5F1AA9DDDB0FFFFD
051BFA610B7D9BABF9E13927228A1E8EB0F493EFD1F3E1F1CFDE604027DC154B
24C98FDDD15B7B0C37> |-
/t <1C60D8A8C9B81F2C48F08776F2C719518D47AF26D067673C2134BFE8FF0B
E648A55033C05D6EF107FB63837C497CF67E5F2E872B1CB4B010376FE93C318F
F3946E3F8206701C10348C551353812E54> |-
systemdict /gcheck known {setglobal} if end {end} if
end
LBAXTB+Helvetica-Bold /Encoding get
dup 32 /space put
dup 35 /numbersign put
dup 67 /C put
dup 68 /D put
dup 70 /F put
dup 73 /I put
dup 76 /L put
dup 77 /M put
dup 78 /N put
dup 79 /O put
dup 82 /R put
dup 83 /S put
dup 85 /U put
dup 99 /c put
dup 100 /d put
dup 105 /i put
dup 107 /k put
dup 108 /l put
dup 110 /n put
dup 111 /o put
dup 112 /p put
dup 114 /r put
dup 115 /s put
dup 116 /t put
pop
%ADOEndSubsetFont
/LBAXTB+Helvetica-Bold*1 
[32{/.notdef}rp /space 2{/.notdef}rp /numbersign 11{/.notdef}rp /slash /.notdef /one 
/two /three /four /five /six 10{/.notdef}rp /A /.notdef 
/C /D /.notdef /F 2{/.notdef}rp /I 2{/.notdef}rp /L 
/M /N /O /P /.notdef /R /S /T 
/U 11{/.notdef}rp /a /.notdef /c /d /e /.notdef 
/g /.notdef /i /.notdef /k /l /m /n 
/o /p /.notdef /r /s /t 139{/.notdef}rp]
LBAXTB+Helvetica-Bold nf
LBAXTB+Helvetica-Bold*1 [6 0 0 -6 0 0 ]msf
41.4 141 mo
(MCU CONTROL INSTRUCTIONS)
[4.99316 4.3272 4.3272 1.68 4.3272 4.6632 4.3272 3.66115 4.38 4.62 3.66116 1.68 
1.6632 4.3272 3.99724 3.66116 4.3272 4.3272 4.3272 3.66115 1.6632 4.6632 4.32719 0 
]xsh
LBAXTC+Helvetica*1 [6 0 0 -6 0 0 ]msf
41.4 150.48 mo
(NOPNo Operation)
[4.308 4.68 113.34 4.31999 3.36 1.62001 4.68001 3.35999 3.31201 2.03995 3.312 1.68001 
1.308 3.36 0 ]xsh
483.48 150.48 mo
(None1)
[4.36801 3.29999 3.37201 57.36 0 ]xsh
41.4 159.96 mo
(SLEEPSleep\(see specific descr. for Sleep function\)None1)
[4.02245 3.3 4.02244 3.96004 107.04 3.96005 1.3524 3.29999 3.35641 171.66 1.97998 3 
3.35638 3.29999 1.67999 3.02039 3.35638 3.30005 3 1.32001 1.67999 1.32001 3 1.67999 
3.35638 3.29999 3.02039 3.02039 2.01837 1.62 1.67999 1.68835 3.30005 2.01831 1.67999 3.96008 
1.32001 3.35638 3.35638 3.29999 1.67999 1.68842 3.30005 3.35638 3.02045 1.68842 1.32001 3.29999 
3.35999 36.42 4.38 3.30005 3.35999 57.36 0 ]xsh
41.4 169.5 mo
(WDRWatchdog Reset\(see specific descr. for WDR/timer\)None1)
[5.64 4.32 112.38 5.64 3.3564 1.6884 2.94 3.35641 3.3564 3.29999 3.3564 1.68001 
4.31999 3.3 3.0204 3.35641 141 1.97998 3.02039 3.35638 3.29999 1.67999 3.02039 3.35645 
3.29999 3 1.32001 1.67999 1.32001 3 1.67999 3.35638 3.29999 3.02039 3.02039 2.01837 
1.62 1.67999 1.68842 3.29999 2.01831 1.67999 5.64001 4.32001 4.32001 1.68842 1.68842 1.32001 
4.97992 3.35999 1.97998 45.1199 4.35242 3.30005 3.35638 57.36 0 ]xsh
41.4 178.5 mo
(BREAKBreakFor On-chip Debug OnlyNoneN/A)
[4.03024 4.32 3.96004 4.02005 106.02 3.96005 2.02614 3.3 3.3642 171 3.69415 3.3642 
1.97992 1.67999 4.62 3.36005 1.97998 3 3.3642 1.32001 3.3642 1.62 4.36017 3.29999 
3.3642 3.29999 3.3642 1.67999 4.62006 3.35999 1.32001 74.1 4.36017 3.30005 3.3642 54.06 
4.32001 1.67999 0 ]xsh
LBAXTB+Helvetica-Bold*1 [7.98 0 0 -7.98 0 0 ]msf
45.06 81.3 mo
(MnemonicsOperandsDescriptionOperationFlags#Clocks)
[6.64728 4.87572 4.43688 7.13977 4.87572 4.9196 2.21844 4.43687 24.9598 6.17972 4.9196 4.44008 
3.10428 4.43687 4.87572 4.91962 85.7403 5.75996 4.43689 4.43687 4.43687 3.10428 2.21844 4.91963 
2.65726 2.21844 4.91962 123.9 6.20844 4.91962 4.43686 3.10428 4.43689 2.65729 2.21844 4.8757 
70.1402 4.85977 2.21844 4.38022 4.8757 27.78 4.43689 5.76154 2.21844 4.91962 4.2597 4.44006 
0 ]xsh
35.76 180 mo
36.24 180 li
36.24 73.5 li
35.76 73.5 li
cp
f
97.86 134.46 mo
98.34 134.46 li
98.34 70.5 li
97.86 70.5 li
cp
f
97.86 181.98 mo
98.34 181.98 li
98.34 142.74 li
97.86 142.74 li
cp
f
158.1 134.46 mo
158.58 134.46 li
158.58 70.5 li
158.1 70.5 li
cp
f
158.1 181.98 mo
158.58 181.98 li
158.58 142.74 li
158.1 142.74 li
cp
f
341.76 134.46 mo
342.24 134.46 li
342.24 70.5 li
341.76 70.5 li
cp
f
341.76 181.98 mo
342.24 181.98 li
342.24 142.74 li
341.76 142.74 li
cp
f
477.84 134.46 mo
478.32 134.46 li
478.32 70.5 li
477.84 70.5 li
cp
f
477.84 181.98 mo
478.32 181.98 li
478.32 142.74 li
477.84 142.74 li
cp
f
530.88 134.46 mo
531.36 134.46 li
531.36 70.5 li
530.88 70.5 li
cp
f
530.88 181.98 mo
531.36 181.98 li
531.36 142.74 li
530.88 142.74 li
cp
f
575.76 180 mo
576.24 180 li
576.24 73.5 li
575.76 73.5 li
cp
f
35.76 73.5 mo
576.24 73.5 li
576.24 70.5 li
35.76 70.5 li
cp
f
35.76 86.22 mo
576.24 86.22 li
576.24 85.74 li
35.76 85.74 li
cp
f
35.76 95.7 mo
576.24 95.7 li
576.24 95.22 li
35.76 95.22 li
cp
f
35.76 105.24 mo
576.24 105.24 li
576.24 104.76 li
35.76 104.76 li
cp
f
35.76 114.72 mo
576.24 114.72 li
576.24 114.24 li
35.76 114.24 li
cp
f
35.76 125.46 mo
576.24 125.46 li
576.24 122.46 li
35.76 122.46 li
cp
f
35.76 134.52 mo
576.24 134.52 li
576.24 132.54 li
35.76 132.54 li
cp
f
35.76 143.22 mo
576.24 143.22 li
576.24 142.74 li
35.76 142.74 li
cp
f
35.76 152.7 mo
576.24 152.7 li
576.24 152.22 li
35.76 152.22 li
cp
f
35.76 162.24 mo
576.24 162.24 li
576.24 161.76 li
35.76 161.76 li
cp
f
35.76 171.72 mo
576.24 171.72 li
576.24 171.24 li
35.76 171.24 li
cp
f
35.76 181.98 mo
576.24 181.98 li
576.24 180 li
35.76 180 li
cp
f
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/3 ]]
] del_res
/LBAXTC+Helvetica*1 uf
/LBAXTC+Helvetica uf
/BLQAAA+Helvetica uf
/LBAXTD+SymbolMT*1 uf
/LBAXTD+SymbolMT uf
/ZJXAAA+SymbolMT uf
/LBAXTB+Helvetica-Bold*1 uf
/LBAXTB+Helvetica-Bold uf
/ADVAAA+Helvetica-Bold uf
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
showpage
%%Trailer
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Core/pt gx
end
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 3
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: *CustomPageSize True
%%DocumentProcessColors:  Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
